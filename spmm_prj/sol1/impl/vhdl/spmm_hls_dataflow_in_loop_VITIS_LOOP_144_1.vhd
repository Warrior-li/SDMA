-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    batch : IN STD_LOGIC_VECTOR (27 downto 0);
    A : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    B : IN STD_LOGIC_VECTOR (63 downto 0);
    K : IN STD_LOGIC_VECTOR (31 downto 0);
    K_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    batch_ap_vld : IN STD_LOGIC;
    A_ap_vld : IN STD_LOGIC;
    B_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_K_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_K_c_write : STD_LOGIC;
    signal load_A_U0_ap_start : STD_LOGIC;
    signal load_A_U0_ap_done : STD_LOGIC;
    signal load_A_U0_ap_continue : STD_LOGIC;
    signal load_A_U0_ap_idle : STD_LOGIC;
    signal load_A_U0_ap_ready : STD_LOGIC;
    signal load_A_U0_start_out : STD_LOGIC;
    signal load_A_U0_start_write : STD_LOGIC;
    signal load_A_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal load_A_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_A_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_A_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_A_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_A_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_A_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_A_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_A_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_A_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_A_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_A_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_A_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal load_A_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal load_A_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal load_A_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal load_A_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_A_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_A_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal load_A_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_A_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_A_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_A_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_A_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_A_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_A_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_A_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_A_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_A_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_A_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_A_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal load_A_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal load_A_U0_A_stream1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load_A_U0_A_stream1_write : STD_LOGIC;
    signal load_stream_to_buffer_U0_ap_start : STD_LOGIC;
    signal load_stream_to_buffer_U0_ap_done : STD_LOGIC;
    signal load_stream_to_buffer_U0_ap_continue : STD_LOGIC;
    signal load_stream_to_buffer_U0_ap_idle : STD_LOGIC;
    signal load_stream_to_buffer_U0_ap_ready : STD_LOGIC;
    signal load_stream_to_buffer_U0_A_stream2_read : STD_LOGIC;
    signal load_stream_to_buffer_U0_ap_return_0 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_2 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_3 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_4 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_5 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_6 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_7 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_8 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_9 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_10 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_11 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_12 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_13 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_14 : STD_LOGIC_VECTOR (30 downto 0);
    signal load_stream_to_buffer_U0_ap_return_15 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_channel_done_buf0_col_V_15 : STD_LOGIC;
    signal buf0_col_V_15_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_15 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_15 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_14 : STD_LOGIC;
    signal buf0_col_V_14_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_14 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_14 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_13 : STD_LOGIC;
    signal buf0_col_V_13_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_13 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_13 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_12 : STD_LOGIC;
    signal buf0_col_V_12_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_12 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_12 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_11 : STD_LOGIC;
    signal buf0_col_V_11_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_11 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_11 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_10 : STD_LOGIC;
    signal buf0_col_V_10_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_10 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_10 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_9 : STD_LOGIC;
    signal buf0_col_V_9_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_9 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_9 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_8 : STD_LOGIC;
    signal buf0_col_V_8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_8 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_7 : STD_LOGIC;
    signal buf0_col_V_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_7 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_6 : STD_LOGIC;
    signal buf0_col_V_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_6 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_5 : STD_LOGIC;
    signal buf0_col_V_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_5 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_4 : STD_LOGIC;
    signal buf0_col_V_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_4 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_3 : STD_LOGIC;
    signal buf0_col_V_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_3 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_2 : STD_LOGIC;
    signal buf0_col_V_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_2 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V_1 : STD_LOGIC;
    signal buf0_col_V_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V_1 : STD_LOGIC;
    signal ap_channel_done_buf0_col_V : STD_LOGIC;
    signal buf0_col_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_buf0_col_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_buf0_col_V : STD_LOGIC;
    signal load_dense_accoding_A_U0_ap_start : STD_LOGIC;
    signal load_dense_accoding_A_U0_ap_done : STD_LOGIC;
    signal load_dense_accoding_A_U0_ap_continue : STD_LOGIC;
    signal load_dense_accoding_A_U0_ap_idle : STD_LOGIC;
    signal load_dense_accoding_A_U0_ap_ready : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_0_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_0_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_0_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_1_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_1_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_2_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_2_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_2_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_3_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_3_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_3_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_4_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_4_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_4_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_5_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_5_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_5_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_6_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_6_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_6_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_7_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal load_dense_accoding_A_U0_dense_ptr_7_ce0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_7_we0 : STD_LOGIC;
    signal load_dense_accoding_A_U0_dense_ptr_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal load_dense_accoding_A_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal load_dense_accoding_A_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_dense_accoding_A_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal load_dense_accoding_A_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal A_stream_full_n : STD_LOGIC;
    signal A_stream_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal A_stream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal A_stream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal A_stream_empty_n : STD_LOGIC;
    signal buf0_col_V_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_empty_n : STD_LOGIC;
    signal buf0_col_V_1_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_1_empty_n : STD_LOGIC;
    signal buf0_col_V_2_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_2_empty_n : STD_LOGIC;
    signal buf0_col_V_3_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_3_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_3_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_3_empty_n : STD_LOGIC;
    signal buf0_col_V_4_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_4_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_4_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_4_empty_n : STD_LOGIC;
    signal buf0_col_V_5_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_5_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_5_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_5_empty_n : STD_LOGIC;
    signal buf0_col_V_6_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_6_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_6_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_6_empty_n : STD_LOGIC;
    signal buf0_col_V_7_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_7_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_7_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_7_empty_n : STD_LOGIC;
    signal buf0_col_V_8_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_8_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_8_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_8_empty_n : STD_LOGIC;
    signal buf0_col_V_9_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_9_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_9_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_9_empty_n : STD_LOGIC;
    signal buf0_col_V_10_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_10_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_10_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_10_empty_n : STD_LOGIC;
    signal buf0_col_V_11_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_11_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_11_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_11_empty_n : STD_LOGIC;
    signal buf0_col_V_12_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_12_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_12_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_12_empty_n : STD_LOGIC;
    signal buf0_col_V_13_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_13_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_13_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_13_empty_n : STD_LOGIC;
    signal buf0_col_V_14_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_14_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_14_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_14_empty_n : STD_LOGIC;
    signal buf0_col_V_15_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal buf0_col_V_15_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_15_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal buf0_col_V_15_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_A_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_A_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_dense_accoding_A_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_dense_accoding_A_U0_ap_ready : STD_LOGIC;
    signal start_for_load_stream_to_buffer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_stream_to_buffer_U0_full_n : STD_LOGIC;
    signal start_for_load_stream_to_buffer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_stream_to_buffer_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        K : IN STD_LOGIC_VECTOR (31 downto 0);
        K_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        K_c_full_n : IN STD_LOGIC;
        K_c_write : OUT STD_LOGIC );
    end component;


    component spmm_hls_load_A IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        batch : IN STD_LOGIC_VECTOR (27 downto 0);
        A : IN STD_LOGIC_VECTOR (63 downto 0);
        A_stream1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_stream1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        A_stream1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        A_stream1_full_n : IN STD_LOGIC;
        A_stream1_write : OUT STD_LOGIC );
    end component;


    component spmm_hls_load_stream_to_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_stream2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        A_stream2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        A_stream2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        A_stream2_empty_n : IN STD_LOGIC;
        A_stream2_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (30 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component spmm_hls_load_dense_accoding_A IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (30 downto 0);
        dense_ptr_0_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_0_ce0 : OUT STD_LOGIC;
        dense_ptr_0_we0 : OUT STD_LOGIC;
        dense_ptr_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_1_ce0 : OUT STD_LOGIC;
        dense_ptr_1_we0 : OUT STD_LOGIC;
        dense_ptr_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_2_ce0 : OUT STD_LOGIC;
        dense_ptr_2_we0 : OUT STD_LOGIC;
        dense_ptr_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_3_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_3_ce0 : OUT STD_LOGIC;
        dense_ptr_3_we0 : OUT STD_LOGIC;
        dense_ptr_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_4_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_4_ce0 : OUT STD_LOGIC;
        dense_ptr_4_we0 : OUT STD_LOGIC;
        dense_ptr_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_5_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_5_ce0 : OUT STD_LOGIC;
        dense_ptr_5_we0 : OUT STD_LOGIC;
        dense_ptr_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_6_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_6_ce0 : OUT STD_LOGIC;
        dense_ptr_6_we0 : OUT STD_LOGIC;
        dense_ptr_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_ptr_7_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        dense_ptr_7_ce0 : OUT STD_LOGIC;
        dense_ptr_7_we0 : OUT STD_LOGIC;
        dense_ptr_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        B : IN STD_LOGIC_VECTOR (63 downto 0);
        K : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_fifo_w64_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmm_hls_fifo_w31_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (30 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (30 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmm_hls_start_for_load_stream_to_buffer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Dense_Buf0_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_0_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_0_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_0_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_0_d0);

    Dense_Buf0_1_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_1_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_1_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_1_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_1_d0);

    Dense_Buf0_2_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_2_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_2_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_2_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_2_d0);

    Dense_Buf0_3_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_3_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_3_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_3_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_3_d0);

    Dense_Buf0_4_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_4_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_4_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_4_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_4_d0);

    Dense_Buf0_5_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_5_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_5_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_5_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_5_d0);

    Dense_Buf0_6_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_6_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_6_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_6_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_6_d0);

    Dense_Buf0_7_U : component spmm_hls_dataflow_in_loop_VITIS_LOOP_144_1_Dense_Buf0_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => load_dense_accoding_A_U0_dense_ptr_7_address0,
        ce0 => load_dense_accoding_A_U0_dense_ptr_7_ce0,
        we0 => load_dense_accoding_A_U0_dense_ptr_7_we0,
        d0 => load_dense_accoding_A_U0_dense_ptr_7_d0);

    entry_proc_U0 : component spmm_hls_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        K => K,
        K_c_din => entry_proc_U0_K_c_din,
        K_c_full_n => ap_const_logic_1,
        K_c_write => entry_proc_U0_K_c_write);

    load_A_U0 : component spmm_hls_load_A
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_A_U0_ap_start,
        start_full_n => start_for_load_stream_to_buffer_U0_full_n,
        ap_done => load_A_U0_ap_done,
        ap_continue => load_A_U0_ap_continue,
        ap_idle => load_A_U0_ap_idle,
        ap_ready => load_A_U0_ap_ready,
        start_out => load_A_U0_start_out,
        start_write => load_A_U0_start_write,
        m_axi_gmem0_AWVALID => load_A_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => load_A_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => load_A_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => load_A_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => load_A_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => load_A_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => load_A_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => load_A_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => load_A_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => load_A_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => load_A_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => load_A_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => load_A_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => load_A_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => load_A_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => load_A_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => load_A_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => load_A_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => load_A_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => load_A_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => load_A_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => load_A_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => load_A_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => load_A_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => load_A_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => load_A_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => load_A_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => load_A_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => load_A_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => load_A_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => load_A_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => load_A_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        batch => batch,
        A => A,
        A_stream1_din => load_A_U0_A_stream1_din,
        A_stream1_num_data_valid => A_stream_num_data_valid,
        A_stream1_fifo_cap => A_stream_fifo_cap,
        A_stream1_full_n => A_stream_full_n,
        A_stream1_write => load_A_U0_A_stream1_write);

    load_stream_to_buffer_U0 : component spmm_hls_load_stream_to_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_stream_to_buffer_U0_ap_start,
        ap_done => load_stream_to_buffer_U0_ap_done,
        ap_continue => load_stream_to_buffer_U0_ap_continue,
        ap_idle => load_stream_to_buffer_U0_ap_idle,
        ap_ready => load_stream_to_buffer_U0_ap_ready,
        A_stream2_dout => A_stream_dout,
        A_stream2_num_data_valid => A_stream_num_data_valid,
        A_stream2_fifo_cap => A_stream_fifo_cap,
        A_stream2_empty_n => A_stream_empty_n,
        A_stream2_read => load_stream_to_buffer_U0_A_stream2_read,
        ap_return_0 => load_stream_to_buffer_U0_ap_return_0,
        ap_return_1 => load_stream_to_buffer_U0_ap_return_1,
        ap_return_2 => load_stream_to_buffer_U0_ap_return_2,
        ap_return_3 => load_stream_to_buffer_U0_ap_return_3,
        ap_return_4 => load_stream_to_buffer_U0_ap_return_4,
        ap_return_5 => load_stream_to_buffer_U0_ap_return_5,
        ap_return_6 => load_stream_to_buffer_U0_ap_return_6,
        ap_return_7 => load_stream_to_buffer_U0_ap_return_7,
        ap_return_8 => load_stream_to_buffer_U0_ap_return_8,
        ap_return_9 => load_stream_to_buffer_U0_ap_return_9,
        ap_return_10 => load_stream_to_buffer_U0_ap_return_10,
        ap_return_11 => load_stream_to_buffer_U0_ap_return_11,
        ap_return_12 => load_stream_to_buffer_U0_ap_return_12,
        ap_return_13 => load_stream_to_buffer_U0_ap_return_13,
        ap_return_14 => load_stream_to_buffer_U0_ap_return_14,
        ap_return_15 => load_stream_to_buffer_U0_ap_return_15);

    load_dense_accoding_A_U0 : component spmm_hls_load_dense_accoding_A
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_dense_accoding_A_U0_ap_start,
        ap_done => load_dense_accoding_A_U0_ap_done,
        ap_continue => load_dense_accoding_A_U0_ap_continue,
        ap_idle => load_dense_accoding_A_U0_ap_idle,
        ap_ready => load_dense_accoding_A_U0_ap_ready,
        p_read => buf0_col_V_dout,
        p_read1 => buf0_col_V_1_dout,
        p_read2 => buf0_col_V_2_dout,
        p_read3 => buf0_col_V_3_dout,
        p_read4 => buf0_col_V_4_dout,
        p_read5 => buf0_col_V_5_dout,
        p_read6 => buf0_col_V_6_dout,
        p_read7 => buf0_col_V_7_dout,
        p_read8 => buf0_col_V_8_dout,
        p_read9 => buf0_col_V_9_dout,
        p_read10 => buf0_col_V_10_dout,
        p_read11 => buf0_col_V_11_dout,
        p_read12 => buf0_col_V_12_dout,
        p_read13 => buf0_col_V_13_dout,
        p_read14 => buf0_col_V_14_dout,
        p_read15 => buf0_col_V_15_dout,
        dense_ptr_0_address0 => load_dense_accoding_A_U0_dense_ptr_0_address0,
        dense_ptr_0_ce0 => load_dense_accoding_A_U0_dense_ptr_0_ce0,
        dense_ptr_0_we0 => load_dense_accoding_A_U0_dense_ptr_0_we0,
        dense_ptr_0_d0 => load_dense_accoding_A_U0_dense_ptr_0_d0,
        dense_ptr_1_address0 => load_dense_accoding_A_U0_dense_ptr_1_address0,
        dense_ptr_1_ce0 => load_dense_accoding_A_U0_dense_ptr_1_ce0,
        dense_ptr_1_we0 => load_dense_accoding_A_U0_dense_ptr_1_we0,
        dense_ptr_1_d0 => load_dense_accoding_A_U0_dense_ptr_1_d0,
        dense_ptr_2_address0 => load_dense_accoding_A_U0_dense_ptr_2_address0,
        dense_ptr_2_ce0 => load_dense_accoding_A_U0_dense_ptr_2_ce0,
        dense_ptr_2_we0 => load_dense_accoding_A_U0_dense_ptr_2_we0,
        dense_ptr_2_d0 => load_dense_accoding_A_U0_dense_ptr_2_d0,
        dense_ptr_3_address0 => load_dense_accoding_A_U0_dense_ptr_3_address0,
        dense_ptr_3_ce0 => load_dense_accoding_A_U0_dense_ptr_3_ce0,
        dense_ptr_3_we0 => load_dense_accoding_A_U0_dense_ptr_3_we0,
        dense_ptr_3_d0 => load_dense_accoding_A_U0_dense_ptr_3_d0,
        dense_ptr_4_address0 => load_dense_accoding_A_U0_dense_ptr_4_address0,
        dense_ptr_4_ce0 => load_dense_accoding_A_U0_dense_ptr_4_ce0,
        dense_ptr_4_we0 => load_dense_accoding_A_U0_dense_ptr_4_we0,
        dense_ptr_4_d0 => load_dense_accoding_A_U0_dense_ptr_4_d0,
        dense_ptr_5_address0 => load_dense_accoding_A_U0_dense_ptr_5_address0,
        dense_ptr_5_ce0 => load_dense_accoding_A_U0_dense_ptr_5_ce0,
        dense_ptr_5_we0 => load_dense_accoding_A_U0_dense_ptr_5_we0,
        dense_ptr_5_d0 => load_dense_accoding_A_U0_dense_ptr_5_d0,
        dense_ptr_6_address0 => load_dense_accoding_A_U0_dense_ptr_6_address0,
        dense_ptr_6_ce0 => load_dense_accoding_A_U0_dense_ptr_6_ce0,
        dense_ptr_6_we0 => load_dense_accoding_A_U0_dense_ptr_6_we0,
        dense_ptr_6_d0 => load_dense_accoding_A_U0_dense_ptr_6_d0,
        dense_ptr_7_address0 => load_dense_accoding_A_U0_dense_ptr_7_address0,
        dense_ptr_7_ce0 => load_dense_accoding_A_U0_dense_ptr_7_ce0,
        dense_ptr_7_we0 => load_dense_accoding_A_U0_dense_ptr_7_we0,
        dense_ptr_7_d0 => load_dense_accoding_A_U0_dense_ptr_7_d0,
        m_axi_gmem1_AWVALID => load_dense_accoding_A_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => load_dense_accoding_A_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => load_dense_accoding_A_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => load_dense_accoding_A_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => load_dense_accoding_A_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => load_dense_accoding_A_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => load_dense_accoding_A_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => load_dense_accoding_A_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => load_dense_accoding_A_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => load_dense_accoding_A_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => load_dense_accoding_A_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => load_dense_accoding_A_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => load_dense_accoding_A_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => load_dense_accoding_A_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => load_dense_accoding_A_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => load_dense_accoding_A_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => load_dense_accoding_A_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => load_dense_accoding_A_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => load_dense_accoding_A_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => load_dense_accoding_A_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => load_dense_accoding_A_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => load_dense_accoding_A_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => load_dense_accoding_A_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => load_dense_accoding_A_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => load_dense_accoding_A_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => load_dense_accoding_A_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => load_dense_accoding_A_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => load_dense_accoding_A_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => load_dense_accoding_A_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => load_dense_accoding_A_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => load_dense_accoding_A_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM => m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => load_dense_accoding_A_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        B => B,
        K => K);

    A_stream_U : component spmm_hls_fifo_w64_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_A_U0_A_stream1_din,
        if_full_n => A_stream_full_n,
        if_write => load_A_U0_A_stream1_write,
        if_dout => A_stream_dout,
        if_num_data_valid => A_stream_num_data_valid,
        if_fifo_cap => A_stream_fifo_cap,
        if_empty_n => A_stream_empty_n,
        if_read => load_stream_to_buffer_U0_A_stream2_read);

    buf0_col_V_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_0,
        if_full_n => buf0_col_V_full_n,
        if_write => ap_channel_done_buf0_col_V,
        if_dout => buf0_col_V_dout,
        if_num_data_valid => buf0_col_V_num_data_valid,
        if_fifo_cap => buf0_col_V_fifo_cap,
        if_empty_n => buf0_col_V_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_1_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_1,
        if_full_n => buf0_col_V_1_full_n,
        if_write => ap_channel_done_buf0_col_V_1,
        if_dout => buf0_col_V_1_dout,
        if_num_data_valid => buf0_col_V_1_num_data_valid,
        if_fifo_cap => buf0_col_V_1_fifo_cap,
        if_empty_n => buf0_col_V_1_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_2_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_2,
        if_full_n => buf0_col_V_2_full_n,
        if_write => ap_channel_done_buf0_col_V_2,
        if_dout => buf0_col_V_2_dout,
        if_num_data_valid => buf0_col_V_2_num_data_valid,
        if_fifo_cap => buf0_col_V_2_fifo_cap,
        if_empty_n => buf0_col_V_2_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_3_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_3,
        if_full_n => buf0_col_V_3_full_n,
        if_write => ap_channel_done_buf0_col_V_3,
        if_dout => buf0_col_V_3_dout,
        if_num_data_valid => buf0_col_V_3_num_data_valid,
        if_fifo_cap => buf0_col_V_3_fifo_cap,
        if_empty_n => buf0_col_V_3_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_4_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_4,
        if_full_n => buf0_col_V_4_full_n,
        if_write => ap_channel_done_buf0_col_V_4,
        if_dout => buf0_col_V_4_dout,
        if_num_data_valid => buf0_col_V_4_num_data_valid,
        if_fifo_cap => buf0_col_V_4_fifo_cap,
        if_empty_n => buf0_col_V_4_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_5_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_5,
        if_full_n => buf0_col_V_5_full_n,
        if_write => ap_channel_done_buf0_col_V_5,
        if_dout => buf0_col_V_5_dout,
        if_num_data_valid => buf0_col_V_5_num_data_valid,
        if_fifo_cap => buf0_col_V_5_fifo_cap,
        if_empty_n => buf0_col_V_5_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_6_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_6,
        if_full_n => buf0_col_V_6_full_n,
        if_write => ap_channel_done_buf0_col_V_6,
        if_dout => buf0_col_V_6_dout,
        if_num_data_valid => buf0_col_V_6_num_data_valid,
        if_fifo_cap => buf0_col_V_6_fifo_cap,
        if_empty_n => buf0_col_V_6_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_7_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_7,
        if_full_n => buf0_col_V_7_full_n,
        if_write => ap_channel_done_buf0_col_V_7,
        if_dout => buf0_col_V_7_dout,
        if_num_data_valid => buf0_col_V_7_num_data_valid,
        if_fifo_cap => buf0_col_V_7_fifo_cap,
        if_empty_n => buf0_col_V_7_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_8_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_8,
        if_full_n => buf0_col_V_8_full_n,
        if_write => ap_channel_done_buf0_col_V_8,
        if_dout => buf0_col_V_8_dout,
        if_num_data_valid => buf0_col_V_8_num_data_valid,
        if_fifo_cap => buf0_col_V_8_fifo_cap,
        if_empty_n => buf0_col_V_8_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_9_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_9,
        if_full_n => buf0_col_V_9_full_n,
        if_write => ap_channel_done_buf0_col_V_9,
        if_dout => buf0_col_V_9_dout,
        if_num_data_valid => buf0_col_V_9_num_data_valid,
        if_fifo_cap => buf0_col_V_9_fifo_cap,
        if_empty_n => buf0_col_V_9_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_10_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_10,
        if_full_n => buf0_col_V_10_full_n,
        if_write => ap_channel_done_buf0_col_V_10,
        if_dout => buf0_col_V_10_dout,
        if_num_data_valid => buf0_col_V_10_num_data_valid,
        if_fifo_cap => buf0_col_V_10_fifo_cap,
        if_empty_n => buf0_col_V_10_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_11_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_11,
        if_full_n => buf0_col_V_11_full_n,
        if_write => ap_channel_done_buf0_col_V_11,
        if_dout => buf0_col_V_11_dout,
        if_num_data_valid => buf0_col_V_11_num_data_valid,
        if_fifo_cap => buf0_col_V_11_fifo_cap,
        if_empty_n => buf0_col_V_11_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_12_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_12,
        if_full_n => buf0_col_V_12_full_n,
        if_write => ap_channel_done_buf0_col_V_12,
        if_dout => buf0_col_V_12_dout,
        if_num_data_valid => buf0_col_V_12_num_data_valid,
        if_fifo_cap => buf0_col_V_12_fifo_cap,
        if_empty_n => buf0_col_V_12_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_13_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_13,
        if_full_n => buf0_col_V_13_full_n,
        if_write => ap_channel_done_buf0_col_V_13,
        if_dout => buf0_col_V_13_dout,
        if_num_data_valid => buf0_col_V_13_num_data_valid,
        if_fifo_cap => buf0_col_V_13_fifo_cap,
        if_empty_n => buf0_col_V_13_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_14_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_14,
        if_full_n => buf0_col_V_14_full_n,
        if_write => ap_channel_done_buf0_col_V_14,
        if_dout => buf0_col_V_14_dout,
        if_num_data_valid => buf0_col_V_14_num_data_valid,
        if_fifo_cap => buf0_col_V_14_fifo_cap,
        if_empty_n => buf0_col_V_14_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    buf0_col_V_15_U : component spmm_hls_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_stream_to_buffer_U0_ap_return_15,
        if_full_n => buf0_col_V_15_full_n,
        if_write => ap_channel_done_buf0_col_V_15,
        if_dout => buf0_col_V_15_dout,
        if_num_data_valid => buf0_col_V_15_num_data_valid,
        if_fifo_cap => buf0_col_V_15_fifo_cap,
        if_empty_n => buf0_col_V_15_empty_n,
        if_read => load_dense_accoding_A_U0_ap_ready);

    start_for_load_stream_to_buffer_U0_U : component spmm_hls_start_for_load_stream_to_buffer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_load_stream_to_buffer_U0_din,
        if_full_n => start_for_load_stream_to_buffer_U0_full_n,
        if_write => load_A_U0_start_write,
        if_dout => start_for_load_stream_to_buffer_U0_dout,
        if_empty_n => start_for_load_stream_to_buffer_U0_empty_n,
        if_read => load_stream_to_buffer_U0_ap_ready);





    ap_sync_reg_channel_write_buf0_col_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V <= ap_sync_channel_write_buf0_col_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_1 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_1 <= ap_sync_channel_write_buf0_col_V_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_10 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_10 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_10 <= ap_sync_channel_write_buf0_col_V_10;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_11 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_11 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_11 <= ap_sync_channel_write_buf0_col_V_11;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_12 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_12 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_12 <= ap_sync_channel_write_buf0_col_V_12;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_13 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_13 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_13 <= ap_sync_channel_write_buf0_col_V_13;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_14 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_14 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_14 <= ap_sync_channel_write_buf0_col_V_14;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_15 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_15 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_15 <= ap_sync_channel_write_buf0_col_V_15;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_2 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_2 <= ap_sync_channel_write_buf0_col_V_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_3 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_3 <= ap_sync_channel_write_buf0_col_V_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_4 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_4 <= ap_sync_channel_write_buf0_col_V_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_5 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_5 <= ap_sync_channel_write_buf0_col_V_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_6 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_6 <= ap_sync_channel_write_buf0_col_V_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_7 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_7 <= ap_sync_channel_write_buf0_col_V_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_8 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_8 <= ap_sync_channel_write_buf0_col_V_8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_buf0_col_V_9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_buf0_col_V_9 <= ap_const_logic_0;
            else
                if (((load_stream_to_buffer_U0_ap_done and load_stream_to_buffer_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_buf0_col_V_9 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_buf0_col_V_9 <= ap_sync_channel_write_buf0_col_V_9;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_A_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_A_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_A_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_A_U0_ap_ready <= ap_sync_load_A_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_dense_accoding_A_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_dense_accoding_A_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_dense_accoding_A_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_dense_accoding_A_U0_ap_ready <= ap_sync_load_dense_accoding_A_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_buf0_col_V <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_1 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_1 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_10 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_10 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_11 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_11 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_12 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_12 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_13 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_13 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_14 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_14 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_15 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_15 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_2 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_2 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_3 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_3 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_4 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_4 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_5 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_5 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_6 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_6 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_7 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_7 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_8 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_8 xor ap_const_logic_1));
    ap_channel_done_buf0_col_V_9 <= (load_stream_to_buffer_U0_ap_done and (ap_sync_reg_channel_write_buf0_col_V_9 xor ap_const_logic_1));
    ap_done <= load_dense_accoding_A_U0_ap_done;
    ap_idle <= (load_stream_to_buffer_U0_ap_idle and load_dense_accoding_A_U0_ap_idle and load_A_U0_ap_idle and (buf0_col_V_15_empty_n xor ap_const_logic_1) and (buf0_col_V_14_empty_n xor ap_const_logic_1) and (buf0_col_V_13_empty_n xor ap_const_logic_1) and (buf0_col_V_12_empty_n xor ap_const_logic_1) and (buf0_col_V_11_empty_n xor ap_const_logic_1) and (buf0_col_V_10_empty_n xor ap_const_logic_1) and (buf0_col_V_9_empty_n xor ap_const_logic_1) and (buf0_col_V_8_empty_n xor ap_const_logic_1) and (buf0_col_V_7_empty_n xor ap_const_logic_1) and (buf0_col_V_6_empty_n xor ap_const_logic_1) and (buf0_col_V_5_empty_n xor ap_const_logic_1) and (buf0_col_V_4_empty_n xor ap_const_logic_1) and (buf0_col_V_3_empty_n xor ap_const_logic_1) and (buf0_col_V_2_empty_n xor ap_const_logic_1) and (buf0_col_V_1_empty_n xor ap_const_logic_1) and (buf0_col_V_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_buf0_col_V <= ((buf0_col_V_full_n and ap_channel_done_buf0_col_V) or ap_sync_reg_channel_write_buf0_col_V);
    ap_sync_channel_write_buf0_col_V_1 <= ((buf0_col_V_1_full_n and ap_channel_done_buf0_col_V_1) or ap_sync_reg_channel_write_buf0_col_V_1);
    ap_sync_channel_write_buf0_col_V_10 <= ((buf0_col_V_10_full_n and ap_channel_done_buf0_col_V_10) or ap_sync_reg_channel_write_buf0_col_V_10);
    ap_sync_channel_write_buf0_col_V_11 <= ((buf0_col_V_11_full_n and ap_channel_done_buf0_col_V_11) or ap_sync_reg_channel_write_buf0_col_V_11);
    ap_sync_channel_write_buf0_col_V_12 <= ((buf0_col_V_12_full_n and ap_channel_done_buf0_col_V_12) or ap_sync_reg_channel_write_buf0_col_V_12);
    ap_sync_channel_write_buf0_col_V_13 <= ((buf0_col_V_13_full_n and ap_channel_done_buf0_col_V_13) or ap_sync_reg_channel_write_buf0_col_V_13);
    ap_sync_channel_write_buf0_col_V_14 <= ((buf0_col_V_14_full_n and ap_channel_done_buf0_col_V_14) or ap_sync_reg_channel_write_buf0_col_V_14);
    ap_sync_channel_write_buf0_col_V_15 <= ((buf0_col_V_15_full_n and ap_channel_done_buf0_col_V_15) or ap_sync_reg_channel_write_buf0_col_V_15);
    ap_sync_channel_write_buf0_col_V_2 <= ((buf0_col_V_2_full_n and ap_channel_done_buf0_col_V_2) or ap_sync_reg_channel_write_buf0_col_V_2);
    ap_sync_channel_write_buf0_col_V_3 <= ((buf0_col_V_3_full_n and ap_channel_done_buf0_col_V_3) or ap_sync_reg_channel_write_buf0_col_V_3);
    ap_sync_channel_write_buf0_col_V_4 <= ((buf0_col_V_4_full_n and ap_channel_done_buf0_col_V_4) or ap_sync_reg_channel_write_buf0_col_V_4);
    ap_sync_channel_write_buf0_col_V_5 <= ((buf0_col_V_5_full_n and ap_channel_done_buf0_col_V_5) or ap_sync_reg_channel_write_buf0_col_V_5);
    ap_sync_channel_write_buf0_col_V_6 <= ((buf0_col_V_6_full_n and ap_channel_done_buf0_col_V_6) or ap_sync_reg_channel_write_buf0_col_V_6);
    ap_sync_channel_write_buf0_col_V_7 <= ((buf0_col_V_7_full_n and ap_channel_done_buf0_col_V_7) or ap_sync_reg_channel_write_buf0_col_V_7);
    ap_sync_channel_write_buf0_col_V_8 <= ((buf0_col_V_8_full_n and ap_channel_done_buf0_col_V_8) or ap_sync_reg_channel_write_buf0_col_V_8);
    ap_sync_channel_write_buf0_col_V_9 <= ((buf0_col_V_9_full_n and ap_channel_done_buf0_col_V_9) or ap_sync_reg_channel_write_buf0_col_V_9);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_load_A_U0_ap_ready <= (load_A_U0_ap_ready or ap_sync_reg_load_A_U0_ap_ready);
    ap_sync_load_dense_accoding_A_U0_ap_ready <= (load_dense_accoding_A_U0_ap_ready or ap_sync_reg_load_dense_accoding_A_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_dense_accoding_A_U0_ap_ready and ap_sync_load_A_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_A_U0_ap_continue <= ap_const_logic_1;
    load_A_U0_ap_start <= ((ap_sync_reg_load_A_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_dense_accoding_A_U0_ap_continue <= ap_continue;
    load_dense_accoding_A_U0_ap_start <= ((ap_sync_reg_load_dense_accoding_A_U0_ap_ready xor ap_const_logic_1) and buf0_col_V_empty_n and buf0_col_V_9_empty_n and buf0_col_V_8_empty_n and buf0_col_V_7_empty_n and buf0_col_V_6_empty_n and buf0_col_V_5_empty_n and buf0_col_V_4_empty_n and buf0_col_V_3_empty_n and buf0_col_V_2_empty_n and buf0_col_V_1_empty_n and buf0_col_V_15_empty_n and buf0_col_V_14_empty_n and buf0_col_V_13_empty_n and buf0_col_V_12_empty_n and buf0_col_V_11_empty_n and buf0_col_V_10_empty_n and ap_start);
    load_stream_to_buffer_U0_ap_continue <= (ap_sync_channel_write_buf0_col_V_9 and ap_sync_channel_write_buf0_col_V_8 and ap_sync_channel_write_buf0_col_V_7 and ap_sync_channel_write_buf0_col_V_6 and ap_sync_channel_write_buf0_col_V_5 and ap_sync_channel_write_buf0_col_V_4 and ap_sync_channel_write_buf0_col_V_3 and ap_sync_channel_write_buf0_col_V_2 and ap_sync_channel_write_buf0_col_V_15 and ap_sync_channel_write_buf0_col_V_14 and ap_sync_channel_write_buf0_col_V_13 and ap_sync_channel_write_buf0_col_V_12 and ap_sync_channel_write_buf0_col_V_11 and ap_sync_channel_write_buf0_col_V_10 and ap_sync_channel_write_buf0_col_V_1 and ap_sync_channel_write_buf0_col_V);
    load_stream_to_buffer_U0_ap_start <= start_for_load_stream_to_buffer_U0_empty_n;
    m_axi_gmem0_ARADDR <= load_A_U0_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= load_A_U0_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= load_A_U0_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= load_A_U0_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= load_A_U0_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= load_A_U0_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= load_A_U0_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= load_A_U0_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= load_A_U0_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= load_A_U0_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= load_A_U0_m_axi_gmem0_ARUSER;
    m_axi_gmem0_ARVALID <= load_A_U0_m_axi_gmem0_ARVALID;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= load_A_U0_m_axi_gmem0_RREADY;
    m_axi_gmem0_WDATA <= ap_const_lv64_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv8_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= load_dense_accoding_A_U0_m_axi_gmem1_ARADDR;
    m_axi_gmem1_ARBURST <= load_dense_accoding_A_U0_m_axi_gmem1_ARBURST;
    m_axi_gmem1_ARCACHE <= load_dense_accoding_A_U0_m_axi_gmem1_ARCACHE;
    m_axi_gmem1_ARID <= load_dense_accoding_A_U0_m_axi_gmem1_ARID;
    m_axi_gmem1_ARLEN <= load_dense_accoding_A_U0_m_axi_gmem1_ARLEN;
    m_axi_gmem1_ARLOCK <= load_dense_accoding_A_U0_m_axi_gmem1_ARLOCK;
    m_axi_gmem1_ARPROT <= load_dense_accoding_A_U0_m_axi_gmem1_ARPROT;
    m_axi_gmem1_ARQOS <= load_dense_accoding_A_U0_m_axi_gmem1_ARQOS;
    m_axi_gmem1_ARREGION <= load_dense_accoding_A_U0_m_axi_gmem1_ARREGION;
    m_axi_gmem1_ARSIZE <= load_dense_accoding_A_U0_m_axi_gmem1_ARSIZE;
    m_axi_gmem1_ARUSER <= load_dense_accoding_A_U0_m_axi_gmem1_ARUSER;
    m_axi_gmem1_ARVALID <= load_dense_accoding_A_U0_m_axi_gmem1_ARVALID;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;
    m_axi_gmem1_RREADY <= load_dense_accoding_A_U0_m_axi_gmem1_RREADY;
    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    start_for_load_stream_to_buffer_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
