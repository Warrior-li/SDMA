-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_pe_Pipeline_VITIS_LOOP_78_173 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    len_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_7_ce0 : OUT STD_LOGIC;
    out_buf_7_we0 : OUT STD_LOGIC;
    out_buf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_6_ce0 : OUT STD_LOGIC;
    out_buf_6_we0 : OUT STD_LOGIC;
    out_buf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_5_ce0 : OUT STD_LOGIC;
    out_buf_5_we0 : OUT STD_LOGIC;
    out_buf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_4_ce0 : OUT STD_LOGIC;
    out_buf_4_we0 : OUT STD_LOGIC;
    out_buf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_3_ce0 : OUT STD_LOGIC;
    out_buf_3_we0 : OUT STD_LOGIC;
    out_buf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_2_ce0 : OUT STD_LOGIC;
    out_buf_2_we0 : OUT STD_LOGIC;
    out_buf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_1_ce0 : OUT STD_LOGIC;
    out_buf_1_we0 : OUT STD_LOGIC;
    out_buf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_0_ce0 : OUT STD_LOGIC;
    out_buf_0_we0 : OUT STD_LOGIC;
    out_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_ln99 : IN STD_LOGIC_VECTOR (19 downto 0);
    dense_buf_0_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_0_ce0 : OUT STD_LOGIC;
    dense_buf_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_1_ce0 : OUT STD_LOGIC;
    dense_buf_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_2_ce0 : OUT STD_LOGIC;
    dense_buf_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_3_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_3_ce0 : OUT STD_LOGIC;
    dense_buf_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_4_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_4_ce0 : OUT STD_LOGIC;
    dense_buf_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_5_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_5_ce0 : OUT STD_LOGIC;
    dense_buf_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_6_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_6_ce0 : OUT STD_LOGIC;
    dense_buf_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_buf_7_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_buf_7_ce0 : OUT STD_LOGIC;
    dense_buf_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    add_ln80_8 : IN STD_LOGIC_VECTOR (2 downto 0);
    conv_i_i : IN STD_LOGIC_VECTOR (31 downto 0);
    add_ln99_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    add_ln80_9 : IN STD_LOGIC_VECTOR (2 downto 0);
    grp_fu_1241_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1241_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1241_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1241_p_ce : OUT STD_LOGIC );
end;


architecture behav of spmm_hls_pe_Pipeline_VITIS_LOOP_78_173 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln78_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln80_1_fu_414_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_1_reg_535 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln80_3_reg_540 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln80_3_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln80_3_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln80_3_reg_540_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln80_3_reg_540_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln80_3_reg_540_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln80_3_fu_436_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_3_reg_545 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_3_reg_545_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_3_reg_545_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_3_reg_545_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_3_reg_545_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln80_3_reg_545_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_op_assign_1_fu_447_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_i1_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln80_1_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln78_fu_368_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln78_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_1_fu_378_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln80_fu_386_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln80_2_fu_392_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln80_fu_382_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln78_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln80_2_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U170 : component spmm_hls_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dense_buf_0_q0,
        din1 => dense_buf_1_q0,
        din2 => dense_buf_2_q0,
        din3 => dense_buf_3_q0,
        din4 => dense_buf_4_q0,
        din5 => dense_buf_5_q0,
        din6 => dense_buf_6_q0,
        din7 => dense_buf_7_q0,
        din8 => add_ln80_1_reg_535,
        dout => i_op_assign_1_fu_447_p10);

    flow_control_loop_pipe_sequential_init_U : component spmm_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln78_fu_362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_98 <= add_ln78_fu_368_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln80_1_reg_535 <= add_ln80_1_fu_414_p2;
                add_ln80_3_reg_545 <= add_ln80_3_fu_436_p2;
                lshr_ln80_3_reg_540 <= add_ln80_2_fu_420_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln80_3_reg_545_pp0_iter1_reg <= add_ln80_3_reg_545;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_op_assign_1_reg_549 <= i_op_assign_1_fu_447_p10;
                lshr_ln80_3_reg_540_pp0_iter1_reg <= lshr_ln80_3_reg_540;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln80_3_reg_545_pp0_iter2_reg <= add_ln80_3_reg_545_pp0_iter1_reg;
                add_ln80_3_reg_545_pp0_iter3_reg <= add_ln80_3_reg_545_pp0_iter2_reg;
                add_ln80_3_reg_545_pp0_iter4_reg <= add_ln80_3_reg_545_pp0_iter3_reg;
                add_ln80_3_reg_545_pp0_iter5_reg <= add_ln80_3_reg_545_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                lshr_ln80_3_reg_540_pp0_iter2_reg <= lshr_ln80_3_reg_540_pp0_iter1_reg;
                lshr_ln80_3_reg_540_pp0_iter3_reg <= lshr_ln80_3_reg_540_pp0_iter2_reg;
                lshr_ln80_3_reg_540_pp0_iter4_reg <= lshr_ln80_3_reg_540_pp0_iter3_reg;
                lshr_ln80_3_reg_540_pp0_iter5_reg <= lshr_ln80_3_reg_540_pp0_iter4_reg;
                mul_i_i1_reg_554 <= grp_fu_1241_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln78_fu_368_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv31_1));
    add_ln80_1_fu_414_p2 <= std_logic_vector(unsigned(trunc_ln80_fu_382_p1) + unsigned(add_ln80_8));
    add_ln80_2_fu_420_p2 <= std_logic_vector(unsigned(trunc_ln78_fu_374_p1) + unsigned(add_ln99_1));
    add_ln80_3_fu_436_p2 <= std_logic_vector(unsigned(trunc_ln80_fu_382_p1) + unsigned(add_ln80_9));
    add_ln80_fu_386_p2 <= std_logic_vector(unsigned(trunc_ln78_1_fu_378_p1) + unsigned(add_ln99));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln78_fu_362_p2)
    begin
        if (((icmp_ln78_fu_362_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_98, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_98;
        end if; 
    end process;

    dense_buf_0_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_0_ce0 <= ap_const_logic_1;
        else 
            dense_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_1_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_1_ce0 <= ap_const_logic_1;
        else 
            dense_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_2_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_2_ce0 <= ap_const_logic_1;
        else 
            dense_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_3_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_3_ce0 <= ap_const_logic_1;
        else 
            dense_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_4_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_4_ce0 <= ap_const_logic_1;
        else 
            dense_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_5_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_5_ce0 <= ap_const_logic_1;
        else 
            dense_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_6_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_6_ce0 <= ap_const_logic_1;
        else 
            dense_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_buf_7_address0 <= zext_ln80_fu_402_p1(17 - 1 downto 0);

    dense_buf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_buf_7_ce0 <= ap_const_logic_1;
        else 
            dense_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1241_p_ce <= ap_const_logic_1;
    grp_fu_1241_p_din0 <= conv_i_i;
    grp_fu_1241_p_din1 <= i_op_assign_1_reg_549;
    icmp_ln78_fu_362_p2 <= "1" when (signed(zext_ln78_fu_358_p1) < signed(len_1)) else "0";
    lshr_ln80_2_fu_392_p4 <= add_ln80_fu_386_p2(19 downto 3);
    out_buf_0_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_0_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_d0 <= mul_i_i1_reg_554;

    out_buf_0_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_0 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_0_we0 <= ap_const_logic_1;
        else 
            out_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_1_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_d0 <= mul_i_i1_reg_554;

    out_buf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_1 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_1_we0 <= ap_const_logic_1;
        else 
            out_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_2_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_d0 <= mul_i_i1_reg_554;

    out_buf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_2 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_2_we0 <= ap_const_logic_1;
        else 
            out_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_3_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_d0 <= mul_i_i1_reg_554;

    out_buf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_3 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_3_we0 <= ap_const_logic_1;
        else 
            out_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_4_ce0 <= ap_const_logic_1;
        else 
            out_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_d0 <= mul_i_i1_reg_554;

    out_buf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_4 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_4_we0 <= ap_const_logic_1;
        else 
            out_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_5_ce0 <= ap_const_logic_1;
        else 
            out_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_d0 <= mul_i_i1_reg_554;

    out_buf_5_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_5 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_5_we0 <= ap_const_logic_1;
        else 
            out_buf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_6_ce0 <= ap_const_logic_1;
        else 
            out_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_d0 <= mul_i_i1_reg_554;

    out_buf_6_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_6 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_6_we0 <= ap_const_logic_1;
        else 
            out_buf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_address0 <= zext_ln80_1_fu_468_p1(13 - 1 downto 0);

    out_buf_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_buf_7_ce0 <= ap_const_logic_1;
        else 
            out_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_d0 <= mul_i_i1_reg_554;

    out_buf_7_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln80_3_reg_545_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_7 = add_ln80_3_reg_545_pp0_iter5_reg))) then 
            out_buf_7_we0 <= ap_const_logic_1;
        else 
            out_buf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln78_1_fu_378_p1 <= ap_sig_allocacmp_i_1(20 - 1 downto 0);
    trunc_ln78_fu_374_p1 <= ap_sig_allocacmp_i_1(16 - 1 downto 0);
    trunc_ln80_fu_382_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    zext_ln78_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    zext_ln80_1_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln80_3_reg_540_pp0_iter5_reg),64));
    zext_ln80_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln80_2_fu_392_p4),64));
end behav;
