-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_64_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln64 : IN STD_LOGIC_VECTOR (61 downto 0);
    K : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_7_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_7_ce0 : OUT STD_LOGIC;
    dense_ptr_7_we0 : OUT STD_LOGIC;
    dense_ptr_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_6_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_6_ce0 : OUT STD_LOGIC;
    dense_ptr_6_we0 : OUT STD_LOGIC;
    dense_ptr_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_5_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_5_ce0 : OUT STD_LOGIC;
    dense_ptr_5_we0 : OUT STD_LOGIC;
    dense_ptr_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_4_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_4_ce0 : OUT STD_LOGIC;
    dense_ptr_4_we0 : OUT STD_LOGIC;
    dense_ptr_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_3_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_3_ce0 : OUT STD_LOGIC;
    dense_ptr_3_we0 : OUT STD_LOGIC;
    dense_ptr_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_2_ce0 : OUT STD_LOGIC;
    dense_ptr_2_we0 : OUT STD_LOGIC;
    dense_ptr_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_1_ce0 : OUT STD_LOGIC;
    dense_ptr_1_we0 : OUT STD_LOGIC;
    dense_ptr_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_ptr_0_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_ptr_0_ce0 : OUT STD_LOGIC;
    dense_ptr_0_we0 : OUT STD_LOGIC;
    dense_ptr_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln64_1 : IN STD_LOGIC_VECTOR (19 downto 0);
    trunc_ln8 : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_64_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln64_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln64_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lshr_ln_reg_322 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_reg_322_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_reg_322_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_reg_322_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_reg_322_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_reg_322_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln66_1_fu_278_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_reg_327 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_reg_327_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_reg_327_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_reg_327_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_reg_327_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_reg_327_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem1_addr_read_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln66_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_86 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln64_fu_248_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln64_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_fu_254_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln66_fu_262_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln66_fu_258_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_223_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_uitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    uitofp_32ns_32_4_no_dsp_1_U77 : component spmm_hls_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => gmem1_addr_read_reg_331,
        ce => grp_fu_223_ce,
        dout => grp_fu_223_p1);

    flow_control_loop_pipe_sequential_init_U : component spmm_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    j_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_242_p2 = ap_const_lv1_1))) then 
                    j_fu_86 <= add_ln64_fu_248_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_86 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_242_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln66_1_reg_327 <= add_ln66_1_fu_278_p2;
                lshr_ln_reg_322 <= add_ln66_fu_262_p2(19 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln66_1_reg_327_pp0_iter1_reg <= add_ln66_1_reg_327;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln64_reg_318 <= icmp_ln64_fu_242_p2;
                lshr_ln_reg_322_pp0_iter1_reg <= lshr_ln_reg_322;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln66_1_reg_327_pp0_iter2_reg <= add_ln66_1_reg_327_pp0_iter1_reg;
                add_ln66_1_reg_327_pp0_iter3_reg <= add_ln66_1_reg_327_pp0_iter2_reg;
                add_ln66_1_reg_327_pp0_iter4_reg <= add_ln66_1_reg_327_pp0_iter3_reg;
                add_ln66_1_reg_327_pp0_iter5_reg <= add_ln66_1_reg_327_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                conv_reg_336 <= grp_fu_223_p1;
                lshr_ln_reg_322_pp0_iter2_reg <= lshr_ln_reg_322_pp0_iter1_reg;
                lshr_ln_reg_322_pp0_iter3_reg <= lshr_ln_reg_322_pp0_iter2_reg;
                lshr_ln_reg_322_pp0_iter4_reg <= lshr_ln_reg_322_pp0_iter3_reg;
                lshr_ln_reg_322_pp0_iter5_reg <= lshr_ln_reg_322_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_318 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem1_addr_read_reg_331 <= m_axi_gmem1_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln64_fu_248_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv31_1));
    add_ln66_1_fu_278_p2 <= std_logic_vector(unsigned(trunc_ln66_fu_258_p1) + unsigned(trunc_ln8));
    add_ln66_fu_262_p2 <= std_logic_vector(unsigned(trunc_ln64_fu_254_p1) + unsigned(trunc_ln64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln64_reg_318)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln64_reg_318 = ap_const_lv1_1) and (m_axi_gmem1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln64_reg_318)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln64_reg_318 = ap_const_lv1_1) and (m_axi_gmem1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem1_RVALID, icmp_ln64_reg_318)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln64_reg_318 = ap_const_lv1_1) and (m_axi_gmem1_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln64_fu_242_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_242_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln64_reg_318, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln64_reg_318 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_86, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_86;
        end if; 
    end process;

    dense_ptr_0_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_0_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_0_d0 <= conv_reg_336;

    dense_ptr_0_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_0 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_0_we0 <= ap_const_logic_1;
        else 
            dense_ptr_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_1_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_1_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_1_d0 <= conv_reg_336;

    dense_ptr_1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_1 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_1_we0 <= ap_const_logic_1;
        else 
            dense_ptr_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_2_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_2_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_2_d0 <= conv_reg_336;

    dense_ptr_2_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_2 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_2_we0 <= ap_const_logic_1;
        else 
            dense_ptr_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_3_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_3_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_3_d0 <= conv_reg_336;

    dense_ptr_3_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_3 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_3_we0 <= ap_const_logic_1;
        else 
            dense_ptr_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_4_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_4_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_4_d0 <= conv_reg_336;

    dense_ptr_4_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_4 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_4_we0 <= ap_const_logic_1;
        else 
            dense_ptr_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_5_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_5_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_5_d0 <= conv_reg_336;

    dense_ptr_5_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_5 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_5_we0 <= ap_const_logic_1;
        else 
            dense_ptr_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_6_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_6_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_6_d0 <= conv_reg_336;

    dense_ptr_6_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_6 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_6_we0 <= ap_const_logic_1;
        else 
            dense_ptr_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_7_address0 <= zext_ln66_fu_295_p1(17 - 1 downto 0);

    dense_ptr_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_7_ce0 <= ap_const_logic_1;
        else 
            dense_ptr_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_ptr_7_d0 <= conv_reg_336;

    dense_ptr_7_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, add_ln66_1_reg_327_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_lv3_7 = add_ln66_1_reg_327_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_ptr_7_we0 <= ap_const_logic_1;
        else 
            dense_ptr_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln64_reg_318, ap_block_pp0_stage0)
    begin
        if (((icmp_ln64_reg_318 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_223_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_223_ce <= ap_const_logic_1;
        else 
            grp_fu_223_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln64_fu_242_p2 <= "1" when (signed(zext_ln64_fu_238_p1) < signed(K)) else "0";
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln64_reg_318, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_reg_318 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    trunc_ln64_fu_254_p1 <= ap_sig_allocacmp_j_1(20 - 1 downto 0);
    trunc_ln66_fu_258_p1 <= ap_sig_allocacmp_j_1(3 - 1 downto 0);
    zext_ln64_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),32));
    zext_ln66_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_322_pp0_iter5_reg),64));
end behav;
