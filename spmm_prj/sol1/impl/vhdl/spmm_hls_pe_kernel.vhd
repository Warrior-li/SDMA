-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_pe_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_0_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_0_ce0 : OUT STD_LOGIC;
    dense_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_1_ce0 : OUT STD_LOGIC;
    dense_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_2_ce0 : OUT STD_LOGIC;
    dense_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_3_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_3_ce0 : OUT STD_LOGIC;
    dense_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_4_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_4_ce0 : OUT STD_LOGIC;
    dense_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_5_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_5_ce0 : OUT STD_LOGIC;
    dense_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_6_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_6_ce0 : OUT STD_LOGIC;
    dense_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_7_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    dense_7_ce0 : OUT STD_LOGIC;
    dense_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_buf_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_0_ce0 : OUT STD_LOGIC;
    out_buf_0_we0 : OUT STD_LOGIC;
    out_buf_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_1_ce0 : OUT STD_LOGIC;
    out_buf_1_we0 : OUT STD_LOGIC;
    out_buf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_2_ce0 : OUT STD_LOGIC;
    out_buf_2_we0 : OUT STD_LOGIC;
    out_buf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_3_ce0 : OUT STD_LOGIC;
    out_buf_3_we0 : OUT STD_LOGIC;
    out_buf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_4_ce0 : OUT STD_LOGIC;
    out_buf_4_we0 : OUT STD_LOGIC;
    out_buf_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_5_ce0 : OUT STD_LOGIC;
    out_buf_5_we0 : OUT STD_LOGIC;
    out_buf_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_6_ce0 : OUT STD_LOGIC;
    out_buf_6_we0 : OUT STD_LOGIC;
    out_buf_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_buf_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_7_ce0 : OUT STD_LOGIC;
    out_buf_7_we0 : OUT STD_LOGIC;
    out_buf_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    idx : IN STD_LOGIC_VECTOR (19 downto 0);
    idx1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of spmm_hls_pe_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln81_fu_339_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_reg_498 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_fu_343_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln79_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln81_2_fu_404_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_2_reg_551 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln81_1_reg_556 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln81_1_reg_556_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln81_1_reg_556_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln81_1_reg_556_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln81_1_reg_556_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln81_1_reg_556_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln81_3_fu_424_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_3_reg_561 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_3_reg_561_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_3_reg_561_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_3_reg_561_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_3_reg_561_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_3_reg_561_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_op_assign_fu_434_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal zext_ln81_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln81_1_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_90 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln79_fu_359_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln79_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln79_1_fu_369_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln81_fu_377_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln_fu_382_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln81_2_fu_373_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln79_fu_365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln81_1_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_uitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U144 : component spmm_hls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_i_reg_493,
        din1 => i_op_assign_reg_565,
        ce => ap_const_logic_1,
        dout => grp_fu_326_p2);

    uitofp_32ns_32_4_no_dsp_1_U145 : component spmm_hls_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p1);

    mux_83_32_1_1_U146 : component spmm_hls_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => dense_0_q0,
        din1 => dense_1_q0,
        din2 => dense_2_q0,
        din3 => dense_3_q0,
        din4 => dense_4_q0,
        din5 => dense_5_q0,
        din6 => dense_6_q0,
        din7 => dense_7_q0,
        din8 => add_ln81_2_reg_551,
        dout => i_op_assign_fu_434_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_90 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_fu_90 <= add_ln79_fu_359_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln81_2_reg_551 <= add_ln81_2_fu_404_p2;
                add_ln81_3_reg_561 <= add_ln81_3_fu_424_p2;
                lshr_ln81_1_reg_556 <= add_ln81_1_fu_409_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln81_3_reg_561_pp0_iter1_reg <= add_ln81_3_reg_561;
                i_op_assign_reg_565 <= i_op_assign_fu_434_p10;
                lshr_ln81_1_reg_556_pp0_iter1_reg <= lshr_ln81_1_reg_556;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln81_3_reg_561_pp0_iter2_reg <= add_ln81_3_reg_561_pp0_iter1_reg;
                add_ln81_3_reg_561_pp0_iter3_reg <= add_ln81_3_reg_561_pp0_iter2_reg;
                add_ln81_3_reg_561_pp0_iter4_reg <= add_ln81_3_reg_561_pp0_iter3_reg;
                add_ln81_3_reg_561_pp0_iter5_reg <= add_ln81_3_reg_561_pp0_iter4_reg;
                lshr_ln81_1_reg_556_pp0_iter2_reg <= lshr_ln81_1_reg_556_pp0_iter1_reg;
                lshr_ln81_1_reg_556_pp0_iter3_reg <= lshr_ln81_1_reg_556_pp0_iter2_reg;
                lshr_ln81_1_reg_556_pp0_iter4_reg <= lshr_ln81_1_reg_556_pp0_iter3_reg;
                lshr_ln81_1_reg_556_pp0_iter5_reg <= lshr_ln81_1_reg_556_pp0_iter4_reg;
                mul_i_reg_570 <= grp_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv_i_reg_493 <= grp_fu_330_p1;
                trunc_ln81_1_reg_503 <= trunc_ln81_1_fu_343_p1;
                trunc_ln81_reg_498 <= trunc_ln81_fu_339_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln79_fu_354_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln79_fu_354_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln79_fu_354_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln79_fu_359_p2 <= std_logic_vector(unsigned(i_fu_90) + unsigned(ap_const_lv31_1));
    add_ln81_1_fu_409_p2 <= std_logic_vector(unsigned(trunc_ln79_fu_365_p1) + unsigned(idx1));
    add_ln81_2_fu_404_p2 <= std_logic_vector(unsigned(trunc_ln81_2_fu_373_p1) + unsigned(trunc_ln81_reg_498));
    add_ln81_3_fu_424_p2 <= std_logic_vector(unsigned(trunc_ln81_2_fu_373_p1) + unsigned(trunc_ln81_1_reg_503));
    add_ln81_fu_377_p2 <= std_logic_vector(unsigned(trunc_ln79_1_fu_369_p1) + unsigned(idx));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln79_fu_354_p2)
    begin
        if ((icmp_ln79_fu_354_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dense_0_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_0_ce0 <= ap_const_logic_1;
        else 
            dense_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_ce0 <= ap_const_logic_1;
        else 
            dense_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_2_ce0 <= ap_const_logic_1;
        else 
            dense_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_3_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_3_ce0 <= ap_const_logic_1;
        else 
            dense_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_4_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_4_ce0 <= ap_const_logic_1;
        else 
            dense_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_5_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_5_ce0 <= ap_const_logic_1;
        else 
            dense_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_6_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_6_ce0 <= ap_const_logic_1;
        else 
            dense_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_7_address0 <= zext_ln81_fu_392_p1(17 - 1 downto 0);

    dense_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_7_ce0 <= ap_const_logic_1;
        else 
            dense_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln79_fu_354_p2 <= "1" when (signed(zext_ln79_fu_350_p1) < signed(len)) else "0";
    lshr_ln_fu_382_p4 <= add_ln81_fu_377_p2(19 downto 3);
    out_buf_0_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_0_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_d0 <= mul_i_reg_570;

    out_buf_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_0 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_0_we0 <= ap_const_logic_1;
        else 
            out_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_1_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_d0 <= mul_i_reg_570;

    out_buf_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_1 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_1_we0 <= ap_const_logic_1;
        else 
            out_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_2_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_d0 <= mul_i_reg_570;

    out_buf_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_2 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_2_we0 <= ap_const_logic_1;
        else 
            out_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_3_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_d0 <= mul_i_reg_570;

    out_buf_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_3 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_3_we0 <= ap_const_logic_1;
        else 
            out_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_4_ce0 <= ap_const_logic_1;
        else 
            out_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_d0 <= mul_i_reg_570;

    out_buf_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_4 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_4_we0 <= ap_const_logic_1;
        else 
            out_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_5_ce0 <= ap_const_logic_1;
        else 
            out_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_d0 <= mul_i_reg_570;

    out_buf_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_5 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_5_we0 <= ap_const_logic_1;
        else 
            out_buf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_6_ce0 <= ap_const_logic_1;
        else 
            out_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_d0 <= mul_i_reg_570;

    out_buf_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_6 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_6_we0 <= ap_const_logic_1;
        else 
            out_buf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_address0 <= zext_ln81_1_fu_455_p1(13 - 1 downto 0);

    out_buf_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_7_ce0 <= ap_const_logic_1;
        else 
            out_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_d0 <= mul_i_reg_570;

    out_buf_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, add_ln81_3_reg_561_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_lv3_7 = add_ln81_3_reg_561_pp0_iter5_reg) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_buf_7_we0 <= ap_const_logic_1;
        else 
            out_buf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln79_1_fu_369_p1 <= i_fu_90(20 - 1 downto 0);
    trunc_ln79_fu_365_p1 <= i_fu_90(16 - 1 downto 0);
    trunc_ln81_1_fu_343_p1 <= idx1(3 - 1 downto 0);
    trunc_ln81_2_fu_373_p1 <= i_fu_90(3 - 1 downto 0);
    trunc_ln81_fu_339_p1 <= idx(3 - 1 downto 0);
    zext_ln79_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_90),32));
    zext_ln81_1_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln81_1_reg_556_pp0_iter5_reg),64));
    zext_ln81_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_382_p4),64));
end behav;
