-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_pu_kernel_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_34_dout : IN STD_LOGIC_VECTOR (387 downto 0);
    s_34_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    s_34_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    s_34_empty_n : IN STD_LOGIC;
    s_34_read : OUT STD_LOGIC;
    m_axi_gmem6_AWVALID : OUT STD_LOGIC;
    m_axi_gmem6_AWREADY : IN STD_LOGIC;
    m_axi_gmem6_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem6_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_WVALID : OUT STD_LOGIC;
    m_axi_gmem6_WREADY : IN STD_LOGIC;
    m_axi_gmem6_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem6_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_WLAST : OUT STD_LOGIC;
    m_axi_gmem6_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_ARVALID : OUT STD_LOGIC;
    m_axi_gmem6_ARREADY : IN STD_LOGIC;
    m_axi_gmem6_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem6_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_RVALID : IN STD_LOGIC;
    m_axi_gmem6_RREADY : OUT STD_LOGIC;
    m_axi_gmem6_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem6_RLAST : IN STD_LOGIC;
    m_axi_gmem6_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem6_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_BVALID : IN STD_LOGIC;
    m_axi_gmem6_BREADY : OUT STD_LOGIC;
    m_axi_gmem6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem6_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    B4 : IN STD_LOGIC_VECTOR (63 downto 0);
    K : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of spmm_hls_pu_kernel_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_181 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000001";
    constant ap_const_lv32_182 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000010";
    constant ap_const_lv32_183 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_34_blk_n : STD_LOGIC;
    signal gmem6_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal gmem6_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln151_3_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln151_4_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln_fu_371_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_492 : STD_LOGIC_VECTOR (29 downto 0);
    signal K_cast10_i_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_cast10_i_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln111_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln111_reg_506 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln111_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_reg_511 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln111_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tile_ref_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tile_ref_load_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tile_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tile_y_load_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_i_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gmem6_addr_reg_540 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln114_3_fu_450_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln114_3_reg_549 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tile_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tile_y_ce0 : STD_LOGIC;
    signal tile_y_we0 : STD_LOGIC;
    signal tile_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tile_ref_ce0 : STD_LOGIC;
    signal tile_ref_we0 : STD_LOGIC;
    signal p_v_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_y_ce0 : STD_LOGIC;
    signal p_v_y_we0 : STD_LOGIC;
    signal p_v_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_y_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_y_ce1 : STD_LOGIC;
    signal p_v_y_we1 : STD_LOGIC;
    signal p_v_y_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ref_ce0 : STD_LOGIC;
    signal p_ref_we0 : STD_LOGIC;
    signal p_ref_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ref_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ref_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ref_ce1 : STD_LOGIC;
    signal p_ref_we1 : STD_LOGIC;
    signal p_ref_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_done : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_idle : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_ready : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_ce0 : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_ce0 : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_we0 : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_ce0 : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_ce0 : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_we0 : STD_LOGIC;
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_271 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln114_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln114_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_405_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln_fu_409_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln114_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_fu_420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_425_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_pu_kernel_10_Pipeline_pu_save_stream_into_pu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_v_y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_v_y_ce0 : OUT STD_LOGIC;
        p_v_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tile_y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tile_y_ce0 : OUT STD_LOGIC;
        tile_y_we0 : OUT STD_LOGIC;
        tile_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_ref_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_ref_ce0 : OUT STD_LOGIC;
        p_ref_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        tile_ref_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tile_ref_ce0 : OUT STD_LOGIC;
        tile_ref_we0 : OUT STD_LOGIC;
        tile_ref_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component spmm_hls_mul_32s_30ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel_tile_y_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel_tile_ref_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component spmm_hls_pu_kernel_p_v_y_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel_p_ref_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    tile_y_U : component spmm_hls_pu_kernel_tile_y_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tile_y_address0,
        ce0 => tile_y_ce0,
        we0 => tile_y_we0,
        d0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_d0,
        q0 => tile_y_q0);

    tile_ref_U : component spmm_hls_pu_kernel_tile_ref_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tile_ref_address0,
        ce0 => tile_ref_ce0,
        we0 => tile_ref_we0,
        d0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_d0,
        q0 => tile_ref_q0);

    p_v_y_U : component spmm_hls_pu_kernel_p_v_y_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_v_y_address0,
        ce0 => p_v_y_ce0,
        we0 => p_v_y_we0,
        d0 => p_v_y_d0,
        q0 => p_v_y_q0,
        address1 => p_v_y_address1,
        ce1 => p_v_y_ce1,
        we1 => p_v_y_we1,
        d1 => p_v_y_d1);

    p_ref_U : component spmm_hls_pu_kernel_p_ref_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ref_address0,
        ce0 => p_ref_ce0,
        we0 => p_ref_we0,
        d0 => p_ref_d0,
        q0 => p_ref_q0,
        address1 => p_ref_address1,
        ce1 => p_ref_ce1,
        we1 => p_ref_we1,
        d1 => p_ref_d1);

    grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282 : component spmm_hls_pu_kernel_10_Pipeline_pu_save_stream_into_pu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start,
        ap_done => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_done,
        ap_idle => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_idle,
        ap_ready => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_ready,
        p_v_y_address0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_address0,
        p_v_y_ce0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_ce0,
        p_v_y_q0 => p_v_y_q0,
        tile_y_address0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_address0,
        tile_y_ce0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_ce0,
        tile_y_we0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_we0,
        tile_y_d0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_d0,
        p_ref_address0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_address0,
        p_ref_ce0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_ce0,
        p_ref_q0 => p_ref_q0,
        tile_ref_address0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_address0,
        tile_ref_ce0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_ce0,
        tile_ref_we0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_we0,
        tile_ref_d0 => grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_d0);

    mul_32s_30ns_32_2_1_U66 : component spmm_hls_mul_32s_30ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 30,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tile_y_load_reg_530,
        din1 => grp_fu_405_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_405_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_388_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_ready = ap_const_logic_1)) then 
                    grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_112 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln114_fu_445_p2 = ap_const_lv1_1) or (tile_ref_load_reg_521 = ap_const_lv1_1)))) then 
                i_fu_112 <= add_ln111_reg_506;
            end if; 
        end if;
    end process;

    j_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_reg_271 <= ap_const_lv30_0;
            elsif (((m_axi_gmem6_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_reg_271 <= add_ln114_3_reg_549;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    K_cast10_i_reg_497(29 downto 0) <= K_cast10_i_fu_381_p1(29 downto 0);
                trunc_ln_reg_492 <= K(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln111_reg_506 <= add_ln111_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tile_ref_load_reg_521 = ap_const_lv1_0))) then
                add_ln114_3_reg_549 <= add_ln114_3_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                gmem6_addr_reg_540 <= sext_ln114_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_i_i_reg_535 <= grp_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tile_ref_load_reg_521 <= tile_ref_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tile_y_load_reg_530 <= tile_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_8_reg_477 <= s_34_dout(386 downto 386);
                tmp_9_reg_482 <= s_34_dout(387 downto 387);
                trunc_ln151_3_reg_467 <= s_34_dout(287 downto 256);
                trunc_ln151_4_reg_472 <= s_34_dout(383 downto 352);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_388_p2 = ap_const_lv1_0))) then
                    zext_ln111_reg_511(2 downto 0) <= zext_ln111_fu_400_p1(2 downto 0);
            end if;
        end if;
    end process;
    K_cast10_i_reg_497(31 downto 30) <= "00";
    zext_ln111_reg_511(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, s_34_empty_n, m_axi_gmem6_ARREADY, m_axi_gmem6_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln111_fu_388_p2, tile_ref_q0, tile_ref_load_reg_521, ap_CS_fsm_state6, ap_CS_fsm_state18, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_done, icmp_ln114_fu_445_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_388_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tile_ref_q0 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((m_axi_gmem6_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln114_fu_445_p2 = ap_const_lv1_1) or (tile_ref_load_reg_521 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((m_axi_gmem6_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    K_cast10_i_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_371_p4),32));
    add_ln111_fu_394_p2 <= std_logic_vector(unsigned(i_fu_112) + unsigned(ap_const_lv3_1));
    add_ln114_3_fu_450_p2 <= std_logic_vector(unsigned(j_reg_271) + unsigned(ap_const_lv30_1));
    add_ln114_fu_420_p2 <= std_logic_vector(unsigned(zext_ln114_fu_416_p1) + unsigned(B4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_gmem6_ARREADY)
    begin
        if ((m_axi_gmem6_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_gmem6_RVALID)
    begin
        if ((m_axi_gmem6_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, s_34_empty_n)
    begin
        if (((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_done)
    begin
        if ((grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, s_34_empty_n)
    begin
                ap_block_state1 <= ((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln111_fu_388_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_388_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln111_fu_388_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_388_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem6_blk_n_AR_assign_proc : process(m_axi_gmem6_ARREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gmem6_blk_n_AR <= m_axi_gmem6_ARREADY;
        else 
            gmem6_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem6_blk_n_R_assign_proc : process(m_axi_gmem6_RVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gmem6_blk_n_R <= m_axi_gmem6_RVALID;
        else 
            gmem6_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_405_p1 <= K_cast10_i_reg_497(30 - 1 downto 0);
    grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_ap_start_reg;
    icmp_ln111_fu_388_p2 <= "1" when (i_fu_112 = ap_const_lv3_4) else "0";
    icmp_ln114_fu_445_p2 <= "1" when (j_reg_271 = trunc_ln_reg_492) else "0";
    m_axi_gmem6_ARADDR <= gmem6_addr_reg_540;
    m_axi_gmem6_ARBURST <= ap_const_lv2_0;
    m_axi_gmem6_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem6_ARID <= ap_const_lv1_0;
    m_axi_gmem6_ARLEN <= K_cast10_i_reg_497;
    m_axi_gmem6_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem6_ARPROT <= ap_const_lv3_0;
    m_axi_gmem6_ARQOS <= ap_const_lv4_0;
    m_axi_gmem6_ARREGION <= ap_const_lv4_0;
    m_axi_gmem6_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem6_ARUSER <= ap_const_lv1_0;

    m_axi_gmem6_ARVALID_assign_proc : process(m_axi_gmem6_ARREADY, ap_CS_fsm_state11)
    begin
        if (((m_axi_gmem6_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem6_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem6_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem6_AWADDR <= ap_const_lv64_0;
    m_axi_gmem6_AWBURST <= ap_const_lv2_0;
    m_axi_gmem6_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem6_AWID <= ap_const_lv1_0;
    m_axi_gmem6_AWLEN <= ap_const_lv32_0;
    m_axi_gmem6_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem6_AWPROT <= ap_const_lv3_0;
    m_axi_gmem6_AWQOS <= ap_const_lv4_0;
    m_axi_gmem6_AWREGION <= ap_const_lv4_0;
    m_axi_gmem6_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem6_AWUSER <= ap_const_lv1_0;
    m_axi_gmem6_AWVALID <= ap_const_logic_0;
    m_axi_gmem6_BREADY <= ap_const_logic_0;

    m_axi_gmem6_RREADY_assign_proc : process(m_axi_gmem6_RVALID, ap_CS_fsm_state19)
    begin
        if (((m_axi_gmem6_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            m_axi_gmem6_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem6_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem6_WDATA <= ap_const_lv32_0;
    m_axi_gmem6_WID <= ap_const_lv1_0;
    m_axi_gmem6_WLAST <= ap_const_logic_0;
    m_axi_gmem6_WSTRB <= ap_const_lv4_0;
    m_axi_gmem6_WUSER <= ap_const_lv1_0;
    m_axi_gmem6_WVALID <= ap_const_logic_0;

    p_ref_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_ref_address0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_address0;
        else 
            p_ref_address0 <= "XX";
        end if; 
    end process;


    p_ref_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            p_ref_address1 <= "XX";
        end if; 
    end process;


    p_ref_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state4, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_ref_ce0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_ref_ce0;
        else 
            p_ref_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ref_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_ce1 <= ap_const_logic_1;
        else 
            p_ref_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ref_d0_assign_proc : process(ap_CS_fsm_state1, s_34_dout, tmp_9_reg_482, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_d0 <= tmp_9_reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_d0 <= s_34_dout(385 downto 385);
        else 
            p_ref_d0 <= "X";
        end if; 
    end process;


    p_ref_d1_assign_proc : process(ap_CS_fsm_state1, s_34_dout, tmp_8_reg_477, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_d1 <= tmp_8_reg_477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_d1 <= s_34_dout(384 downto 384);
        else 
            p_ref_d1 <= "X";
        end if; 
    end process;


    p_ref_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_we0 <= ap_const_logic_1;
        else 
            p_ref_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ref_we1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_we1 <= ap_const_logic_1;
        else 
            p_ref_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_v_y_address0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_address0;
        else 
            p_v_y_address0 <= "XX";
        end if; 
    end process;


    p_v_y_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            p_v_y_address1 <= "XX";
        end if; 
    end process;


    p_v_y_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state4, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_v_y_ce0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_p_v_y_ce0;
        else 
            p_v_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_ce1 <= ap_const_logic_1;
        else 
            p_v_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_d0_assign_proc : process(ap_CS_fsm_state1, s_34_dout, trunc_ln151_4_reg_472, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_d0 <= trunc_ln151_4_reg_472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_d0 <= s_34_dout(191 downto 160);
        else 
            p_v_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_v_y_d1_assign_proc : process(ap_CS_fsm_state1, s_34_dout, trunc_ln151_3_reg_467, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_d1 <= trunc_ln151_3_reg_467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_d1 <= s_34_dout(95 downto 64);
        else 
            p_v_y_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_v_y_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_we0 <= ap_const_logic_1;
        else 
            p_v_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_we1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_we1 <= ap_const_logic_1;
        else 
            p_v_y_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_34_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_34_blk_n <= s_34_empty_n;
        else 
            s_34_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_34_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_34_empty_n)
    begin
        if ((not(((s_34_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_34_read <= ap_const_logic_1;
        else 
            s_34_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln114_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_425_p4),64));

    shl_ln_fu_409_p3 <= (mul_i_i_reg_535 & ap_const_lv2_0);

    tile_ref_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln111_fu_400_p1, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tile_ref_address0 <= zext_ln111_fu_400_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_ref_address0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_address0;
        else 
            tile_ref_address0 <= "XX";
        end if; 
    end process;


    tile_ref_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tile_ref_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_ref_ce0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_ce0;
        else 
            tile_ref_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tile_ref_we0_assign_proc : process(ap_CS_fsm_state4, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_ref_we0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_ref_we0;
        else 
            tile_ref_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tile_y_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln111_reg_511, ap_CS_fsm_state6, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tile_y_address0 <= zext_ln111_reg_511(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_y_address0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_address0;
        else 
            tile_y_address0 <= "XX";
        end if; 
    end process;


    tile_y_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tile_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_y_ce0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_ce0;
        else 
            tile_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tile_y_we0_assign_proc : process(ap_CS_fsm_state4, grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_y_we0 <= grp_pu_kernel_10_Pipeline_pu_save_stream_into_pu_fu_282_tile_y_we0;
        else 
            tile_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln7_fu_425_p4 <= add_ln114_fu_420_p2(63 downto 2);
    trunc_ln_fu_371_p4 <= K(31 downto 2);
    zext_ln111_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_112),64));
    zext_ln114_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_409_p3),64));
end behav;
