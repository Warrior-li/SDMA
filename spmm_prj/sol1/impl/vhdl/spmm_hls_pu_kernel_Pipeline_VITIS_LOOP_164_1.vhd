-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_pu_kernel_Pipeline_VITIS_LOOP_164_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tile_value_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    tile_value_ce0 : OUT STD_LOGIC;
    tile_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tile_y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    tile_y_ce0 : OUT STD_LOGIC;
    tile_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Dbuf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Dbuf_ce0 : OUT STD_LOGIC;
    Dbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of spmm_hls_pu_kernel_Pipeline_VITIS_LOOP_164_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln164_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tile_value_load_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_46_fu_132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_46_reg_167 : STD_LOGIC_VECTOR (15 downto 0);
    signal resA_ce0 : STD_LOGIC;
    signal resA_we0 : STD_LOGIC;
    signal resB_ce0 : STD_LOGIC;
    signal resB_we0 : STD_LOGIC;
    signal grp_pu_comp_fu_90_ap_start : STD_LOGIC;
    signal grp_pu_comp_fu_90_ap_done : STD_LOGIC;
    signal grp_pu_comp_fu_90_ap_idle : STD_LOGIC;
    signal grp_pu_comp_fu_90_ap_ready : STD_LOGIC;
    signal grp_pu_comp_fu_90_res_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pu_comp_fu_90_res_ce0 : STD_LOGIC;
    signal grp_pu_comp_fu_90_res_we0 : STD_LOGIC;
    signal grp_pu_comp_fu_90_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pu_comp_fu_90_Dbuf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pu_comp_fu_90_Dbuf_ce0 : STD_LOGIC;
    signal grp_pu_comp_fu_90_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_5_cast_i_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_46 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln164_fu_121_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_pu_comp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_value : IN STD_LOGIC_VECTOR (31 downto 0);
        a_y : IN STD_LOGIC_VECTOR (15 downto 0);
        Dbuf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        Dbuf_ce0 : OUT STD_LOGIC;
        Dbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        K : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component spmm_hls_pu_kernel_Pipeline_VITIS_LOOP_164_1_resA_RAM_AUTO_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    resA_U : component spmm_hls_pu_kernel_Pipeline_VITIS_LOOP_164_1_resA_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 61278,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_pu_comp_fu_90_res_address0,
        ce0 => resA_ce0,
        we0 => resA_we0,
        d0 => grp_pu_comp_fu_90_res_d0);

    resB_U : component spmm_hls_pu_kernel_Pipeline_VITIS_LOOP_164_1_resA_RAM_AUTO_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 61278,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_pu_comp_fu_90_res_address0,
        ce0 => resB_ce0,
        we0 => resB_we0,
        d0 => grp_pu_comp_fu_90_res_d0);

    grp_pu_comp_fu_90 : component spmm_hls_pu_comp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pu_comp_fu_90_ap_start,
        ap_done => grp_pu_comp_fu_90_ap_done,
        ap_idle => grp_pu_comp_fu_90_ap_idle,
        ap_ready => grp_pu_comp_fu_90_ap_ready,
        res_address0 => grp_pu_comp_fu_90_res_address0,
        res_ce0 => grp_pu_comp_fu_90_res_ce0,
        res_we0 => grp_pu_comp_fu_90_res_we0,
        res_d0 => grp_pu_comp_fu_90_res_d0,
        a_value => tile_value_load_reg_162,
        a_y => empty_46_reg_167,
        Dbuf_address0 => grp_pu_comp_fu_90_Dbuf_address0,
        Dbuf_ce0 => grp_pu_comp_fu_90_Dbuf_ce0,
        Dbuf_q0 => Dbuf_q0,
        K => trunc_ln);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pu_comp_fu_90_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pu_comp_fu_90_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_pu_comp_fu_90_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pu_comp_fu_90_ap_ready = ap_const_logic_1)) then 
                    grp_pu_comp_fu_90_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_46 <= ap_const_lv2_1;
            elsif (((icmp_ln164_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_46 <= add_ln164_fu_121_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_46_reg_167 <= empty_46_fu_132_p1;
                tile_value_load_reg_162 <= tile_value_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln164_fu_109_p2, grp_pu_comp_fu_90_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln164_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pu_comp_fu_90_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_pu_comp_fu_90_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Dbuf_address0 <= grp_pu_comp_fu_90_Dbuf_address0;

    Dbuf_ce0_assign_proc : process(grp_pu_comp_fu_90_Dbuf_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Dbuf_ce0 <= grp_pu_comp_fu_90_Dbuf_ce0;
        else 
            Dbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln164_fu_121_p2 <= std_logic_vector(unsigned(i_fu_46) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pu_comp_fu_90_ap_done)
    begin
        if ((grp_pu_comp_fu_90_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_pu_comp_fu_90_ap_done)
    begin
        if ((grp_pu_comp_fu_90_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln164_fu_109_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln164_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln164_fu_109_p2)
    begin
        if (((icmp_ln164_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_46_fu_132_p1 <= tile_y_q0(16 - 1 downto 0);
    grp_pu_comp_fu_90_ap_start <= grp_pu_comp_fu_90_ap_start_reg;
    i_5_cast_i_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_46),64));
    icmp_ln164_fu_109_p2 <= "1" when (i_fu_46 = ap_const_lv2_3) else "0";

    resA_ce0_assign_proc : process(grp_pu_comp_fu_90_res_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            resA_ce0 <= grp_pu_comp_fu_90_res_ce0;
        else 
            resA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resA_we0_assign_proc : process(grp_pu_comp_fu_90_res_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            resA_we0 <= grp_pu_comp_fu_90_res_we0;
        else 
            resA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    resB_ce0_assign_proc : process(grp_pu_comp_fu_90_res_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            resB_ce0 <= grp_pu_comp_fu_90_res_ce0;
        else 
            resB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resB_we0_assign_proc : process(grp_pu_comp_fu_90_res_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            resB_we0 <= grp_pu_comp_fu_90_res_we0;
        else 
            resB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tile_value_address0 <= i_5_cast_i_fu_115_p1(2 - 1 downto 0);

    tile_value_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tile_value_ce0 <= ap_const_logic_1;
        else 
            tile_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tile_y_address0 <= i_5_cast_i_fu_115_p1(2 - 1 downto 0);

    tile_y_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tile_y_ce0 <= ap_const_logic_1;
        else 
            tile_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
