-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_dataflow_in_loop_row_loop is
port (
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    col_idx : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    a_val : IN STD_LOGIC_VECTOR (63 downto 0);
    i : IN STD_LOGIC_VECTOR (31 downto 0);
    nnz : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    col_idx_ap_vld : IN STD_LOGIC;
    a_val_ap_vld : IN STD_LOGIC;
    i_ap_vld : IN STD_LOGIC;
    nnz_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of spmm_hls_dataflow_in_loop_row_loop is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal set_tile_broadcast_U0_ap_start : STD_LOGIC;
    signal set_tile_broadcast_U0_start_full_n : STD_LOGIC;
    signal set_tile_broadcast_U0_ap_done : STD_LOGIC;
    signal set_tile_broadcast_U0_ap_continue : STD_LOGIC;
    signal set_tile_broadcast_U0_ap_idle : STD_LOGIC;
    signal set_tile_broadcast_U0_ap_ready : STD_LOGIC;
    signal set_tile_broadcast_U0_start_out : STD_LOGIC;
    signal set_tile_broadcast_U0_start_write : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_tile_broadcast_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal set_tile_broadcast_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal set_tile_broadcast_U0_s_0_din : STD_LOGIC_VECTOR (387 downto 0);
    signal set_tile_broadcast_U0_s_0_write : STD_LOGIC;
    signal set_tile_broadcast_U0_s_1_din : STD_LOGIC_VECTOR (387 downto 0);
    signal set_tile_broadcast_U0_s_1_write : STD_LOGIC;
    signal set_tile_broadcast_U0_s_2_din : STD_LOGIC_VECTOR (387 downto 0);
    signal set_tile_broadcast_U0_s_2_write : STD_LOGIC;
    signal set_tile_broadcast_U0_s_3_din : STD_LOGIC_VECTOR (387 downto 0);
    signal set_tile_broadcast_U0_s_3_write : STD_LOGIC;
    signal pu_kernel_U0_ap_start : STD_LOGIC;
    signal pu_kernel_U0_ap_done : STD_LOGIC;
    signal pu_kernel_U0_ap_continue : STD_LOGIC;
    signal pu_kernel_U0_ap_idle : STD_LOGIC;
    signal pu_kernel_U0_ap_ready : STD_LOGIC;
    signal pu_kernel_U0_s_0_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal pu_kernel_1_U0_ap_start : STD_LOGIC;
    signal pu_kernel_1_U0_ap_done : STD_LOGIC;
    signal pu_kernel_1_U0_ap_continue : STD_LOGIC;
    signal pu_kernel_1_U0_ap_idle : STD_LOGIC;
    signal pu_kernel_1_U0_ap_ready : STD_LOGIC;
    signal pu_kernel_1_U0_s_1_read : STD_LOGIC;
    signal pu_kernel_2_U0_ap_start : STD_LOGIC;
    signal pu_kernel_2_U0_ap_done : STD_LOGIC;
    signal pu_kernel_2_U0_ap_continue : STD_LOGIC;
    signal pu_kernel_2_U0_ap_idle : STD_LOGIC;
    signal pu_kernel_2_U0_ap_ready : STD_LOGIC;
    signal pu_kernel_2_U0_s_2_read : STD_LOGIC;
    signal pu_kernel_3_U0_ap_start : STD_LOGIC;
    signal pu_kernel_3_U0_ap_done : STD_LOGIC;
    signal pu_kernel_3_U0_ap_continue : STD_LOGIC;
    signal pu_kernel_3_U0_ap_idle : STD_LOGIC;
    signal pu_kernel_3_U0_ap_ready : STD_LOGIC;
    signal pu_kernel_3_U0_s_3_read : STD_LOGIC;
    signal s_01_full_n : STD_LOGIC;
    signal s_01_dout : STD_LOGIC_VECTOR (387 downto 0);
    signal s_01_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal s_01_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal s_01_empty_n : STD_LOGIC;
    signal s_12_full_n : STD_LOGIC;
    signal s_12_dout : STD_LOGIC_VECTOR (387 downto 0);
    signal s_12_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal s_12_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal s_12_empty_n : STD_LOGIC;
    signal s_23_full_n : STD_LOGIC;
    signal s_23_dout : STD_LOGIC_VECTOR (387 downto 0);
    signal s_23_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal s_23_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal s_23_empty_n : STD_LOGIC;
    signal s_34_full_n : STD_LOGIC;
    signal s_34_dout : STD_LOGIC_VECTOR (387 downto 0);
    signal s_34_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal s_34_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal s_34_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal start_for_pu_kernel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_U0_full_n : STD_LOGIC;
    signal start_for_pu_kernel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_U0_empty_n : STD_LOGIC;
    signal start_for_pu_kernel_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_1_U0_full_n : STD_LOGIC;
    signal start_for_pu_kernel_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_1_U0_empty_n : STD_LOGIC;
    signal start_for_pu_kernel_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_2_U0_full_n : STD_LOGIC;
    signal start_for_pu_kernel_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_2_U0_empty_n : STD_LOGIC;
    signal start_for_pu_kernel_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_3_U0_full_n : STD_LOGIC;
    signal start_for_pu_kernel_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pu_kernel_3_U0_empty_n : STD_LOGIC;

    component spmm_hls_set_tile_broadcast IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        col_idx : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        a_val : IN STD_LOGIC_VECTOR (63 downto 0);
        s_0_din : OUT STD_LOGIC_VECTOR (387 downto 0);
        s_0_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_0_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_0_full_n : IN STD_LOGIC;
        s_0_write : OUT STD_LOGIC;
        s_1_din : OUT STD_LOGIC_VECTOR (387 downto 0);
        s_1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_1_full_n : IN STD_LOGIC;
        s_1_write : OUT STD_LOGIC;
        s_2_din : OUT STD_LOGIC_VECTOR (387 downto 0);
        s_2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_2_full_n : IN STD_LOGIC;
        s_2_write : OUT STD_LOGIC;
        s_3_din : OUT STD_LOGIC_VECTOR (387 downto 0);
        s_3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_3_full_n : IN STD_LOGIC;
        s_3_write : OUT STD_LOGIC;
        pointer : IN STD_LOGIC_VECTOR (31 downto 0);
        nnz : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_0_dout : IN STD_LOGIC_VECTOR (387 downto 0);
        s_0_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_0_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_0_empty_n : IN STD_LOGIC;
        s_0_read : OUT STD_LOGIC );
    end component;


    component spmm_hls_pu_kernel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_1_dout : IN STD_LOGIC_VECTOR (387 downto 0);
        s_1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_1_empty_n : IN STD_LOGIC;
        s_1_read : OUT STD_LOGIC );
    end component;


    component spmm_hls_pu_kernel_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_2_dout : IN STD_LOGIC_VECTOR (387 downto 0);
        s_2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_2_empty_n : IN STD_LOGIC;
        s_2_read : OUT STD_LOGIC );
    end component;


    component spmm_hls_pu_kernel_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_3_dout : IN STD_LOGIC_VECTOR (387 downto 0);
        s_3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        s_3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        s_3_empty_n : IN STD_LOGIC;
        s_3_read : OUT STD_LOGIC );
    end component;


    component spmm_hls_fifo_w388_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (387 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (387 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmm_hls_start_for_pu_kernel_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmm_hls_start_for_pu_kernel_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmm_hls_start_for_pu_kernel_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component spmm_hls_start_for_pu_kernel_3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    set_tile_broadcast_U0 : component spmm_hls_set_tile_broadcast
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => set_tile_broadcast_U0_ap_start,
        start_full_n => set_tile_broadcast_U0_start_full_n,
        ap_done => set_tile_broadcast_U0_ap_done,
        ap_continue => set_tile_broadcast_U0_ap_continue,
        ap_idle => set_tile_broadcast_U0_ap_idle,
        ap_ready => set_tile_broadcast_U0_ap_ready,
        start_out => set_tile_broadcast_U0_start_out,
        start_write => set_tile_broadcast_U0_start_write,
        m_axi_gmem1_AWVALID => set_tile_broadcast_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => set_tile_broadcast_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => set_tile_broadcast_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => set_tile_broadcast_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => set_tile_broadcast_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => set_tile_broadcast_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => set_tile_broadcast_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => set_tile_broadcast_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => set_tile_broadcast_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => set_tile_broadcast_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => set_tile_broadcast_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => set_tile_broadcast_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => set_tile_broadcast_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => set_tile_broadcast_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => set_tile_broadcast_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => set_tile_broadcast_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => set_tile_broadcast_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => set_tile_broadcast_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => set_tile_broadcast_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => set_tile_broadcast_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => set_tile_broadcast_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => set_tile_broadcast_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => set_tile_broadcast_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => set_tile_broadcast_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => set_tile_broadcast_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => set_tile_broadcast_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => set_tile_broadcast_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => set_tile_broadcast_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => set_tile_broadcast_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => set_tile_broadcast_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => set_tile_broadcast_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM => m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => set_tile_broadcast_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        col_idx => col_idx,
        m_axi_gmem2_AWVALID => set_tile_broadcast_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => ap_const_logic_0,
        m_axi_gmem2_AWADDR => set_tile_broadcast_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => set_tile_broadcast_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => set_tile_broadcast_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => set_tile_broadcast_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => set_tile_broadcast_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => set_tile_broadcast_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => set_tile_broadcast_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => set_tile_broadcast_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => set_tile_broadcast_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => set_tile_broadcast_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => set_tile_broadcast_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => set_tile_broadcast_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => ap_const_logic_0,
        m_axi_gmem2_WDATA => set_tile_broadcast_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => set_tile_broadcast_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => set_tile_broadcast_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => set_tile_broadcast_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => set_tile_broadcast_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => set_tile_broadcast_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR => set_tile_broadcast_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => set_tile_broadcast_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => set_tile_broadcast_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => set_tile_broadcast_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => set_tile_broadcast_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => set_tile_broadcast_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => set_tile_broadcast_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => set_tile_broadcast_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => set_tile_broadcast_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => set_tile_broadcast_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => set_tile_broadcast_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY => set_tile_broadcast_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST => m_axi_gmem2_RLAST,
        m_axi_gmem2_RID => m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM => m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER => m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP => m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID => ap_const_logic_0,
        m_axi_gmem2_BREADY => set_tile_broadcast_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        a_val => a_val,
        s_0_din => set_tile_broadcast_U0_s_0_din,
        s_0_num_data_valid => s_01_num_data_valid,
        s_0_fifo_cap => s_01_fifo_cap,
        s_0_full_n => s_01_full_n,
        s_0_write => set_tile_broadcast_U0_s_0_write,
        s_1_din => set_tile_broadcast_U0_s_1_din,
        s_1_num_data_valid => s_12_num_data_valid,
        s_1_fifo_cap => s_12_fifo_cap,
        s_1_full_n => s_12_full_n,
        s_1_write => set_tile_broadcast_U0_s_1_write,
        s_2_din => set_tile_broadcast_U0_s_2_din,
        s_2_num_data_valid => s_23_num_data_valid,
        s_2_fifo_cap => s_23_fifo_cap,
        s_2_full_n => s_23_full_n,
        s_2_write => set_tile_broadcast_U0_s_2_write,
        s_3_din => set_tile_broadcast_U0_s_3_din,
        s_3_num_data_valid => s_34_num_data_valid,
        s_3_fifo_cap => s_34_fifo_cap,
        s_3_full_n => s_34_full_n,
        s_3_write => set_tile_broadcast_U0_s_3_write,
        pointer => i,
        nnz => nnz);

    pu_kernel_U0 : component spmm_hls_pu_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pu_kernel_U0_ap_start,
        ap_done => pu_kernel_U0_ap_done,
        ap_continue => pu_kernel_U0_ap_continue,
        ap_idle => pu_kernel_U0_ap_idle,
        ap_ready => pu_kernel_U0_ap_ready,
        s_0_dout => s_01_dout,
        s_0_num_data_valid => s_01_num_data_valid,
        s_0_fifo_cap => s_01_fifo_cap,
        s_0_empty_n => s_01_empty_n,
        s_0_read => pu_kernel_U0_s_0_read);

    pu_kernel_1_U0 : component spmm_hls_pu_kernel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pu_kernel_1_U0_ap_start,
        ap_done => pu_kernel_1_U0_ap_done,
        ap_continue => pu_kernel_1_U0_ap_continue,
        ap_idle => pu_kernel_1_U0_ap_idle,
        ap_ready => pu_kernel_1_U0_ap_ready,
        s_1_dout => s_12_dout,
        s_1_num_data_valid => s_12_num_data_valid,
        s_1_fifo_cap => s_12_fifo_cap,
        s_1_empty_n => s_12_empty_n,
        s_1_read => pu_kernel_1_U0_s_1_read);

    pu_kernel_2_U0 : component spmm_hls_pu_kernel_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pu_kernel_2_U0_ap_start,
        ap_done => pu_kernel_2_U0_ap_done,
        ap_continue => pu_kernel_2_U0_ap_continue,
        ap_idle => pu_kernel_2_U0_ap_idle,
        ap_ready => pu_kernel_2_U0_ap_ready,
        s_2_dout => s_23_dout,
        s_2_num_data_valid => s_23_num_data_valid,
        s_2_fifo_cap => s_23_fifo_cap,
        s_2_empty_n => s_23_empty_n,
        s_2_read => pu_kernel_2_U0_s_2_read);

    pu_kernel_3_U0 : component spmm_hls_pu_kernel_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pu_kernel_3_U0_ap_start,
        ap_done => pu_kernel_3_U0_ap_done,
        ap_continue => pu_kernel_3_U0_ap_continue,
        ap_idle => pu_kernel_3_U0_ap_idle,
        ap_ready => pu_kernel_3_U0_ap_ready,
        s_3_dout => s_34_dout,
        s_3_num_data_valid => s_34_num_data_valid,
        s_3_fifo_cap => s_34_fifo_cap,
        s_3_empty_n => s_34_empty_n,
        s_3_read => pu_kernel_3_U0_s_3_read);

    s_01_U : component spmm_hls_fifo_w388_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => set_tile_broadcast_U0_s_0_din,
        if_full_n => s_01_full_n,
        if_write => set_tile_broadcast_U0_s_0_write,
        if_dout => s_01_dout,
        if_num_data_valid => s_01_num_data_valid,
        if_fifo_cap => s_01_fifo_cap,
        if_empty_n => s_01_empty_n,
        if_read => pu_kernel_U0_s_0_read);

    s_12_U : component spmm_hls_fifo_w388_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => set_tile_broadcast_U0_s_1_din,
        if_full_n => s_12_full_n,
        if_write => set_tile_broadcast_U0_s_1_write,
        if_dout => s_12_dout,
        if_num_data_valid => s_12_num_data_valid,
        if_fifo_cap => s_12_fifo_cap,
        if_empty_n => s_12_empty_n,
        if_read => pu_kernel_1_U0_s_1_read);

    s_23_U : component spmm_hls_fifo_w388_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => set_tile_broadcast_U0_s_2_din,
        if_full_n => s_23_full_n,
        if_write => set_tile_broadcast_U0_s_2_write,
        if_dout => s_23_dout,
        if_num_data_valid => s_23_num_data_valid,
        if_fifo_cap => s_23_fifo_cap,
        if_empty_n => s_23_empty_n,
        if_read => pu_kernel_2_U0_s_2_read);

    s_34_U : component spmm_hls_fifo_w388_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => set_tile_broadcast_U0_s_3_din,
        if_full_n => s_34_full_n,
        if_write => set_tile_broadcast_U0_s_3_write,
        if_dout => s_34_dout,
        if_num_data_valid => s_34_num_data_valid,
        if_fifo_cap => s_34_fifo_cap,
        if_empty_n => s_34_empty_n,
        if_read => pu_kernel_3_U0_s_3_read);

    start_for_pu_kernel_U0_U : component spmm_hls_start_for_pu_kernel_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pu_kernel_U0_din,
        if_full_n => start_for_pu_kernel_U0_full_n,
        if_write => set_tile_broadcast_U0_start_write,
        if_dout => start_for_pu_kernel_U0_dout,
        if_empty_n => start_for_pu_kernel_U0_empty_n,
        if_read => pu_kernel_U0_ap_ready);

    start_for_pu_kernel_1_U0_U : component spmm_hls_start_for_pu_kernel_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pu_kernel_1_U0_din,
        if_full_n => start_for_pu_kernel_1_U0_full_n,
        if_write => set_tile_broadcast_U0_start_write,
        if_dout => start_for_pu_kernel_1_U0_dout,
        if_empty_n => start_for_pu_kernel_1_U0_empty_n,
        if_read => pu_kernel_1_U0_ap_ready);

    start_for_pu_kernel_2_U0_U : component spmm_hls_start_for_pu_kernel_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pu_kernel_2_U0_din,
        if_full_n => start_for_pu_kernel_2_U0_full_n,
        if_write => set_tile_broadcast_U0_start_write,
        if_dout => start_for_pu_kernel_2_U0_dout,
        if_empty_n => start_for_pu_kernel_2_U0_empty_n,
        if_read => pu_kernel_2_U0_ap_ready);

    start_for_pu_kernel_3_U0_U : component spmm_hls_start_for_pu_kernel_3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pu_kernel_3_U0_din,
        if_full_n => start_for_pu_kernel_3_U0_full_n,
        if_write => set_tile_broadcast_U0_start_write,
        if_dout => start_for_pu_kernel_3_U0_dout,
        if_empty_n => start_for_pu_kernel_3_U0_empty_n,
        if_read => pu_kernel_3_U0_ap_ready);




    ap_done <= ap_sync_done;
    ap_idle <= (set_tile_broadcast_U0_ap_idle and pu_kernel_U0_ap_idle and pu_kernel_3_U0_ap_idle and pu_kernel_2_U0_ap_idle and pu_kernel_1_U0_ap_idle);
    ap_ready <= set_tile_broadcast_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (pu_kernel_U0_ap_done and pu_kernel_3_U0_ap_done and pu_kernel_2_U0_ap_done and pu_kernel_1_U0_ap_done);
    m_axi_gmem1_ARADDR <= set_tile_broadcast_U0_m_axi_gmem1_ARADDR;
    m_axi_gmem1_ARBURST <= set_tile_broadcast_U0_m_axi_gmem1_ARBURST;
    m_axi_gmem1_ARCACHE <= set_tile_broadcast_U0_m_axi_gmem1_ARCACHE;
    m_axi_gmem1_ARID <= set_tile_broadcast_U0_m_axi_gmem1_ARID;
    m_axi_gmem1_ARLEN <= set_tile_broadcast_U0_m_axi_gmem1_ARLEN;
    m_axi_gmem1_ARLOCK <= set_tile_broadcast_U0_m_axi_gmem1_ARLOCK;
    m_axi_gmem1_ARPROT <= set_tile_broadcast_U0_m_axi_gmem1_ARPROT;
    m_axi_gmem1_ARQOS <= set_tile_broadcast_U0_m_axi_gmem1_ARQOS;
    m_axi_gmem1_ARREGION <= set_tile_broadcast_U0_m_axi_gmem1_ARREGION;
    m_axi_gmem1_ARSIZE <= set_tile_broadcast_U0_m_axi_gmem1_ARSIZE;
    m_axi_gmem1_ARUSER <= set_tile_broadcast_U0_m_axi_gmem1_ARUSER;
    m_axi_gmem1_ARVALID <= set_tile_broadcast_U0_m_axi_gmem1_ARVALID;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;
    m_axi_gmem1_RREADY <= set_tile_broadcast_U0_m_axi_gmem1_RREADY;
    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    m_axi_gmem2_ARADDR <= set_tile_broadcast_U0_m_axi_gmem2_ARADDR;
    m_axi_gmem2_ARBURST <= set_tile_broadcast_U0_m_axi_gmem2_ARBURST;
    m_axi_gmem2_ARCACHE <= set_tile_broadcast_U0_m_axi_gmem2_ARCACHE;
    m_axi_gmem2_ARID <= set_tile_broadcast_U0_m_axi_gmem2_ARID;
    m_axi_gmem2_ARLEN <= set_tile_broadcast_U0_m_axi_gmem2_ARLEN;
    m_axi_gmem2_ARLOCK <= set_tile_broadcast_U0_m_axi_gmem2_ARLOCK;
    m_axi_gmem2_ARPROT <= set_tile_broadcast_U0_m_axi_gmem2_ARPROT;
    m_axi_gmem2_ARQOS <= set_tile_broadcast_U0_m_axi_gmem2_ARQOS;
    m_axi_gmem2_ARREGION <= set_tile_broadcast_U0_m_axi_gmem2_ARREGION;
    m_axi_gmem2_ARSIZE <= set_tile_broadcast_U0_m_axi_gmem2_ARSIZE;
    m_axi_gmem2_ARUSER <= set_tile_broadcast_U0_m_axi_gmem2_ARUSER;
    m_axi_gmem2_ARVALID <= set_tile_broadcast_U0_m_axi_gmem2_ARVALID;
    m_axi_gmem2_AWADDR <= ap_const_lv64_0;
    m_axi_gmem2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_AWID <= ap_const_lv1_0;
    m_axi_gmem2_AWLEN <= ap_const_lv32_0;
    m_axi_gmem2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_AWUSER <= ap_const_lv1_0;
    m_axi_gmem2_AWVALID <= ap_const_logic_0;
    m_axi_gmem2_BREADY <= ap_const_logic_0;
    m_axi_gmem2_RREADY <= set_tile_broadcast_U0_m_axi_gmem2_RREADY;
    m_axi_gmem2_WDATA <= ap_const_lv32_0;
    m_axi_gmem2_WID <= ap_const_lv1_0;
    m_axi_gmem2_WLAST <= ap_const_logic_0;
    m_axi_gmem2_WSTRB <= ap_const_lv4_0;
    m_axi_gmem2_WUSER <= ap_const_lv1_0;
    m_axi_gmem2_WVALID <= ap_const_logic_0;
    pu_kernel_1_U0_ap_continue <= ap_sync_continue;
    pu_kernel_1_U0_ap_start <= start_for_pu_kernel_1_U0_empty_n;
    pu_kernel_2_U0_ap_continue <= ap_sync_continue;
    pu_kernel_2_U0_ap_start <= start_for_pu_kernel_2_U0_empty_n;
    pu_kernel_3_U0_ap_continue <= ap_sync_continue;
    pu_kernel_3_U0_ap_start <= start_for_pu_kernel_3_U0_empty_n;
    pu_kernel_U0_ap_continue <= ap_sync_continue;
    pu_kernel_U0_ap_start <= start_for_pu_kernel_U0_empty_n;
    set_tile_broadcast_U0_ap_continue <= ap_const_logic_1;
    set_tile_broadcast_U0_ap_start <= ap_start;
    set_tile_broadcast_U0_start_full_n <= (start_for_pu_kernel_U0_full_n and start_for_pu_kernel_3_U0_full_n and start_for_pu_kernel_2_U0_full_n and start_for_pu_kernel_1_U0_full_n);
    start_for_pu_kernel_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pu_kernel_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pu_kernel_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pu_kernel_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
