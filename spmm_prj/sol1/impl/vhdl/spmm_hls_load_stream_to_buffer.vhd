-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_load_stream_to_buffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_stream3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    A_stream3_empty_n : IN STD_LOGIC;
    A_stream3_read : OUT STD_LOGIC;
    sparse_buf_eor_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_0_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_1_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_2_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_3_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_4 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_4_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_5 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_5_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_6 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_6_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_7 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_7_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_8_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_9 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_9_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_10 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_10_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_11 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_11_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_12 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_12_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_13 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_13_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_14 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_14_ap_vld : OUT STD_LOGIC;
    sparse_buf_eor_15 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_buf_eor_15_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_0_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_1 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_1_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_2 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_2_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_3 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_3_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_4 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_4_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_5 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_5_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_6 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_6_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_7 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_7_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_8 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_8_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_9 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_9_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_10 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_10_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_11 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_11_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_12 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_12_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_13 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_13_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_14 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_14_ap_vld : OUT STD_LOGIC;
    sparse_buf_col_15 : OUT STD_LOGIC_VECTOR (30 downto 0);
    sparse_buf_col_15_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_0_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_1_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_2_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_3_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_4_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_5_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_6_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_7_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_8_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_9_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_10_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_11_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_12_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_13_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_14_ap_vld : OUT STD_LOGIC;
    sparse_buf_value_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sparse_buf_value_15_ap_vld : OUT STD_LOGIC );
end;


architecture behav of spmm_hls_load_stream_to_buffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln32_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal A_stream3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln35_fu_540_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln35_reg_629 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_174 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal x_value_V_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component spmm_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_528_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_174 <= add_ln32_fu_534_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_174 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_528_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln35_reg_629 <= trunc_ln35_fu_540_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    A_stream3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, A_stream3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_stream3_blk_n <= A_stream3_empty_n;
        else 
            A_stream3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_stream3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_stream3_read <= ap_const_logic_1;
        else 
            A_stream3_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln32_fu_534_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, A_stream3_empty_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = A_stream3_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, A_stream3_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = A_stream3_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, A_stream3_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = A_stream3_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(A_stream3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = A_stream3_empty_n);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln32_fu_528_p2)
    begin
        if (((icmp_ln32_fu_528_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_174, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_174;
        end if; 
    end process;

    icmp_ln32_fu_528_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv5_10) else "0";
    sparse_buf_col_0 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_0))) then 
            sparse_buf_col_0_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_1 <= A_stream3_dout(62 downto 32);
    sparse_buf_col_10 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_10_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_A))) then 
            sparse_buf_col_10_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_11 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_11_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_B))) then 
            sparse_buf_col_11_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_12 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_12_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_C))) then 
            sparse_buf_col_12_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_13 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_13_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_D))) then 
            sparse_buf_col_13_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_14 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_14_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_E))) then 
            sparse_buf_col_14_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_15 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_15_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_F))) then 
            sparse_buf_col_15_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sparse_buf_col_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_1))) then 
            sparse_buf_col_1_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_2 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_2))) then 
            sparse_buf_col_2_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_3 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_3))) then 
            sparse_buf_col_3_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_4 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_4))) then 
            sparse_buf_col_4_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_5 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_5))) then 
            sparse_buf_col_5_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_6 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_6_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_6))) then 
            sparse_buf_col_6_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_7 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_7_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_7))) then 
            sparse_buf_col_7_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_8 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_8_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_8))) then 
            sparse_buf_col_8_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_col_9 <= A_stream3_dout(62 downto 32);

    sparse_buf_col_9_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_9))) then 
            sparse_buf_col_9_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_col_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_0 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_0))) then 
            sparse_buf_eor_0_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_1 <= A_stream3_dout(63 downto 63);
    sparse_buf_eor_10 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_10_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_A))) then 
            sparse_buf_eor_10_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_11 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_11_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_B))) then 
            sparse_buf_eor_11_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_12 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_12_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_C))) then 
            sparse_buf_eor_12_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_13 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_13_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_D))) then 
            sparse_buf_eor_13_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_14 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_14_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_E))) then 
            sparse_buf_eor_14_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_15 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_15_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_F))) then 
            sparse_buf_eor_15_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sparse_buf_eor_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_1))) then 
            sparse_buf_eor_1_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_2 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_2))) then 
            sparse_buf_eor_2_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_3 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_3))) then 
            sparse_buf_eor_3_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_4 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_4))) then 
            sparse_buf_eor_4_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_5 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_5))) then 
            sparse_buf_eor_5_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_6 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_6_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_6))) then 
            sparse_buf_eor_6_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_7 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_7_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_7))) then 
            sparse_buf_eor_7_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_8 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_8_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_8))) then 
            sparse_buf_eor_8_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_eor_9 <= A_stream3_dout(63 downto 63);

    sparse_buf_eor_9_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_9))) then 
            sparse_buf_eor_9_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_eor_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_0 <= x_value_V_fu_599_p1;

    sparse_buf_value_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_0))) then 
            sparse_buf_value_0_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_1 <= x_value_V_fu_599_p1;
    sparse_buf_value_10 <= x_value_V_fu_599_p1;

    sparse_buf_value_10_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_A))) then 
            sparse_buf_value_10_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_11 <= x_value_V_fu_599_p1;

    sparse_buf_value_11_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_B))) then 
            sparse_buf_value_11_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_12 <= x_value_V_fu_599_p1;

    sparse_buf_value_12_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_C))) then 
            sparse_buf_value_12_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_13 <= x_value_V_fu_599_p1;

    sparse_buf_value_13_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_D))) then 
            sparse_buf_value_13_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_14 <= x_value_V_fu_599_p1;

    sparse_buf_value_14_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_E))) then 
            sparse_buf_value_14_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_15 <= x_value_V_fu_599_p1;

    sparse_buf_value_15_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_F))) then 
            sparse_buf_value_15_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sparse_buf_value_1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_1))) then 
            sparse_buf_value_1_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_2 <= x_value_V_fu_599_p1;

    sparse_buf_value_2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_2))) then 
            sparse_buf_value_2_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_3 <= x_value_V_fu_599_p1;

    sparse_buf_value_3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_3))) then 
            sparse_buf_value_3_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_4 <= x_value_V_fu_599_p1;

    sparse_buf_value_4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_4))) then 
            sparse_buf_value_4_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_5 <= x_value_V_fu_599_p1;

    sparse_buf_value_5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_5))) then 
            sparse_buf_value_5_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_6 <= x_value_V_fu_599_p1;

    sparse_buf_value_6_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_6))) then 
            sparse_buf_value_6_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_7 <= x_value_V_fu_599_p1;

    sparse_buf_value_7_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_7))) then 
            sparse_buf_value_7_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_8 <= x_value_V_fu_599_p1;

    sparse_buf_value_8_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_8))) then 
            sparse_buf_value_8_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sparse_buf_value_9 <= x_value_V_fu_599_p1;

    sparse_buf_value_9_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln35_reg_629, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln35_reg_629 = ap_const_lv4_9))) then 
            sparse_buf_value_9_ap_vld <= ap_const_logic_1;
        else 
            sparse_buf_value_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln35_fu_540_p1 <= ap_sig_allocacmp_i_3(4 - 1 downto 0);
    x_value_V_fu_599_p1 <= A_stream3_dout(32 - 1 downto 0);
end behav;
