// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_set_tile_broadcast_Pipeline_copy_tile_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        seen_v_3_reload,
        seen_v_2_reload,
        seen_v_1_reload,
        seen_v_reload,
        pkt_v_value_address0,
        pkt_v_value_ce0,
        pkt_v_value_we0,
        pkt_v_value_d0,
        pkt_v_y_address0,
        pkt_v_y_ce0,
        pkt_v_y_we0,
        pkt_v_y_d0,
        pkt_ref_address0,
        pkt_ref_ce0,
        pkt_ref_we0,
        pkt_ref_d0,
        pointer,
        nnz,
        a_val,
        col_idx
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [31:0] m_axi_gmem2_WDATA;
output  [3:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [31:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [8:0] m_axi_gmem2_RFIFONUM;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [0:0] seen_v_3_reload;
input  [0:0] seen_v_2_reload;
input  [0:0] seen_v_1_reload;
input  [0:0] seen_v_reload;
output  [1:0] pkt_v_value_address0;
output   pkt_v_value_ce0;
output   pkt_v_value_we0;
output  [31:0] pkt_v_value_d0;
output  [1:0] pkt_v_y_address0;
output   pkt_v_y_ce0;
output   pkt_v_y_we0;
output  [31:0] pkt_v_y_d0;
output  [1:0] pkt_ref_address0;
output   pkt_ref_ce0;
output   pkt_ref_we0;
output  [0:0] pkt_ref_d0;
input  [31:0] pointer;
input  [31:0] nnz;
input  [63:0] a_val;
input  [63:0] col_idx;

reg ap_idle;
reg m_axi_gmem2_ARVALID;
reg m_axi_gmem2_RREADY;
reg m_axi_gmem1_ARVALID;
reg m_axi_gmem1_RREADY;
reg pkt_v_value_ce0;
reg pkt_v_value_we0;
reg pkt_v_y_ce0;
reg pkt_v_y_we0;
reg pkt_ref_ce0;
reg pkt_ref_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln57_reg_776;
reg   [0:0] icmp_ln60_reg_780;
reg    ap_predicate_op62_readreq_state2;
reg    ap_predicate_op63_readreq_state2;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] icmp_ln57_reg_776_pp0_iter7_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter7_reg;
reg    ap_predicate_op76_read_state9;
reg    ap_predicate_op78_read_state9;
reg    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln57_fu_302_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem2_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem2_blk_n_R;
reg    gmem1_blk_n_AR;
reg    gmem1_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] i_4_reg_771;
reg   [2:0] i_4_reg_771_pp0_iter1_reg;
reg   [2:0] i_4_reg_771_pp0_iter2_reg;
reg   [2:0] i_4_reg_771_pp0_iter3_reg;
reg   [2:0] i_4_reg_771_pp0_iter4_reg;
reg   [2:0] i_4_reg_771_pp0_iter5_reg;
reg   [2:0] i_4_reg_771_pp0_iter6_reg;
reg   [2:0] i_4_reg_771_pp0_iter7_reg;
reg   [2:0] i_4_reg_771_pp0_iter8_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter1_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter2_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter3_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter4_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter5_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter6_reg;
reg   [0:0] icmp_ln57_reg_776_pp0_iter8_reg;
wire   [0:0] icmp_ln60_fu_328_p2;
reg   [0:0] icmp_ln60_reg_780_pp0_iter1_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter2_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter3_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter4_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter5_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter6_reg;
reg   [0:0] icmp_ln60_reg_780_pp0_iter8_reg;
reg   [63:0] gmem2_addr_reg_784;
reg   [63:0] gmem1_addr_reg_790;
reg   [31:0] y_reg_796;
reg   [0:0] ap_phi_mux_tile_ref_phi_fu_259_p6;
wire   [0:0] dup_1_fu_506_p2;
reg   [0:0] ap_phi_reg_pp0_iter9_tile_ref_reg_255;
wire   [0:0] and_ln81_fu_536_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter1_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter2_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter3_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter4_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter5_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter6_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter7_tile_ref_reg_255;
reg   [0:0] ap_phi_reg_pp0_iter8_tile_ref_reg_255;
wire   [63:0] zext_ln57_fu_444_p1;
wire  signed [63:0] sext_ln62_fu_362_p1;
wire  signed [63:0] sext_ln63_fu_388_p1;
reg   [2:0] i_fu_96;
wire   [2:0] add_ln57_fu_308_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_4;
reg   [31:0] used_fu_100;
wire   [31:0] used_3_fu_634_p2;
reg   [31:0] seen_y_fu_104;
wire   [31:0] seen_y_9_fu_552_p3;
reg   [31:0] seen_y_1_fu_108;
wire   [31:0] seen_y_10_fu_565_p3;
reg   [31:0] seen_y_2_fu_112;
wire   [31:0] seen_y_11_fu_578_p3;
reg   [31:0] seen_y_3_fu_116;
wire   [31:0] seen_y_12_fu_597_p3;
reg   [0:0] seen_v_fu_120;
wire   [0:0] seen_v_11_fu_628_p2;
reg   [0:0] seen_v_4_fu_124;
wire   [0:0] seen_v_12_fu_622_p2;
reg   [0:0] seen_v_5_fu_128;
wire   [0:0] seen_v_13_fu_616_p2;
reg   [0:0] seen_v_6_fu_132;
wire   [0:0] seen_v_14_fu_610_p2;
reg   [31:0] tile_y_fu_136;
reg   [31:0] tile_value_fu_140;
wire   [31:0] v_fu_403_p1;
wire   [1:0] trunc_ln59_fu_314_p1;
wire   [31:0] zext_ln59_fu_318_p1;
wire   [31:0] idx_fu_322_p2;
wire   [33:0] shl_ln_fu_334_p3;
wire   [63:0] zext_ln62_fu_342_p1;
wire   [63:0] add_ln62_fu_346_p2;
wire   [61:0] trunc_ln2_fu_352_p4;
wire   [63:0] add_ln63_fu_372_p2;
wire   [61:0] trunc_ln3_fu_378_p4;
wire   [0:0] icmp_ln71_fu_450_p2;
wire   [0:0] icmp_ln71_1_fu_461_p2;
wire   [0:0] icmp_ln71_2_fu_472_p2;
wire   [0:0] icmp_ln71_3_fu_483_p2;
wire   [0:0] and_ln71_fu_466_p2;
wire   [0:0] and_ln71_1_fu_477_p2;
wire   [0:0] dup_fu_455_p2;
wire   [0:0] and_ln71_2_fu_488_p2;
wire   [0:0] or_ln71_1_fu_500_p2;
wire   [0:0] or_ln71_fu_494_p2;
wire   [29:0] tmp_fu_520_p4;
wire   [0:0] icmp_ln81_fu_530_p2;
wire   [0:0] xor_ln81_fu_514_p2;
wire   [1:0] trunc_ln82_fu_542_p1;
wire   [0:0] icmp_ln82_fu_546_p2;
wire   [0:0] icmp_ln82_1_fu_559_p2;
wire   [0:0] icmp_ln82_2_fu_572_p2;
wire   [0:0] or_ln82_fu_585_p2;
wire   [0:0] or_ln82_1_fu_591_p2;
wire   [0:0] xor_ln82_fu_604_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_454;
reg    ap_condition_805;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_454)) begin
        if (((icmp_ln60_fu_328_p2 == 1'd0) & (icmp_ln57_fu_302_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tile_ref_reg_255 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tile_ref_reg_255 <= ap_phi_reg_pp0_iter0_tile_ref_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln57_fu_302_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_96 <= add_ln57_fu_308_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_96 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_4_fu_124 <= seen_v_1_reload;
        end else if ((1'b1 == ap_condition_805)) begin
            seen_v_4_fu_124 <= seen_v_12_fu_622_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_5_fu_128 <= seen_v_2_reload;
        end else if ((1'b1 == ap_condition_805)) begin
            seen_v_5_fu_128 <= seen_v_13_fu_616_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_6_fu_132 <= seen_v_3_reload;
        end else if ((1'b1 == ap_condition_805)) begin
            seen_v_6_fu_132 <= seen_v_14_fu_610_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_fu_120 <= seen_v_reload;
        end else if ((1'b1 == ap_condition_805)) begin
            seen_v_fu_120 <= seen_v_11_fu_628_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            used_fu_100 <= 32'd0;
        end else if ((1'b1 == ap_condition_805)) begin
            used_fu_100 <= used_3_fu_634_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_4_reg_771 <= ap_sig_allocacmp_i_4;
        i_4_reg_771_pp0_iter1_reg <= i_4_reg_771;
        icmp_ln57_reg_776 <= icmp_ln57_fu_302_p2;
        icmp_ln57_reg_776_pp0_iter1_reg <= icmp_ln57_reg_776;
        icmp_ln60_reg_780_pp0_iter1_reg <= icmp_ln60_reg_780;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        i_4_reg_771_pp0_iter2_reg <= i_4_reg_771_pp0_iter1_reg;
        i_4_reg_771_pp0_iter3_reg <= i_4_reg_771_pp0_iter2_reg;
        i_4_reg_771_pp0_iter4_reg <= i_4_reg_771_pp0_iter3_reg;
        i_4_reg_771_pp0_iter5_reg <= i_4_reg_771_pp0_iter4_reg;
        i_4_reg_771_pp0_iter6_reg <= i_4_reg_771_pp0_iter5_reg;
        i_4_reg_771_pp0_iter7_reg <= i_4_reg_771_pp0_iter6_reg;
        i_4_reg_771_pp0_iter8_reg <= i_4_reg_771_pp0_iter7_reg;
        icmp_ln57_reg_776_pp0_iter2_reg <= icmp_ln57_reg_776_pp0_iter1_reg;
        icmp_ln57_reg_776_pp0_iter3_reg <= icmp_ln57_reg_776_pp0_iter2_reg;
        icmp_ln57_reg_776_pp0_iter4_reg <= icmp_ln57_reg_776_pp0_iter3_reg;
        icmp_ln57_reg_776_pp0_iter5_reg <= icmp_ln57_reg_776_pp0_iter4_reg;
        icmp_ln57_reg_776_pp0_iter6_reg <= icmp_ln57_reg_776_pp0_iter5_reg;
        icmp_ln57_reg_776_pp0_iter7_reg <= icmp_ln57_reg_776_pp0_iter6_reg;
        icmp_ln57_reg_776_pp0_iter8_reg <= icmp_ln57_reg_776_pp0_iter7_reg;
        icmp_ln60_reg_780_pp0_iter2_reg <= icmp_ln60_reg_780_pp0_iter1_reg;
        icmp_ln60_reg_780_pp0_iter3_reg <= icmp_ln60_reg_780_pp0_iter2_reg;
        icmp_ln60_reg_780_pp0_iter4_reg <= icmp_ln60_reg_780_pp0_iter3_reg;
        icmp_ln60_reg_780_pp0_iter5_reg <= icmp_ln60_reg_780_pp0_iter4_reg;
        icmp_ln60_reg_780_pp0_iter6_reg <= icmp_ln60_reg_780_pp0_iter5_reg;
        icmp_ln60_reg_780_pp0_iter7_reg <= icmp_ln60_reg_780_pp0_iter6_reg;
        icmp_ln60_reg_780_pp0_iter8_reg <= icmp_ln60_reg_780_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_tile_ref_reg_255 <= ap_phi_reg_pp0_iter1_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_tile_ref_reg_255 <= ap_phi_reg_pp0_iter2_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_tile_ref_reg_255 <= ap_phi_reg_pp0_iter3_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_tile_ref_reg_255 <= ap_phi_reg_pp0_iter4_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_tile_ref_reg_255 <= ap_phi_reg_pp0_iter5_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_tile_ref_reg_255 <= ap_phi_reg_pp0_iter6_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_tile_ref_reg_255 <= ap_phi_reg_pp0_iter7_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_tile_ref_reg_255 <= ap_phi_reg_pp0_iter8_tile_ref_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_328_p2 == 1'd1) & (icmp_ln57_fu_302_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem1_addr_reg_790 <= sext_ln63_fu_388_p1;
        gmem2_addr_reg_784 <= sext_ln62_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_302_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln60_reg_780 <= icmp_ln60_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln60_reg_780_pp0_iter8_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln81_fu_536_p2))) begin
        seen_y_1_fu_108 <= seen_y_10_fu_565_p3;
        seen_y_2_fu_112 <= seen_y_11_fu_578_p3;
        seen_y_3_fu_116 <= seen_y_12_fu_597_p3;
        seen_y_fu_104 <= seen_y_9_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_780_pp0_iter7_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter7_reg == 1'd0))) begin
        tile_value_fu_140 <= v_fu_403_p1;
        tile_y_fu_136 <= m_axi_gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op78_read_state9 == 1'b1))) begin
        y_reg_796 <= m_axi_gmem1_RDATA;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln60_reg_780_pp0_iter8_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'd0 == and_ln81_fu_536_p2)) | ((icmp_ln60_reg_780_pp0_iter8_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'd1 == and_ln81_fu_536_p2)))) begin
        ap_phi_mux_tile_ref_phi_fu_259_p6 = dup_1_fu_506_p2;
    end else begin
        ap_phi_mux_tile_ref_phi_fu_259_p6 = ap_phi_reg_pp0_iter9_tile_ref_reg_255;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_4 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_96;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op63_readreq_state2 == 1'b1))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op78_read_state9 == 1'b1))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op62_readreq_state2 == 1'b1))) begin
        gmem2_blk_n_AR = m_axi_gmem2_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op76_read_state9 == 1'b1))) begin
        gmem2_blk_n_R = m_axi_gmem2_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op63_readreq_state2 == 1'b1))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op78_read_state9 == 1'b1))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op62_readreq_state2 == 1'b1))) begin
        m_axi_gmem2_ARVALID = 1'b1;
    end else begin
        m_axi_gmem2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op76_read_state9 == 1'b1))) begin
        m_axi_gmem2_RREADY = 1'b1;
    end else begin
        m_axi_gmem2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pkt_ref_ce0 = 1'b1;
    end else begin
        pkt_ref_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pkt_ref_we0 = 1'b1;
    end else begin
        pkt_ref_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pkt_v_value_ce0 = 1'b1;
    end else begin
        pkt_v_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pkt_v_value_we0 = 1'b1;
    end else begin
        pkt_v_value_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pkt_v_y_ce0 = 1'b1;
    end else begin
        pkt_v_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pkt_v_y_we0 = 1'b1;
    end else begin
        pkt_v_y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_fu_308_p2 = (ap_sig_allocacmp_i_4 + 3'd1);

assign add_ln62_fu_346_p2 = (zext_ln62_fu_342_p1 + a_val);

assign add_ln63_fu_372_p2 = (zext_ln62_fu_342_p1 + col_idx);

assign and_ln71_1_fu_477_p2 = (seen_v_5_fu_128 & icmp_ln71_2_fu_472_p2);

assign and_ln71_2_fu_488_p2 = (seen_v_6_fu_132 & icmp_ln71_3_fu_483_p2);

assign and_ln71_fu_466_p2 = (seen_v_4_fu_124 & icmp_ln71_1_fu_461_p2);

assign and_ln81_fu_536_p2 = (xor_ln81_fu_514_p2 & icmp_ln81_fu_530_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (((ap_predicate_op78_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op76_read_state9 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter8 == 1'b1) & (((ap_predicate_op78_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op76_read_state9 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((ap_predicate_op63_readreq_state2 == 1'b1) & (m_axi_gmem1_ARREADY == 1'b0)) | ((m_axi_gmem2_ARREADY == 1'b0) & (ap_predicate_op62_readreq_state2 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = (((ap_predicate_op78_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op76_read_state9 == 1'b1)));
end

always @ (*) begin
    ap_condition_454 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_805 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln60_reg_780_pp0_iter8_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter8_reg == 1'd0) & (1'd1 == and_ln81_fu_536_p2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_tile_ref_reg_255 = 'bx;

always @ (*) begin
    ap_predicate_op62_readreq_state2 = ((icmp_ln60_reg_780 == 1'd1) & (icmp_ln57_reg_776 == 1'd0));
end

always @ (*) begin
    ap_predicate_op63_readreq_state2 = ((icmp_ln60_reg_780 == 1'd1) & (icmp_ln57_reg_776 == 1'd0));
end

always @ (*) begin
    ap_predicate_op76_read_state9 = ((icmp_ln60_reg_780_pp0_iter7_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op78_read_state9 = ((icmp_ln60_reg_780_pp0_iter7_reg == 1'd1) & (icmp_ln57_reg_776_pp0_iter7_reg == 1'd0));
end

assign dup_1_fu_506_p2 = (or_ln71_fu_494_p2 | or_ln71_1_fu_500_p2);

assign dup_fu_455_p2 = (seen_v_fu_120 & icmp_ln71_fu_450_p2);

assign icmp_ln57_fu_302_p2 = ((ap_sig_allocacmp_i_4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_328_p2 = ((idx_fu_322_p2 < nnz) ? 1'b1 : 1'b0);

assign icmp_ln71_1_fu_461_p2 = ((seen_y_1_fu_108 == y_reg_796) ? 1'b1 : 1'b0);

assign icmp_ln71_2_fu_472_p2 = ((seen_y_2_fu_112 == y_reg_796) ? 1'b1 : 1'b0);

assign icmp_ln71_3_fu_483_p2 = ((seen_y_3_fu_116 == y_reg_796) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_450_p2 = ((seen_y_fu_104 == y_reg_796) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_530_p2 = (($signed(tmp_fu_520_p4) < $signed(30'd1)) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_559_p2 = ((trunc_ln82_fu_542_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln82_2_fu_572_p2 = ((trunc_ln82_fu_542_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_546_p2 = ((trunc_ln82_fu_542_p1 == 2'd0) ? 1'b1 : 1'b0);

assign idx_fu_322_p2 = (zext_ln59_fu_318_p1 + pointer);

assign m_axi_gmem1_ARADDR = gmem1_addr_reg_790;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd1;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign m_axi_gmem2_ARADDR = gmem2_addr_reg_784;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd1;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_AWADDR = 64'd0;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 32'd0;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_AWVALID = 1'b0;

assign m_axi_gmem2_BREADY = 1'b0;

assign m_axi_gmem2_WDATA = 32'd0;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 4'd0;

assign m_axi_gmem2_WUSER = 1'd0;

assign m_axi_gmem2_WVALID = 1'b0;

assign or_ln71_1_fu_500_p2 = (dup_fu_455_p2 | and_ln71_2_fu_488_p2);

assign or_ln71_fu_494_p2 = (and_ln71_fu_466_p2 | and_ln71_1_fu_477_p2);

assign or_ln82_1_fu_591_p2 = (or_ln82_fu_585_p2 | icmp_ln82_fu_546_p2);

assign or_ln82_fu_585_p2 = (icmp_ln82_2_fu_572_p2 | icmp_ln82_1_fu_559_p2);

assign pkt_ref_address0 = zext_ln57_fu_444_p1;

assign pkt_ref_d0 = ap_phi_mux_tile_ref_phi_fu_259_p6;

assign pkt_v_value_address0 = zext_ln57_fu_444_p1;

assign pkt_v_value_d0 = tile_value_fu_140;

assign pkt_v_y_address0 = zext_ln57_fu_444_p1;

assign pkt_v_y_d0 = tile_y_fu_136;

assign seen_v_11_fu_628_p2 = (seen_v_fu_120 | icmp_ln82_fu_546_p2);

assign seen_v_12_fu_622_p2 = (seen_v_4_fu_124 | icmp_ln82_1_fu_559_p2);

assign seen_v_13_fu_616_p2 = (seen_v_5_fu_128 | icmp_ln82_2_fu_572_p2);

assign seen_v_14_fu_610_p2 = (xor_ln82_fu_604_p2 | seen_v_6_fu_132);

assign seen_y_10_fu_565_p3 = ((icmp_ln82_1_fu_559_p2[0:0] == 1'b1) ? y_reg_796 : seen_y_1_fu_108);

assign seen_y_11_fu_578_p3 = ((icmp_ln82_2_fu_572_p2[0:0] == 1'b1) ? y_reg_796 : seen_y_2_fu_112);

assign seen_y_12_fu_597_p3 = ((or_ln82_1_fu_591_p2[0:0] == 1'b1) ? seen_y_3_fu_116 : y_reg_796);

assign seen_y_9_fu_552_p3 = ((icmp_ln82_fu_546_p2[0:0] == 1'b1) ? y_reg_796 : seen_y_fu_104);

assign sext_ln62_fu_362_p1 = $signed(trunc_ln2_fu_352_p4);

assign sext_ln63_fu_388_p1 = $signed(trunc_ln3_fu_378_p4);

assign shl_ln_fu_334_p3 = {{idx_fu_322_p2}, {2'd0}};

assign tmp_fu_520_p4 = {{used_fu_100[31:2]}};

assign trunc_ln2_fu_352_p4 = {{add_ln62_fu_346_p2[63:2]}};

assign trunc_ln3_fu_378_p4 = {{add_ln63_fu_372_p2[63:2]}};

assign trunc_ln59_fu_314_p1 = ap_sig_allocacmp_i_4[1:0];

assign trunc_ln82_fu_542_p1 = used_fu_100[1:0];

assign used_3_fu_634_p2 = (used_fu_100 + 32'd1);

assign v_fu_403_p1 = m_axi_gmem2_RDATA;

assign xor_ln81_fu_514_p2 = (dup_1_fu_506_p2 ^ 1'd1);

assign xor_ln82_fu_604_p2 = (or_ln82_1_fu_591_p2 ^ 1'd1);

assign zext_ln57_fu_444_p1 = i_4_reg_771_pp0_iter8_reg;

assign zext_ln59_fu_318_p1 = trunc_ln59_fu_314_p1;

assign zext_ln62_fu_342_p1 = shl_ln_fu_334_p3;

endmodule //spmm_hls_set_tile_broadcast_Pipeline_copy_tile_loop
