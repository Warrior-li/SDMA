// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_set_tile (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        col_idx,
        a_val,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        tile_ref_0,
        tile_ref_0_ap_vld,
        tile_ref_1,
        tile_ref_1_ap_vld,
        tile_ref_2,
        tile_ref_2_ap_vld,
        tile_ref_3,
        tile_ref_3_ap_vld,
        pointer,
        nnz,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [31:0] m_axi_gmem2_WDATA;
output  [3:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [31:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [8:0] m_axi_gmem2_RFIFONUM;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [63:0] col_idx;
input  [63:0] a_val;
input  [95:0] p_read;
input  [95:0] p_read1;
input  [95:0] p_read2;
input  [95:0] p_read3;
output  [0:0] tile_ref_0;
output   tile_ref_0_ap_vld;
output  [0:0] tile_ref_1;
output   tile_ref_1_ap_vld;
output  [0:0] tile_ref_2;
output   tile_ref_2_ap_vld;
output  [0:0] tile_ref_3;
output   tile_ref_3_ap_vld;
input  [31:0] pointer;
input  [31:0] nnz;
output  [95:0] ap_return_0;
output  [95:0] ap_return_1;
output  [95:0] ap_return_2;
output  [95:0] ap_return_3;

reg ap_idle;
reg m_axi_gmem2_ARVALID;
reg m_axi_gmem2_RREADY;
reg m_axi_gmem1_ARVALID;
reg m_axi_gmem1_RREADY;
reg[0:0] tile_ref_0;
reg tile_ref_0_ap_vld;
reg[0:0] tile_ref_1;
reg tile_ref_1_ap_vld;
reg[0:0] tile_ref_2;
reg tile_ref_2_ap_vld;
reg[0:0] tile_ref_3;
reg tile_ref_3_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln43_reg_924;
reg   [0:0] icmp_ln46_reg_932;
reg    ap_predicate_op74_readreq_state2;
reg    ap_predicate_op75_readreq_state2;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] icmp_ln43_reg_924_pp0_iter7_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter7_reg;
reg    ap_predicate_op88_read_state9;
reg    ap_predicate_op89_read_state9;
reg    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_321_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem1_blk_n_R;
reg    gmem2_blk_n_AR;
reg    gmem2_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln43_reg_924_pp0_iter1_reg;
reg   [0:0] icmp_ln43_reg_924_pp0_iter2_reg;
reg   [0:0] icmp_ln43_reg_924_pp0_iter3_reg;
reg   [0:0] icmp_ln43_reg_924_pp0_iter4_reg;
reg   [0:0] icmp_ln43_reg_924_pp0_iter5_reg;
reg   [0:0] icmp_ln43_reg_924_pp0_iter6_reg;
reg   [0:0] icmp_ln43_reg_924_pp0_iter8_reg;
wire   [1:0] trunc_ln45_fu_333_p1;
reg   [1:0] trunc_ln45_reg_928;
reg   [1:0] trunc_ln45_reg_928_pp0_iter1_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter2_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter3_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter4_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter5_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter6_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter7_reg;
reg   [1:0] trunc_ln45_reg_928_pp0_iter8_reg;
wire   [0:0] icmp_ln46_fu_347_p2;
reg   [0:0] icmp_ln46_reg_932_pp0_iter1_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter2_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter3_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter4_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter5_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter6_reg;
reg   [0:0] icmp_ln46_reg_932_pp0_iter8_reg;
reg   [63:0] gmem2_addr_reg_936;
reg   [63:0] gmem1_addr_reg_942;
reg   [31:0] gmem2_addr_read_reg_948;
reg   [31:0] y_reg_956;
wire  signed [63:0] sext_ln48_fu_381_p1;
wire  signed [63:0] sext_ln49_fu_407_p1;
reg   [2:0] i_fu_108;
wire   [2:0] add_ln43_fu_327_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_4;
reg   [95:0] tile_3_0_fu_112;
wire   [95:0] or_ln_fu_606_p4;
reg   [95:0] tile_2_0_fu_116;
wire   [95:0] or_ln62_3_fu_528_p4;
reg   [95:0] tile_1_0_fu_120;
wire   [95:0] or_ln62_2_fu_554_p4;
reg   [95:0] tile_0_0_fu_124;
wire   [95:0] or_ln62_1_fu_580_p4;
reg   [31:0] used_fu_128;
wire   [31:0] used_3_fu_739_p2;
wire   [0:0] and_ln67_fu_641_p2;
reg   [31:0] seen_y_fu_132;
wire   [31:0] seen_y_9_fu_657_p3;
reg   [31:0] seen_y_1_fu_136;
wire   [31:0] seen_y_10_fu_670_p3;
reg   [31:0] seen_y_2_fu_140;
wire   [31:0] seen_y_11_fu_683_p3;
reg   [31:0] seen_y_3_fu_144;
wire   [31:0] seen_y_12_fu_702_p3;
reg   [0:0] seen_v_fu_148;
wire   [0:0] seen_v_12_fu_733_p2;
reg   [0:0] seen_v_1_fu_152;
wire   [0:0] seen_v_13_fu_727_p2;
reg   [0:0] seen_v_2_fu_156;
wire   [0:0] seen_v_14_fu_721_p2;
reg   [0:0] seen_v_3_fu_160;
wire   [0:0] seen_v_15_fu_715_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] dup_1_fu_505_p2;
wire   [31:0] zext_ln45_fu_337_p1;
wire   [31:0] idx_fu_341_p2;
wire   [33:0] shl_ln_fu_353_p3;
wire   [63:0] zext_ln48_fu_361_p1;
wire   [63:0] add_ln48_fu_365_p2;
wire   [61:0] trunc_ln1_fu_371_p4;
wire   [63:0] add_ln49_fu_391_p2;
wire   [61:0] trunc_ln2_fu_397_p4;
wire   [0:0] icmp_ln57_fu_449_p2;
wire   [0:0] icmp_ln57_1_fu_460_p2;
wire   [0:0] icmp_ln57_2_fu_471_p2;
wire   [0:0] icmp_ln57_3_fu_482_p2;
wire   [0:0] and_ln57_fu_465_p2;
wire   [0:0] and_ln57_1_fu_476_p2;
wire   [0:0] dup_fu_454_p2;
wire   [0:0] and_ln57_2_fu_487_p2;
wire   [0:0] or_ln57_1_fu_499_p2;
wire   [0:0] or_ln57_fu_493_p2;
wire   [31:0] tmp_3_fu_518_p4;
wire   [31:0] tmp_2_fu_544_p4;
wire   [31:0] tmp_1_fu_570_p4;
wire   [31:0] tmp_fu_596_p4;
wire   [29:0] tmp_4_fu_625_p4;
wire   [0:0] icmp_ln67_fu_635_p2;
wire   [0:0] xor_ln67_fu_619_p2;
wire   [1:0] trunc_ln68_fu_647_p1;
wire   [0:0] icmp_ln68_fu_651_p2;
wire   [0:0] icmp_ln68_1_fu_664_p2;
wire   [0:0] icmp_ln68_2_fu_677_p2;
wire   [0:0] or_ln68_fu_690_p2;
wire   [0:0] or_ln68_1_fu_696_p2;
wire   [0:0] xor_ln68_fu_709_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_928;
reg    ap_condition_932;
reg    ap_condition_936;
reg    ap_condition_940;
reg    ap_condition_944;
reg    ap_condition_949;
reg    ap_condition_953;
reg    ap_condition_957;
reg    ap_condition_961;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_321_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_108 <= add_ln43_fu_327_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_108 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_1_fu_152 <= 1'd0;
        end else if ((1'b1 == ap_condition_928)) begin
            seen_v_1_fu_152 <= seen_v_13_fu_727_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_2_fu_156 <= 1'd0;
        end else if ((1'b1 == ap_condition_928)) begin
            seen_v_2_fu_156 <= seen_v_14_fu_721_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_3_fu_160 <= 1'd0;
        end else if ((1'b1 == ap_condition_928)) begin
            seen_v_3_fu_160 <= seen_v_15_fu_715_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seen_v_fu_148 <= 1'd0;
        end else if ((1'b1 == ap_condition_928)) begin
            seen_v_fu_148 <= seen_v_12_fu_733_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tile_0_0_fu_124 <= p_read;
        end else if ((1'b1 == ap_condition_932)) begin
            tile_0_0_fu_124 <= or_ln62_1_fu_580_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tile_1_0_fu_120 <= p_read1;
        end else if ((1'b1 == ap_condition_936)) begin
            tile_1_0_fu_120 <= or_ln62_2_fu_554_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tile_2_0_fu_116 <= p_read2;
        end else if ((1'b1 == ap_condition_940)) begin
            tile_2_0_fu_116 <= or_ln62_3_fu_528_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tile_3_0_fu_112 <= p_read3;
        end else if ((1'b1 == ap_condition_944)) begin
            tile_3_0_fu_112 <= or_ln_fu_606_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            used_fu_128 <= 32'd0;
        end else if ((1'b1 == ap_condition_928)) begin
            used_fu_128 <= used_3_fu_739_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln43_reg_924 <= icmp_ln43_fu_321_p2;
        icmp_ln43_reg_924_pp0_iter1_reg <= icmp_ln43_reg_924;
        icmp_ln46_reg_932_pp0_iter1_reg <= icmp_ln46_reg_932;
        trunc_ln45_reg_928_pp0_iter1_reg <= trunc_ln45_reg_928;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln43_reg_924_pp0_iter2_reg <= icmp_ln43_reg_924_pp0_iter1_reg;
        icmp_ln43_reg_924_pp0_iter3_reg <= icmp_ln43_reg_924_pp0_iter2_reg;
        icmp_ln43_reg_924_pp0_iter4_reg <= icmp_ln43_reg_924_pp0_iter3_reg;
        icmp_ln43_reg_924_pp0_iter5_reg <= icmp_ln43_reg_924_pp0_iter4_reg;
        icmp_ln43_reg_924_pp0_iter6_reg <= icmp_ln43_reg_924_pp0_iter5_reg;
        icmp_ln43_reg_924_pp0_iter7_reg <= icmp_ln43_reg_924_pp0_iter6_reg;
        icmp_ln43_reg_924_pp0_iter8_reg <= icmp_ln43_reg_924_pp0_iter7_reg;
        icmp_ln46_reg_932_pp0_iter2_reg <= icmp_ln46_reg_932_pp0_iter1_reg;
        icmp_ln46_reg_932_pp0_iter3_reg <= icmp_ln46_reg_932_pp0_iter2_reg;
        icmp_ln46_reg_932_pp0_iter4_reg <= icmp_ln46_reg_932_pp0_iter3_reg;
        icmp_ln46_reg_932_pp0_iter5_reg <= icmp_ln46_reg_932_pp0_iter4_reg;
        icmp_ln46_reg_932_pp0_iter6_reg <= icmp_ln46_reg_932_pp0_iter5_reg;
        icmp_ln46_reg_932_pp0_iter7_reg <= icmp_ln46_reg_932_pp0_iter6_reg;
        icmp_ln46_reg_932_pp0_iter8_reg <= icmp_ln46_reg_932_pp0_iter7_reg;
        trunc_ln45_reg_928_pp0_iter2_reg <= trunc_ln45_reg_928_pp0_iter1_reg;
        trunc_ln45_reg_928_pp0_iter3_reg <= trunc_ln45_reg_928_pp0_iter2_reg;
        trunc_ln45_reg_928_pp0_iter4_reg <= trunc_ln45_reg_928_pp0_iter3_reg;
        trunc_ln45_reg_928_pp0_iter5_reg <= trunc_ln45_reg_928_pp0_iter4_reg;
        trunc_ln45_reg_928_pp0_iter6_reg <= trunc_ln45_reg_928_pp0_iter5_reg;
        trunc_ln45_reg_928_pp0_iter7_reg <= trunc_ln45_reg_928_pp0_iter6_reg;
        trunc_ln45_reg_928_pp0_iter8_reg <= trunc_ln45_reg_928_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_347_p2 == 1'd1) & (icmp_ln43_fu_321_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem1_addr_reg_942 <= sext_ln49_fu_407_p1;
        gmem2_addr_reg_936 <= sext_ln48_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op88_read_state9 == 1'b1))) begin
        gmem2_addr_read_reg_948 <= m_axi_gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_321_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln46_reg_932 <= icmp_ln46_fu_347_p2;
        trunc_ln45_reg_928 <= trunc_ln45_fu_333_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln67_fu_641_p2))) begin
        seen_y_1_fu_136 <= seen_y_10_fu_670_p3;
        seen_y_2_fu_140 <= seen_y_11_fu_683_p3;
        seen_y_3_fu_144 <= seen_y_12_fu_702_p3;
        seen_y_fu_132 <= seen_y_9_fu_657_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op89_read_state9 == 1'b1))) begin
        y_reg_956 <= m_axi_gmem1_RDATA;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_4 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_108;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op75_readreq_state2 == 1'b1))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op89_read_state9 == 1'b1))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_readreq_state2 == 1'b1))) begin
        gmem2_blk_n_AR = m_axi_gmem2_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op88_read_state9 == 1'b1))) begin
        gmem2_blk_n_R = m_axi_gmem2_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op75_readreq_state2 == 1'b1))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op89_read_state9 == 1'b1))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_readreq_state2 == 1'b1))) begin
        m_axi_gmem2_ARVALID = 1'b1;
    end else begin
        m_axi_gmem2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op88_read_state9 == 1'b1))) begin
        m_axi_gmem2_RREADY = 1'b1;
    end else begin
        m_axi_gmem2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_949)) begin
        if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd1)) begin
            tile_ref_0 = dup_1_fu_505_p2;
        end else if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd0)) begin
            tile_ref_0 = 1'd1;
        end else begin
            tile_ref_0 = 'bx;
        end
    end else begin
        tile_ref_0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd0) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd0) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd0) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tile_ref_0_ap_vld = 1'b1;
    end else begin
        tile_ref_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_953)) begin
        if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd1)) begin
            tile_ref_1 = dup_1_fu_505_p2;
        end else if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd0)) begin
            tile_ref_1 = 1'd1;
        end else begin
            tile_ref_1 = 'bx;
        end
    end else begin
        tile_ref_1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd0) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd1) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd1) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tile_ref_1_ap_vld = 1'b1;
    end else begin
        tile_ref_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_957)) begin
        if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd1)) begin
            tile_ref_2 = dup_1_fu_505_p2;
        end else if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd0)) begin
            tile_ref_2 = 1'd1;
        end else begin
            tile_ref_2 = 'bx;
        end
    end else begin
        tile_ref_2 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd0) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd2) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd2) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tile_ref_2_ap_vld = 1'b1;
    end else begin
        tile_ref_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_961)) begin
        if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd1)) begin
            tile_ref_3 = dup_1_fu_505_p2;
        end else if ((icmp_ln46_reg_932_pp0_iter8_reg == 1'd0)) begin
            tile_ref_3 = 1'd1;
        end else begin
            tile_ref_3 = 'bx;
        end
    end else begin
        tile_ref_3 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd0) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd3) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd3) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tile_ref_3_ap_vld = 1'b1;
    end else begin
        tile_ref_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_327_p2 = (ap_sig_allocacmp_i_4 + 3'd1);

assign add_ln48_fu_365_p2 = (zext_ln48_fu_361_p1 + a_val);

assign add_ln49_fu_391_p2 = (zext_ln48_fu_361_p1 + col_idx);

assign and_ln57_1_fu_476_p2 = (seen_v_2_fu_156 & icmp_ln57_2_fu_471_p2);

assign and_ln57_2_fu_487_p2 = (seen_v_3_fu_160 & icmp_ln57_3_fu_482_p2);

assign and_ln57_fu_465_p2 = (seen_v_1_fu_152 & icmp_ln57_1_fu_460_p2);

assign and_ln67_fu_641_p2 = (xor_ln67_fu_619_p2 & icmp_ln67_fu_635_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (((ap_predicate_op89_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op88_read_state9 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (((ap_predicate_op89_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op88_read_state9 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter8 == 1'b1) & (((ap_predicate_op89_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op88_read_state9 == 1'b1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((ap_predicate_op75_readreq_state2 == 1'b1) & (m_axi_gmem1_ARREADY == 1'b0)) | ((m_axi_gmem2_ARREADY == 1'b0) & (ap_predicate_op74_readreq_state2 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = (((ap_predicate_op89_read_state9 == 1'b1) & (m_axi_gmem1_RVALID == 1'b0)) | ((m_axi_gmem2_RVALID == 1'b0) & (ap_predicate_op88_read_state9 == 1'b1)));
end

always @ (*) begin
    ap_condition_928 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'd1 == and_ln67_fu_641_p2));
end

always @ (*) begin
    ap_condition_932 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd0) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_condition_936 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd1) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_condition_940 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd2) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_condition_944 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln46_reg_932_pp0_iter8_reg == 1'd1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd3) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_condition_949 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd0) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_953 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd1) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_957 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd2) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_961 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln45_reg_928_pp0_iter8_reg == 2'd3) & (icmp_ln43_reg_924_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op74_readreq_state2 = ((icmp_ln46_reg_932 == 1'd1) & (icmp_ln43_reg_924 == 1'd0));
end

always @ (*) begin
    ap_predicate_op75_readreq_state2 = ((icmp_ln46_reg_932 == 1'd1) & (icmp_ln43_reg_924 == 1'd0));
end

always @ (*) begin
    ap_predicate_op88_read_state9 = ((icmp_ln46_reg_932_pp0_iter7_reg == 1'd1) & (icmp_ln43_reg_924_pp0_iter7_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op89_read_state9 = ((icmp_ln46_reg_932_pp0_iter7_reg == 1'd1) & (icmp_ln43_reg_924_pp0_iter7_reg == 1'd0));
end

assign ap_return_0 = tile_0_0_fu_124;

assign ap_return_1 = tile_1_0_fu_120;

assign ap_return_2 = tile_2_0_fu_116;

assign ap_return_3 = tile_3_0_fu_112;

assign dup_1_fu_505_p2 = (or_ln57_fu_493_p2 | or_ln57_1_fu_499_p2);

assign dup_fu_454_p2 = (seen_v_fu_148 & icmp_ln57_fu_449_p2);

assign icmp_ln43_fu_321_p2 = ((ap_sig_allocacmp_i_4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_347_p2 = ((idx_fu_341_p2 < nnz) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_460_p2 = ((seen_y_1_fu_136 == y_reg_956) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_471_p2 = ((seen_y_2_fu_140 == y_reg_956) ? 1'b1 : 1'b0);

assign icmp_ln57_3_fu_482_p2 = ((seen_y_3_fu_144 == y_reg_956) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_449_p2 = ((seen_y_fu_132 == y_reg_956) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_635_p2 = (($signed(tmp_4_fu_625_p4) < $signed(30'd1)) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_664_p2 = ((trunc_ln68_fu_647_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_677_p2 = ((trunc_ln68_fu_647_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_651_p2 = ((trunc_ln68_fu_647_p1 == 2'd0) ? 1'b1 : 1'b0);

assign idx_fu_341_p2 = (zext_ln45_fu_337_p1 + pointer);

assign m_axi_gmem1_ARADDR = gmem1_addr_reg_942;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd1;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign m_axi_gmem2_ARADDR = gmem2_addr_reg_936;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd1;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_AWADDR = 64'd0;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 32'd0;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_AWVALID = 1'b0;

assign m_axi_gmem2_BREADY = 1'b0;

assign m_axi_gmem2_WDATA = 32'd0;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 4'd0;

assign m_axi_gmem2_WUSER = 1'd0;

assign m_axi_gmem2_WVALID = 1'b0;

assign or_ln57_1_fu_499_p2 = (dup_fu_454_p2 | and_ln57_2_fu_487_p2);

assign or_ln57_fu_493_p2 = (and_ln57_fu_465_p2 | and_ln57_1_fu_476_p2);

assign or_ln62_1_fu_580_p4 = {{{y_reg_956}, {tmp_1_fu_570_p4}}, {gmem2_addr_read_reg_948}};

assign or_ln62_2_fu_554_p4 = {{{y_reg_956}, {tmp_2_fu_544_p4}}, {gmem2_addr_read_reg_948}};

assign or_ln62_3_fu_528_p4 = {{{y_reg_956}, {tmp_3_fu_518_p4}}, {gmem2_addr_read_reg_948}};

assign or_ln68_1_fu_696_p2 = (or_ln68_fu_690_p2 | icmp_ln68_fu_651_p2);

assign or_ln68_fu_690_p2 = (icmp_ln68_2_fu_677_p2 | icmp_ln68_1_fu_664_p2);

assign or_ln_fu_606_p4 = {{{y_reg_956}, {tmp_fu_596_p4}}, {gmem2_addr_read_reg_948}};

assign seen_v_12_fu_733_p2 = (seen_v_fu_148 | icmp_ln68_fu_651_p2);

assign seen_v_13_fu_727_p2 = (seen_v_1_fu_152 | icmp_ln68_1_fu_664_p2);

assign seen_v_14_fu_721_p2 = (seen_v_2_fu_156 | icmp_ln68_2_fu_677_p2);

assign seen_v_15_fu_715_p2 = (xor_ln68_fu_709_p2 | seen_v_3_fu_160);

assign seen_y_10_fu_670_p3 = ((icmp_ln68_1_fu_664_p2[0:0] == 1'b1) ? y_reg_956 : seen_y_1_fu_136);

assign seen_y_11_fu_683_p3 = ((icmp_ln68_2_fu_677_p2[0:0] == 1'b1) ? y_reg_956 : seen_y_2_fu_140);

assign seen_y_12_fu_702_p3 = ((or_ln68_1_fu_696_p2[0:0] == 1'b1) ? seen_y_3_fu_144 : y_reg_956);

assign seen_y_9_fu_657_p3 = ((icmp_ln68_fu_651_p2[0:0] == 1'b1) ? y_reg_956 : seen_y_fu_132);

assign sext_ln48_fu_381_p1 = $signed(trunc_ln1_fu_371_p4);

assign sext_ln49_fu_407_p1 = $signed(trunc_ln2_fu_397_p4);

assign shl_ln_fu_353_p3 = {{idx_fu_341_p2}, {2'd0}};

assign tmp_1_fu_570_p4 = {{tile_0_0_fu_124[63:32]}};

assign tmp_2_fu_544_p4 = {{tile_1_0_fu_120[63:32]}};

assign tmp_3_fu_518_p4 = {{tile_2_0_fu_116[63:32]}};

assign tmp_4_fu_625_p4 = {{used_fu_128[31:2]}};

assign tmp_fu_596_p4 = {{tile_3_0_fu_112[63:32]}};

assign trunc_ln1_fu_371_p4 = {{add_ln48_fu_365_p2[63:2]}};

assign trunc_ln2_fu_397_p4 = {{add_ln49_fu_391_p2[63:2]}};

assign trunc_ln45_fu_333_p1 = ap_sig_allocacmp_i_4[1:0];

assign trunc_ln68_fu_647_p1 = used_fu_128[1:0];

assign used_3_fu_739_p2 = (used_fu_128 + 32'd1);

assign xor_ln67_fu_619_p2 = (dup_1_fu_505_p2 ^ 1'd1);

assign xor_ln68_fu_709_p2 = (or_ln68_1_fu_696_p2 ^ 1'd1);

assign zext_ln45_fu_337_p1 = trunc_ln45_fu_333_p1;

assign zext_ln48_fu_361_p1 = shl_ln_fu_353_p3;

endmodule //spmm_hls_set_tile
