// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_47_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        map_buf_0_load,
        map_buf_0,
        map_buf_0_ap_vld,
        map_buf_15,
        map_buf_15_ap_vld,
        map_buf_14,
        map_buf_14_ap_vld,
        map_buf_13,
        map_buf_13_ap_vld,
        map_buf_12,
        map_buf_12_ap_vld,
        map_buf_11,
        map_buf_11_ap_vld,
        map_buf_10,
        map_buf_10_ap_vld,
        map_buf_9,
        map_buf_9_ap_vld,
        map_buf_8,
        map_buf_8_ap_vld,
        map_buf_7,
        map_buf_7_ap_vld,
        map_buf_6,
        map_buf_6_ap_vld,
        map_buf_5,
        map_buf_5_ap_vld,
        map_buf_4,
        map_buf_4_ap_vld,
        map_buf_3,
        map_buf_3_ap_vld,
        map_buf_2,
        map_buf_2_ap_vld,
        map_buf_1,
        map_buf_1_ap_vld,
        map_buf_0_loc_0_out,
        map_buf_0_loc_0_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] map_buf_0_load;
output  [31:0] map_buf_0;
output   map_buf_0_ap_vld;
output  [3:0] map_buf_15;
output   map_buf_15_ap_vld;
output  [1:0] map_buf_14;
output   map_buf_14_ap_vld;
output  [2:0] map_buf_13;
output   map_buf_13_ap_vld;
output  [2:0] map_buf_12;
output   map_buf_12_ap_vld;
output  [3:0] map_buf_11;
output   map_buf_11_ap_vld;
output  [3:0] map_buf_10;
output   map_buf_10_ap_vld;
output  [3:0] map_buf_9;
output   map_buf_9_ap_vld;
output  [3:0] map_buf_8;
output   map_buf_8_ap_vld;
output  [0:0] map_buf_7;
output   map_buf_7_ap_vld;
output  [1:0] map_buf_6;
output   map_buf_6_ap_vld;
output  [2:0] map_buf_5;
output   map_buf_5_ap_vld;
output  [2:0] map_buf_4;
output   map_buf_4_ap_vld;
output  [0:0] map_buf_3;
output   map_buf_3_ap_vld;
output  [1:0] map_buf_2;
output   map_buf_2_ap_vld;
output  [0:0] map_buf_1;
output   map_buf_1_ap_vld;
output  [31:0] map_buf_0_loc_0_out;
output   map_buf_0_loc_0_out_ap_vld;

reg ap_idle;
reg map_buf_0_ap_vld;
reg map_buf_15_ap_vld;
reg map_buf_14_ap_vld;
reg map_buf_13_ap_vld;
reg map_buf_12_ap_vld;
reg map_buf_11_ap_vld;
reg map_buf_10_ap_vld;
reg map_buf_9_ap_vld;
reg map_buf_8_ap_vld;
reg map_buf_7_ap_vld;
reg map_buf_6_ap_vld;
reg map_buf_5_ap_vld;
reg map_buf_4_ap_vld;
reg map_buf_3_ap_vld;
reg map_buf_2_ap_vld;
reg map_buf_1_ap_vld;
reg[31:0] map_buf_0_loc_0_out;
reg map_buf_0_loc_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln47_fu_258_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] zext_ln49_fu_275_p1;
wire    ap_loop_init;
wire   [3:0] trunc_ln49_fu_270_p1;
reg   [4:0] i_fu_108;
wire   [4:0] add_ln47_fu_264_p2;
reg   [4:0] ap_sig_allocacmp_i_5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln47_fu_258_p2 == 1'd0)) begin
            i_fu_108 <= add_ln47_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_108 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_5 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_108;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd0) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_0_ap_vld = 1'b1;
    end else begin
        map_buf_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((trunc_ln49_fu_270_p1 == 4'd0) & (icmp_ln47_fu_258_p2 == 1'd0))) begin
            map_buf_0_loc_0_out = zext_ln49_fu_275_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            map_buf_0_loc_0_out = map_buf_0_load;
        end else begin
            map_buf_0_loc_0_out = 'bx;
        end
    end else begin
        map_buf_0_loc_0_out = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln49_fu_270_p1 == 4'd0) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        map_buf_0_loc_0_out_ap_vld = 1'b1;
    end else begin
        map_buf_0_loc_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd10) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_10_ap_vld = 1'b1;
    end else begin
        map_buf_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd11) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_11_ap_vld = 1'b1;
    end else begin
        map_buf_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd12) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_12_ap_vld = 1'b1;
    end else begin
        map_buf_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd13) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_13_ap_vld = 1'b1;
    end else begin
        map_buf_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd14) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_14_ap_vld = 1'b1;
    end else begin
        map_buf_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd15) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_15_ap_vld = 1'b1;
    end else begin
        map_buf_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd1) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_1_ap_vld = 1'b1;
    end else begin
        map_buf_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd2) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_2_ap_vld = 1'b1;
    end else begin
        map_buf_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd3) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_3_ap_vld = 1'b1;
    end else begin
        map_buf_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd4) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_4_ap_vld = 1'b1;
    end else begin
        map_buf_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd5) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_5_ap_vld = 1'b1;
    end else begin
        map_buf_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd6) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_6_ap_vld = 1'b1;
    end else begin
        map_buf_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd7) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_7_ap_vld = 1'b1;
    end else begin
        map_buf_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd8) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_8_ap_vld = 1'b1;
    end else begin
        map_buf_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln49_fu_270_p1 == 4'd9) & (icmp_ln47_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        map_buf_9_ap_vld = 1'b1;
    end else begin
        map_buf_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_fu_264_p2 = (ap_sig_allocacmp_i_5 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln47_fu_258_p2 = ((ap_sig_allocacmp_i_5 == 5'd16) ? 1'b1 : 1'b0);

assign map_buf_0 = trunc_ln49_fu_270_p1;

assign map_buf_1 = 1'd1;

assign map_buf_10 = 4'd10;

assign map_buf_11 = 4'd11;

assign map_buf_12 = 3'd4;

assign map_buf_13 = 3'd5;

assign map_buf_14 = 2'd2;

assign map_buf_15 = trunc_ln49_fu_270_p1;

assign map_buf_2 = 2'd2;

assign map_buf_3 = 1'd1;

assign map_buf_4 = 3'd4;

assign map_buf_5 = 3'd5;

assign map_buf_6 = 2'd2;

assign map_buf_7 = 1'd1;

assign map_buf_8 = 4'd8;

assign map_buf_9 = 4'd9;

assign trunc_ln49_fu_270_p1 = ap_sig_allocacmp_i_5[3:0];

assign zext_ln49_fu_275_p1 = trunc_ln49_fu_270_p1;

endmodule //spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_47_1
