// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_pe_Pipeline_VITIS_LOOP_79_173 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        len_assign_1,
        out_buf_7_address0,
        out_buf_7_ce0,
        out_buf_7_we0,
        out_buf_7_d0,
        out_buf_6_address0,
        out_buf_6_ce0,
        out_buf_6_we0,
        out_buf_6_d0,
        out_buf_5_address0,
        out_buf_5_ce0,
        out_buf_5_we0,
        out_buf_5_d0,
        out_buf_4_address0,
        out_buf_4_ce0,
        out_buf_4_we0,
        out_buf_4_d0,
        out_buf_3_address0,
        out_buf_3_ce0,
        out_buf_3_we0,
        out_buf_3_d0,
        out_buf_2_address0,
        out_buf_2_ce0,
        out_buf_2_we0,
        out_buf_2_d0,
        out_buf_1_address0,
        out_buf_1_ce0,
        out_buf_1_we0,
        out_buf_1_d0,
        out_buf_0_address0,
        out_buf_0_ce0,
        out_buf_0_we0,
        out_buf_0_d0,
        add_ln100,
        dense_buf_0_address0,
        dense_buf_0_ce0,
        dense_buf_0_q0,
        dense_buf_1_address0,
        dense_buf_1_ce0,
        dense_buf_1_q0,
        dense_buf_2_address0,
        dense_buf_2_ce0,
        dense_buf_2_q0,
        dense_buf_3_address0,
        dense_buf_3_ce0,
        dense_buf_3_q0,
        dense_buf_4_address0,
        dense_buf_4_ce0,
        dense_buf_4_q0,
        dense_buf_5_address0,
        dense_buf_5_ce0,
        dense_buf_5_q0,
        dense_buf_6_address0,
        dense_buf_6_ce0,
        dense_buf_6_q0,
        dense_buf_7_address0,
        dense_buf_7_ce0,
        dense_buf_7_q0,
        add_ln81_8,
        conv_i_i,
        add_ln100_1,
        add_ln81_9,
        grp_fu_1241_p_din0,
        grp_fu_1241_p_din1,
        grp_fu_1241_p_dout0,
        grp_fu_1241_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] len_assign_1;
output  [12:0] out_buf_7_address0;
output   out_buf_7_ce0;
output   out_buf_7_we0;
output  [31:0] out_buf_7_d0;
output  [12:0] out_buf_6_address0;
output   out_buf_6_ce0;
output   out_buf_6_we0;
output  [31:0] out_buf_6_d0;
output  [12:0] out_buf_5_address0;
output   out_buf_5_ce0;
output   out_buf_5_we0;
output  [31:0] out_buf_5_d0;
output  [12:0] out_buf_4_address0;
output   out_buf_4_ce0;
output   out_buf_4_we0;
output  [31:0] out_buf_4_d0;
output  [12:0] out_buf_3_address0;
output   out_buf_3_ce0;
output   out_buf_3_we0;
output  [31:0] out_buf_3_d0;
output  [12:0] out_buf_2_address0;
output   out_buf_2_ce0;
output   out_buf_2_we0;
output  [31:0] out_buf_2_d0;
output  [12:0] out_buf_1_address0;
output   out_buf_1_ce0;
output   out_buf_1_we0;
output  [31:0] out_buf_1_d0;
output  [12:0] out_buf_0_address0;
output   out_buf_0_ce0;
output   out_buf_0_we0;
output  [31:0] out_buf_0_d0;
input  [19:0] add_ln100;
output  [16:0] dense_buf_0_address0;
output   dense_buf_0_ce0;
input  [31:0] dense_buf_0_q0;
output  [16:0] dense_buf_1_address0;
output   dense_buf_1_ce0;
input  [31:0] dense_buf_1_q0;
output  [16:0] dense_buf_2_address0;
output   dense_buf_2_ce0;
input  [31:0] dense_buf_2_q0;
output  [16:0] dense_buf_3_address0;
output   dense_buf_3_ce0;
input  [31:0] dense_buf_3_q0;
output  [16:0] dense_buf_4_address0;
output   dense_buf_4_ce0;
input  [31:0] dense_buf_4_q0;
output  [16:0] dense_buf_5_address0;
output   dense_buf_5_ce0;
input  [31:0] dense_buf_5_q0;
output  [16:0] dense_buf_6_address0;
output   dense_buf_6_ce0;
input  [31:0] dense_buf_6_q0;
output  [16:0] dense_buf_7_address0;
output   dense_buf_7_ce0;
input  [31:0] dense_buf_7_q0;
input  [2:0] add_ln81_8;
input  [31:0] conv_i_i;
input  [15:0] add_ln100_1;
input  [2:0] add_ln81_9;
output  [31:0] grp_fu_1241_p_din0;
output  [31:0] grp_fu_1241_p_din1;
input  [31:0] grp_fu_1241_p_dout0;
output   grp_fu_1241_p_ce;

reg ap_idle;
reg out_buf_7_ce0;
reg out_buf_7_we0;
reg out_buf_6_ce0;
reg out_buf_6_we0;
reg out_buf_5_ce0;
reg out_buf_5_we0;
reg out_buf_4_ce0;
reg out_buf_4_we0;
reg out_buf_3_ce0;
reg out_buf_3_we0;
reg out_buf_2_ce0;
reg out_buf_2_we0;
reg out_buf_1_ce0;
reg out_buf_1_we0;
reg out_buf_0_ce0;
reg out_buf_0_we0;
reg dense_buf_0_ce0;
reg dense_buf_1_ce0;
reg dense_buf_2_ce0;
reg dense_buf_3_ce0;
reg dense_buf_4_ce0;
reg dense_buf_5_ce0;
reg dense_buf_6_ce0;
reg dense_buf_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln79_fu_362_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln81_1_fu_414_p2;
reg   [2:0] add_ln81_1_reg_535;
reg   [12:0] lshr_ln81_3_reg_540;
reg   [12:0] lshr_ln81_3_reg_540_pp0_iter1_reg;
reg   [12:0] lshr_ln81_3_reg_540_pp0_iter2_reg;
reg   [12:0] lshr_ln81_3_reg_540_pp0_iter3_reg;
reg   [12:0] lshr_ln81_3_reg_540_pp0_iter4_reg;
reg   [12:0] lshr_ln81_3_reg_540_pp0_iter5_reg;
wire   [2:0] add_ln81_3_fu_436_p2;
reg   [2:0] add_ln81_3_reg_545;
reg   [2:0] add_ln81_3_reg_545_pp0_iter1_reg;
reg   [2:0] add_ln81_3_reg_545_pp0_iter2_reg;
reg   [2:0] add_ln81_3_reg_545_pp0_iter3_reg;
reg   [2:0] add_ln81_3_reg_545_pp0_iter4_reg;
reg   [2:0] add_ln81_3_reg_545_pp0_iter5_reg;
wire   [31:0] i_op_assign_1_fu_447_p10;
reg   [31:0] i_op_assign_1_reg_549;
reg   [31:0] mul_i_i1_reg_554;
wire   [63:0] zext_ln81_fu_402_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln81_1_fu_468_p1;
reg   [30:0] i_fu_98;
wire   [30:0] add_ln79_fu_368_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
wire   [31:0] zext_ln79_fu_358_p1;
wire   [19:0] trunc_ln79_1_fu_378_p1;
wire   [19:0] add_ln81_fu_386_p2;
wire   [16:0] lshr_ln81_2_fu_392_p4;
wire   [2:0] trunc_ln81_fu_382_p1;
wire   [15:0] trunc_ln79_fu_374_p1;
wire   [15:0] add_ln81_2_fu_420_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spmm_hls_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U170(
    .din0(dense_buf_0_q0),
    .din1(dense_buf_1_q0),
    .din2(dense_buf_2_q0),
    .din3(dense_buf_3_q0),
    .din4(dense_buf_4_q0),
    .din5(dense_buf_5_q0),
    .din6(dense_buf_6_q0),
    .din7(dense_buf_7_q0),
    .din8(add_ln81_1_reg_535),
    .dout(i_op_assign_1_fu_447_p10)
);

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln79_fu_362_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_98 <= add_ln79_fu_368_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_98 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln81_1_reg_535 <= add_ln81_1_fu_414_p2;
        add_ln81_3_reg_545 <= add_ln81_3_fu_436_p2;
        lshr_ln81_3_reg_540 <= {{add_ln81_2_fu_420_p2[15:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln81_3_reg_545_pp0_iter1_reg <= add_ln81_3_reg_545;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_op_assign_1_reg_549 <= i_op_assign_1_fu_447_p10;
        lshr_ln81_3_reg_540_pp0_iter1_reg <= lshr_ln81_3_reg_540;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln81_3_reg_545_pp0_iter2_reg <= add_ln81_3_reg_545_pp0_iter1_reg;
        add_ln81_3_reg_545_pp0_iter3_reg <= add_ln81_3_reg_545_pp0_iter2_reg;
        add_ln81_3_reg_545_pp0_iter4_reg <= add_ln81_3_reg_545_pp0_iter3_reg;
        add_ln81_3_reg_545_pp0_iter5_reg <= add_ln81_3_reg_545_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        lshr_ln81_3_reg_540_pp0_iter2_reg <= lshr_ln81_3_reg_540_pp0_iter1_reg;
        lshr_ln81_3_reg_540_pp0_iter3_reg <= lshr_ln81_3_reg_540_pp0_iter2_reg;
        lshr_ln81_3_reg_540_pp0_iter4_reg <= lshr_ln81_3_reg_540_pp0_iter3_reg;
        lshr_ln81_3_reg_540_pp0_iter5_reg <= lshr_ln81_3_reg_540_pp0_iter4_reg;
        mul_i_i1_reg_554 <= grp_fu_1241_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_362_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_0_ce0 = 1'b1;
    end else begin
        dense_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_1_ce0 = 1'b1;
    end else begin
        dense_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_2_ce0 = 1'b1;
    end else begin
        dense_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_3_ce0 = 1'b1;
    end else begin
        dense_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_4_ce0 = 1'b1;
    end else begin
        dense_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_5_ce0 = 1'b1;
    end else begin
        dense_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_6_ce0 = 1'b1;
    end else begin
        dense_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_buf_7_ce0 = 1'b1;
    end else begin
        dense_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_0_ce0 = 1'b1;
    end else begin
        out_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd0 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_0_we0 = 1'b1;
    end else begin
        out_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_1_ce0 = 1'b1;
    end else begin
        out_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd1 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_1_we0 = 1'b1;
    end else begin
        out_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_2_ce0 = 1'b1;
    end else begin
        out_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd2 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_2_we0 = 1'b1;
    end else begin
        out_buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_3_ce0 = 1'b1;
    end else begin
        out_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd3 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_3_we0 = 1'b1;
    end else begin
        out_buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_4_ce0 = 1'b1;
    end else begin
        out_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd4 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_4_we0 = 1'b1;
    end else begin
        out_buf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_5_ce0 = 1'b1;
    end else begin
        out_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd5 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_5_we0 = 1'b1;
    end else begin
        out_buf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_6_ce0 = 1'b1;
    end else begin
        out_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd6 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_6_we0 = 1'b1;
    end else begin
        out_buf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_buf_7_ce0 = 1'b1;
    end else begin
        out_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (3'd7 == add_ln81_3_reg_545_pp0_iter5_reg))) begin
        out_buf_7_we0 = 1'b1;
    end else begin
        out_buf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln79_fu_368_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign add_ln81_1_fu_414_p2 = (trunc_ln81_fu_382_p1 + add_ln81_8);

assign add_ln81_2_fu_420_p2 = (trunc_ln79_fu_374_p1 + add_ln100_1);

assign add_ln81_3_fu_436_p2 = (trunc_ln81_fu_382_p1 + add_ln81_9);

assign add_ln81_fu_386_p2 = (trunc_ln79_1_fu_378_p1 + add_ln100);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dense_buf_0_address0 = zext_ln81_fu_402_p1;

assign dense_buf_1_address0 = zext_ln81_fu_402_p1;

assign dense_buf_2_address0 = zext_ln81_fu_402_p1;

assign dense_buf_3_address0 = zext_ln81_fu_402_p1;

assign dense_buf_4_address0 = zext_ln81_fu_402_p1;

assign dense_buf_5_address0 = zext_ln81_fu_402_p1;

assign dense_buf_6_address0 = zext_ln81_fu_402_p1;

assign dense_buf_7_address0 = zext_ln81_fu_402_p1;

assign grp_fu_1241_p_ce = 1'b1;

assign grp_fu_1241_p_din0 = conv_i_i;

assign grp_fu_1241_p_din1 = i_op_assign_1_reg_549;

assign icmp_ln79_fu_362_p2 = (($signed(zext_ln79_fu_358_p1) < $signed(len_assign_1)) ? 1'b1 : 1'b0);

assign lshr_ln81_2_fu_392_p4 = {{add_ln81_fu_386_p2[19:3]}};

assign out_buf_0_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_0_d0 = mul_i_i1_reg_554;

assign out_buf_1_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_1_d0 = mul_i_i1_reg_554;

assign out_buf_2_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_2_d0 = mul_i_i1_reg_554;

assign out_buf_3_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_3_d0 = mul_i_i1_reg_554;

assign out_buf_4_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_4_d0 = mul_i_i1_reg_554;

assign out_buf_5_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_5_d0 = mul_i_i1_reg_554;

assign out_buf_6_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_6_d0 = mul_i_i1_reg_554;

assign out_buf_7_address0 = zext_ln81_1_fu_468_p1;

assign out_buf_7_d0 = mul_i_i1_reg_554;

assign trunc_ln79_1_fu_378_p1 = ap_sig_allocacmp_i_1[19:0];

assign trunc_ln79_fu_374_p1 = ap_sig_allocacmp_i_1[15:0];

assign trunc_ln81_fu_382_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln79_fu_358_p1 = ap_sig_allocacmp_i_1;

assign zext_ln81_1_fu_468_p1 = lshr_ln81_3_reg_540_pp0_iter5_reg;

assign zext_ln81_fu_402_p1 = lshr_ln81_2_fu_392_p4;

endmodule //spmm_hls_pe_Pipeline_VITIS_LOOP_79_173
