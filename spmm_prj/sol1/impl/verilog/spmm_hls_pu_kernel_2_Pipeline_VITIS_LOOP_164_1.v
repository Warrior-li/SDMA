// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_pu_kernel_2_Pipeline_VITIS_LOOP_164_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tile_value_address0,
        tile_value_ce0,
        tile_value_q0,
        tile_y_address0,
        tile_y_ce0,
        tile_y_q0,
        Dbuf_address0,
        Dbuf_ce0,
        Dbuf_q0,
        trunc_ln
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] tile_value_address0;
output   tile_value_ce0;
input  [31:0] tile_value_q0;
output  [1:0] tile_y_address0;
output   tile_y_ce0;
input  [31:0] tile_y_q0;
output  [15:0] Dbuf_address0;
output   Dbuf_ce0;
input  [31:0] Dbuf_q0;
input  [29:0] trunc_ln;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tile_value_ce0;
reg tile_y_ce0;
reg Dbuf_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln164_fu_109_p2;
reg   [31:0] tile_value_load_reg_162;
wire    ap_CS_fsm_state3;
wire   [15:0] empty_49_fu_132_p1;
reg   [15:0] empty_49_reg_167;
reg    resA_ce0;
reg    resA_we0;
reg    resB_ce0;
reg    resB_we0;
wire    grp_pu_comp_fu_90_ap_start;
wire    grp_pu_comp_fu_90_ap_done;
wire    grp_pu_comp_fu_90_ap_idle;
wire    grp_pu_comp_fu_90_ap_ready;
wire   [15:0] grp_pu_comp_fu_90_res_address0;
wire    grp_pu_comp_fu_90_res_ce0;
wire    grp_pu_comp_fu_90_res_we0;
wire   [31:0] grp_pu_comp_fu_90_res_d0;
wire   [15:0] grp_pu_comp_fu_90_Dbuf_address0;
wire    grp_pu_comp_fu_90_Dbuf_ce0;
reg    grp_pu_comp_fu_90_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire   [63:0] i_3_cast_i_fu_115_p1;
reg   [1:0] i_3_fu_46;
wire   [1:0] add_ln164_fu_121_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_pu_comp_fu_90_ap_start_reg = 1'b0;
end

spmm_hls_pu_kernel_2_Pipeline_VITIS_LOOP_164_1_resA_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 61278 ),
    .AddressWidth( 16 ))
resA_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_pu_comp_fu_90_res_address0),
    .ce0(resA_ce0),
    .we0(resA_we0),
    .d0(grp_pu_comp_fu_90_res_d0)
);

spmm_hls_pu_kernel_2_Pipeline_VITIS_LOOP_164_1_resA_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 61278 ),
    .AddressWidth( 16 ))
resB_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_pu_comp_fu_90_res_address0),
    .ce0(resB_ce0),
    .we0(resB_we0),
    .d0(grp_pu_comp_fu_90_res_d0)
);

spmm_hls_pu_comp grp_pu_comp_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pu_comp_fu_90_ap_start),
    .ap_done(grp_pu_comp_fu_90_ap_done),
    .ap_idle(grp_pu_comp_fu_90_ap_idle),
    .ap_ready(grp_pu_comp_fu_90_ap_ready),
    .res_address0(grp_pu_comp_fu_90_res_address0),
    .res_ce0(grp_pu_comp_fu_90_res_ce0),
    .res_we0(grp_pu_comp_fu_90_res_we0),
    .res_d0(grp_pu_comp_fu_90_res_d0),
    .a_value(tile_value_load_reg_162),
    .a_y(empty_49_reg_167),
    .Dbuf_address0(grp_pu_comp_fu_90_Dbuf_address0),
    .Dbuf_ce0(grp_pu_comp_fu_90_Dbuf_ce0),
    .Dbuf_q0(Dbuf_q0),
    .K(trunc_ln)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pu_comp_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_pu_comp_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_pu_comp_fu_90_ap_ready == 1'b1)) begin
            grp_pu_comp_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_3_fu_46 <= 2'd1;
    end else if (((icmp_ln164_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_3_fu_46 <= add_ln164_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_49_reg_167 <= empty_49_fu_132_p1;
        tile_value_load_reg_162 <= tile_value_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        Dbuf_ce0 = grp_pu_comp_fu_90_Dbuf_ce0;
    end else begin
        Dbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_pu_comp_fu_90_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_pu_comp_fu_90_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln164_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln164_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        resA_ce0 = grp_pu_comp_fu_90_res_ce0;
    end else begin
        resA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        resA_we0 = grp_pu_comp_fu_90_res_we0;
    end else begin
        resA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        resB_ce0 = grp_pu_comp_fu_90_res_ce0;
    end else begin
        resB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        resB_we0 = grp_pu_comp_fu_90_res_we0;
    end else begin
        resB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tile_value_ce0 = 1'b1;
    end else begin
        tile_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tile_y_ce0 = 1'b1;
    end else begin
        tile_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln164_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_pu_comp_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_pu_comp_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Dbuf_address0 = grp_pu_comp_fu_90_Dbuf_address0;

assign add_ln164_fu_121_p2 = (i_3_fu_46 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_49_fu_132_p1 = tile_y_q0[15:0];

assign grp_pu_comp_fu_90_ap_start = grp_pu_comp_fu_90_ap_start_reg;

assign i_3_cast_i_fu_115_p1 = i_3_fu_46;

assign icmp_ln164_fu_109_p2 = ((i_3_fu_46 == 2'd3) ? 1'b1 : 1'b0);

assign tile_value_address0 = i_3_cast_i_fu_115_p1;

assign tile_y_address0 = i_3_cast_i_fu_115_p1;

endmodule //spmm_hls_pu_kernel_2_Pipeline_VITIS_LOOP_164_1
