// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_pe_kernel_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        dense_buf_0_address0,
        dense_buf_0_ce0,
        dense_buf_0_q0,
        dense_buf_1_address0,
        dense_buf_1_ce0,
        dense_buf_1_q0,
        dense_buf_2_address0,
        dense_buf_2_ce0,
        dense_buf_2_q0,
        dense_buf_3_address0,
        dense_buf_3_ce0,
        dense_buf_3_q0,
        dense_buf_4_address0,
        dense_buf_4_ce0,
        dense_buf_4_q0,
        dense_buf_5_address0,
        dense_buf_5_ce0,
        dense_buf_5_q0,
        dense_buf_6_address0,
        dense_buf_6_ce0,
        dense_buf_6_q0,
        dense_buf_7_address0,
        dense_buf_7_ce0,
        dense_buf_7_q0,
        out_buf_0_address1,
        out_buf_0_ce1,
        out_buf_0_we1,
        out_buf_0_d1,
        out_buf_1_address1,
        out_buf_1_ce1,
        out_buf_1_we1,
        out_buf_1_d1,
        out_buf_2_address1,
        out_buf_2_ce1,
        out_buf_2_we1,
        out_buf_2_d1,
        out_buf_3_address1,
        out_buf_3_ce1,
        out_buf_3_we1,
        out_buf_3_d1,
        out_buf_4_address1,
        out_buf_4_ce1,
        out_buf_4_we1,
        out_buf_4_d1,
        out_buf_5_address1,
        out_buf_5_ce1,
        out_buf_5_we1,
        out_buf_5_d1,
        out_buf_6_address1,
        out_buf_6_ce1,
        out_buf_6_we1,
        out_buf_6_d1,
        out_buf_7_address1,
        out_buf_7_ce1,
        out_buf_7_we1,
        out_buf_7_d1,
        len,
        idx1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state12 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [16:0] dense_buf_0_address0;
output   dense_buf_0_ce0;
input  [31:0] dense_buf_0_q0;
output  [16:0] dense_buf_1_address0;
output   dense_buf_1_ce0;
input  [31:0] dense_buf_1_q0;
output  [16:0] dense_buf_2_address0;
output   dense_buf_2_ce0;
input  [31:0] dense_buf_2_q0;
output  [16:0] dense_buf_3_address0;
output   dense_buf_3_ce0;
input  [31:0] dense_buf_3_q0;
output  [16:0] dense_buf_4_address0;
output   dense_buf_4_ce0;
input  [31:0] dense_buf_4_q0;
output  [16:0] dense_buf_5_address0;
output   dense_buf_5_ce0;
input  [31:0] dense_buf_5_q0;
output  [16:0] dense_buf_6_address0;
output   dense_buf_6_ce0;
input  [31:0] dense_buf_6_q0;
output  [16:0] dense_buf_7_address0;
output   dense_buf_7_ce0;
input  [31:0] dense_buf_7_q0;
output  [12:0] out_buf_0_address1;
output   out_buf_0_ce1;
output   out_buf_0_we1;
output  [31:0] out_buf_0_d1;
output  [12:0] out_buf_1_address1;
output   out_buf_1_ce1;
output   out_buf_1_we1;
output  [31:0] out_buf_1_d1;
output  [12:0] out_buf_2_address1;
output   out_buf_2_ce1;
output   out_buf_2_we1;
output  [31:0] out_buf_2_d1;
output  [12:0] out_buf_3_address1;
output   out_buf_3_ce1;
output   out_buf_3_we1;
output  [31:0] out_buf_3_d1;
output  [12:0] out_buf_4_address1;
output   out_buf_4_ce1;
output   out_buf_4_we1;
output  [31:0] out_buf_4_d1;
output  [12:0] out_buf_5_address1;
output   out_buf_5_ce1;
output   out_buf_5_we1;
output  [31:0] out_buf_5_d1;
output  [12:0] out_buf_6_address1;
output   out_buf_6_ce1;
output   out_buf_6_we1;
output  [31:0] out_buf_6_d1;
output  [12:0] out_buf_7_address1;
output   out_buf_7_ce1;
output   out_buf_7_we1;
output  [31:0] out_buf_7_d1;
input  [31:0] len;
input  [15:0] idx1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dense_buf_0_ce0;
reg dense_buf_1_ce0;
reg dense_buf_2_ce0;
reg dense_buf_3_ce0;
reg dense_buf_4_ce0;
reg dense_buf_5_ce0;
reg dense_buf_6_ce0;
reg dense_buf_7_ce0;
reg out_buf_0_ce1;
reg out_buf_0_we1;
reg out_buf_1_ce1;
reg out_buf_1_we1;
reg out_buf_2_ce1;
reg out_buf_2_we1;
reg out_buf_3_ce1;
reg out_buf_3_we1;
reg out_buf_4_ce1;
reg out_buf_4_we1;
reg out_buf_5_ce1;
reg out_buf_5_we1;
reg out_buf_6_ce1;
reg out_buf_6_we1;
reg out_buf_7_ce1;
reg out_buf_7_we1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_360_p1;
reg   [31:0] conv_i_reg_500;
wire   [2:0] trunc_ln82_fu_369_p1;
reg   [2:0] trunc_ln82_reg_505;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln80_fu_380_p2;
wire   [2:0] trunc_ln82_1_fu_417_p1;
reg   [2:0] trunc_ln82_1_reg_553;
reg   [12:0] lshr_ln82_1_reg_558;
reg   [12:0] lshr_ln82_1_reg_558_pp0_iter1_reg;
reg   [12:0] lshr_ln82_1_reg_558_pp0_iter2_reg;
reg   [12:0] lshr_ln82_1_reg_558_pp0_iter3_reg;
reg   [12:0] lshr_ln82_1_reg_558_pp0_iter4_reg;
reg   [12:0] lshr_ln82_1_reg_558_pp0_iter5_reg;
wire   [2:0] add_ln82_1_fu_436_p2;
reg   [2:0] add_ln82_1_reg_563;
reg   [2:0] add_ln82_1_reg_563_pp0_iter1_reg;
reg   [2:0] add_ln82_1_reg_563_pp0_iter2_reg;
reg   [2:0] add_ln82_1_reg_563_pp0_iter3_reg;
reg   [2:0] add_ln82_1_reg_563_pp0_iter4_reg;
reg   [2:0] add_ln82_1_reg_563_pp0_iter5_reg;
wire   [31:0] i_op_assign_fu_446_p10;
reg   [31:0] i_op_assign_reg_567;
wire   [31:0] grp_fu_356_p2;
reg   [31:0] mul_i_reg_572;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire   [63:0] zext_ln82_fu_405_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln82_1_fu_467_p1;
reg   [30:0] i_fu_94;
wire   [30:0] add_ln80_fu_385_p2;
wire   [31:0] zext_ln80_fu_376_p1;
wire   [16:0] lshr_ln_fu_395_p4;
wire   [15:0] trunc_ln80_fu_391_p1;
wire   [15:0] add_ln82_fu_421_p2;
wire    ap_CS_fsm_state12;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

spmm_hls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_i_reg_500),
    .din1(i_op_assign_reg_567),
    .ce(1'b1),
    .dout(grp_fu_356_p2)
);

spmm_hls_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .ce(1'b1),
    .dout(grp_fu_360_p1)
);

spmm_hls_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U146(
    .din0(dense_buf_0_q0),
    .din1(dense_buf_1_q0),
    .din2(dense_buf_2_q0),
    .din3(dense_buf_3_q0),
    .din4(dense_buf_4_q0),
    .din5(dense_buf_5_q0),
    .din6(dense_buf_6_q0),
    .din7(dense_buf_7_q0),
    .din8(trunc_ln82_1_reg_553),
    .dout(i_op_assign_fu_446_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_94 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_fu_380_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_94 <= add_ln80_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_fu_380_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln82_1_reg_563 <= add_ln82_1_fu_436_p2;
        lshr_ln82_1_reg_558 <= {{add_ln82_fu_421_p2[15:3]}};
        trunc_ln82_1_reg_553 <= trunc_ln82_1_fu_417_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln82_1_reg_563_pp0_iter1_reg <= add_ln82_1_reg_563;
        i_op_assign_reg_567 <= i_op_assign_fu_446_p10;
        lshr_ln82_1_reg_558_pp0_iter1_reg <= lshr_ln82_1_reg_558;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln82_1_reg_563_pp0_iter2_reg <= add_ln82_1_reg_563_pp0_iter1_reg;
        add_ln82_1_reg_563_pp0_iter3_reg <= add_ln82_1_reg_563_pp0_iter2_reg;
        add_ln82_1_reg_563_pp0_iter4_reg <= add_ln82_1_reg_563_pp0_iter3_reg;
        add_ln82_1_reg_563_pp0_iter5_reg <= add_ln82_1_reg_563_pp0_iter4_reg;
        lshr_ln82_1_reg_558_pp0_iter2_reg <= lshr_ln82_1_reg_558_pp0_iter1_reg;
        lshr_ln82_1_reg_558_pp0_iter3_reg <= lshr_ln82_1_reg_558_pp0_iter2_reg;
        lshr_ln82_1_reg_558_pp0_iter4_reg <= lshr_ln82_1_reg_558_pp0_iter3_reg;
        lshr_ln82_1_reg_558_pp0_iter5_reg <= lshr_ln82_1_reg_558_pp0_iter4_reg;
        mul_i_reg_572 <= grp_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_i_reg_500 <= grp_fu_360_p1;
        trunc_ln82_reg_505 <= trunc_ln82_fu_369_p1;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln80_fu_380_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_0_ce0 = 1'b1;
    end else begin
        dense_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_1_ce0 = 1'b1;
    end else begin
        dense_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_2_ce0 = 1'b1;
    end else begin
        dense_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_3_ce0 = 1'b1;
    end else begin
        dense_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_4_ce0 = 1'b1;
    end else begin
        dense_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_5_ce0 = 1'b1;
    end else begin
        dense_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_6_ce0 = 1'b1;
    end else begin
        dense_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_buf_7_ce0 = 1'b1;
    end else begin
        dense_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_0_ce1 = 1'b1;
    end else begin
        out_buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd0 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_0_we1 = 1'b1;
    end else begin
        out_buf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_1_ce1 = 1'b1;
    end else begin
        out_buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd1 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_1_we1 = 1'b1;
    end else begin
        out_buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_2_ce1 = 1'b1;
    end else begin
        out_buf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd2 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_2_we1 = 1'b1;
    end else begin
        out_buf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_3_ce1 = 1'b1;
    end else begin
        out_buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd3 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_3_we1 = 1'b1;
    end else begin
        out_buf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_4_ce1 = 1'b1;
    end else begin
        out_buf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd4 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_4_we1 = 1'b1;
    end else begin
        out_buf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_5_ce1 = 1'b1;
    end else begin
        out_buf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd5 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_5_we1 = 1'b1;
    end else begin
        out_buf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_6_ce1 = 1'b1;
    end else begin
        out_buf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd6 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_6_we1 = 1'b1;
    end else begin
        out_buf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_7_ce1 = 1'b1;
    end else begin
        out_buf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((3'd7 == add_ln82_1_reg_563_pp0_iter5_reg) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_buf_7_we1 = 1'b1;
    end else begin
        out_buf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_380_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_fu_385_p2 = (i_fu_94 + 31'd1);

assign add_ln82_1_fu_436_p2 = (trunc_ln82_1_fu_417_p1 + trunc_ln82_reg_505);

assign add_ln82_fu_421_p2 = (trunc_ln80_fu_391_p1 + idx1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dense_buf_0_address0 = zext_ln82_fu_405_p1;

assign dense_buf_1_address0 = zext_ln82_fu_405_p1;

assign dense_buf_2_address0 = zext_ln82_fu_405_p1;

assign dense_buf_3_address0 = zext_ln82_fu_405_p1;

assign dense_buf_4_address0 = zext_ln82_fu_405_p1;

assign dense_buf_5_address0 = zext_ln82_fu_405_p1;

assign dense_buf_6_address0 = zext_ln82_fu_405_p1;

assign dense_buf_7_address0 = zext_ln82_fu_405_p1;

assign icmp_ln80_fu_380_p2 = (($signed(zext_ln80_fu_376_p1) < $signed(len)) ? 1'b1 : 1'b0);

assign lshr_ln_fu_395_p4 = {{i_fu_94[19:3]}};

assign out_buf_0_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_0_d1 = mul_i_reg_572;

assign out_buf_1_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_1_d1 = mul_i_reg_572;

assign out_buf_2_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_2_d1 = mul_i_reg_572;

assign out_buf_3_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_3_d1 = mul_i_reg_572;

assign out_buf_4_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_4_d1 = mul_i_reg_572;

assign out_buf_5_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_5_d1 = mul_i_reg_572;

assign out_buf_6_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_6_d1 = mul_i_reg_572;

assign out_buf_7_address1 = zext_ln82_1_fu_467_p1;

assign out_buf_7_d1 = mul_i_reg_572;

assign trunc_ln80_fu_391_p1 = i_fu_94[15:0];

assign trunc_ln82_1_fu_417_p1 = i_fu_94[2:0];

assign trunc_ln82_fu_369_p1 = idx1[2:0];

assign zext_ln80_fu_376_p1 = i_fu_94;

assign zext_ln82_1_fu_467_p1 = lshr_ln82_1_reg_558_pp0_iter5_reg;

assign zext_ln82_fu_405_p1 = lshr_ln_fu_395_p4;

endmodule //spmm_hls_pe_kernel_0
