// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_au_merge_Pipeline_VITIS_LOOP_176_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        streamA38_dout,
        streamA38_empty_n,
        streamA38_read,
        streamB39_dout,
        streamB39_empty_n,
        streamB39_read,
        zext_ln199,
        AU0_address0,
        AU0_ce0,
        AU0_we0,
        AU0_d0,
        AU0_address1,
        AU0_ce1,
        AU0_q1,
        AU1_address0,
        AU1_ce0,
        AU1_we0,
        AU1_d0,
        AU1_address1,
        AU1_ce1,
        AU1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] streamA38_dout;
input   streamA38_empty_n;
output   streamA38_read;
input  [31:0] streamB39_dout;
input   streamB39_empty_n;
output   streamB39_read;
input  [29:0] zext_ln199;
output  [15:0] AU0_address0;
output   AU0_ce0;
output   AU0_we0;
output  [31:0] AU0_d0;
output  [15:0] AU0_address1;
output   AU0_ce1;
input  [31:0] AU0_q1;
output  [15:0] AU1_address0;
output   AU1_ce0;
output   AU1_we0;
output  [31:0] AU1_d0;
output  [15:0] AU1_address1;
output   AU1_ce1;
input  [31:0] AU1_q1;

reg ap_idle;
reg streamA38_read;
reg streamB39_read;
reg AU0_ce0;
reg AU0_we0;
reg AU0_ce1;
reg AU1_ce0;
reg AU1_we0;
reg AU1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln176_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    streamA38_blk_n;
wire    ap_block_pp0_stage0;
reg    streamB39_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] AU0_addr_reg_162;
reg   [15:0] AU0_addr_reg_162_pp0_iter1_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter2_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter3_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter4_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter5_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter6_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter7_reg;
reg   [15:0] AU0_addr_reg_162_pp0_iter8_reg;
reg   [15:0] AU1_addr_reg_168;
reg   [15:0] AU1_addr_reg_168_pp0_iter1_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter2_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter3_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter4_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter5_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter6_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter7_reg;
reg   [15:0] AU1_addr_reg_168_pp0_iter8_reg;
reg   [31:0] streamA38_read_reg_174;
reg   [31:0] AU0_load_reg_179;
reg   [31:0] streamB39_read_reg_184;
reg   [31:0] AU1_load_reg_189;
wire   [31:0] grp_fu_100_p2;
reg   [31:0] add_i3_reg_204;
wire   [31:0] grp_fu_104_p2;
reg   [31:0] add4_i2_reg_209;
wire   [63:0] i_6_cast7_fu_132_p1;
reg   [15:0] i_6_fu_44;
wire   [15:0] add_ln176_fu_126_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_i;
wire   [31:0] grp_fu_100_p1;
wire   [31:0] grp_fu_104_p1;
wire   [29:0] i_6_cast1_fu_116_p1;
reg    grp_fu_100_ce;
reg    grp_fu_104_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spmm_hls_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(AU0_load_reg_179),
    .din1(grp_fu_100_p1),
    .ce(grp_fu_100_ce),
    .dout(grp_fu_100_p2)
);

spmm_hls_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(AU1_load_reg_189),
    .din1(grp_fu_104_p1),
    .ce(grp_fu_104_ce),
    .dout(grp_fu_104_p2)
);

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_120_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_6_fu_44 <= add_ln176_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_6_fu_44 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AU0_addr_reg_162 <= i_6_cast7_fu_132_p1;
        AU1_addr_reg_168 <= i_6_cast7_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AU0_addr_reg_162_pp0_iter1_reg <= AU0_addr_reg_162;
        AU1_addr_reg_168_pp0_iter1_reg <= AU1_addr_reg_168;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        streamA38_read_reg_174 <= streamA38_dout;
        streamB39_read_reg_184 <= streamB39_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        AU0_addr_reg_162_pp0_iter2_reg <= AU0_addr_reg_162_pp0_iter1_reg;
        AU0_addr_reg_162_pp0_iter3_reg <= AU0_addr_reg_162_pp0_iter2_reg;
        AU0_addr_reg_162_pp0_iter4_reg <= AU0_addr_reg_162_pp0_iter3_reg;
        AU0_addr_reg_162_pp0_iter5_reg <= AU0_addr_reg_162_pp0_iter4_reg;
        AU0_addr_reg_162_pp0_iter6_reg <= AU0_addr_reg_162_pp0_iter5_reg;
        AU0_addr_reg_162_pp0_iter7_reg <= AU0_addr_reg_162_pp0_iter6_reg;
        AU0_addr_reg_162_pp0_iter8_reg <= AU0_addr_reg_162_pp0_iter7_reg;
        AU1_addr_reg_168_pp0_iter2_reg <= AU1_addr_reg_168_pp0_iter1_reg;
        AU1_addr_reg_168_pp0_iter3_reg <= AU1_addr_reg_168_pp0_iter2_reg;
        AU1_addr_reg_168_pp0_iter4_reg <= AU1_addr_reg_168_pp0_iter3_reg;
        AU1_addr_reg_168_pp0_iter5_reg <= AU1_addr_reg_168_pp0_iter4_reg;
        AU1_addr_reg_168_pp0_iter6_reg <= AU1_addr_reg_168_pp0_iter5_reg;
        AU1_addr_reg_168_pp0_iter7_reg <= AU1_addr_reg_168_pp0_iter6_reg;
        AU1_addr_reg_168_pp0_iter8_reg <= AU1_addr_reg_168_pp0_iter7_reg;
        add4_i2_reg_209 <= grp_fu_104_p2;
        add_i3_reg_204 <= grp_fu_100_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AU0_load_reg_179 <= AU0_q1;
        AU1_load_reg_189 <= AU1_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        AU0_ce0 = 1'b1;
    end else begin
        AU0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AU0_ce1 = 1'b1;
    end else begin
        AU0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        AU0_we0 = 1'b1;
    end else begin
        AU0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        AU1_ce0 = 1'b1;
    end else begin
        AU1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AU1_ce1 = 1'b1;
    end else begin
        AU1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        AU1_we0 = 1'b1;
    end else begin
        AU1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln176_fu_120_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 16'd0;
    end else begin
        ap_sig_allocacmp_i = i_6_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_100_ce = 1'b1;
    end else begin
        grp_fu_100_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_104_ce = 1'b1;
    end else begin
        grp_fu_104_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamA38_blk_n = streamA38_empty_n;
    end else begin
        streamA38_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamA38_read = 1'b1;
    end else begin
        streamA38_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamB39_blk_n = streamB39_empty_n;
    end else begin
        streamB39_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        streamB39_read = 1'b1;
    end else begin
        streamB39_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AU0_address0 = AU0_addr_reg_162_pp0_iter8_reg;

assign AU0_address1 = i_6_cast7_fu_132_p1;

assign AU0_d0 = add_i3_reg_204;

assign AU1_address0 = AU1_addr_reg_168_pp0_iter8_reg;

assign AU1_address1 = i_6_cast7_fu_132_p1;

assign AU1_d0 = add4_i2_reg_209;

assign add_ln176_fu_126_p2 = (ap_sig_allocacmp_i + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((streamB39_empty_n == 1'b0) | (streamA38_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((streamB39_empty_n == 1'b0) | (streamA38_empty_n == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((streamB39_empty_n == 1'b0) | (streamA38_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_100_p1 = streamA38_read_reg_174;

assign grp_fu_104_p1 = streamB39_read_reg_184;

assign i_6_cast1_fu_116_p1 = ap_sig_allocacmp_i;

assign i_6_cast7_fu_132_p1 = ap_sig_allocacmp_i;

assign icmp_ln176_fu_120_p2 = ((i_6_cast1_fu_116_p1 < zext_ln199) ? 1'b1 : 1'b0);

endmodule //spmm_hls_au_merge_Pipeline_VITIS_LOOP_176_13
