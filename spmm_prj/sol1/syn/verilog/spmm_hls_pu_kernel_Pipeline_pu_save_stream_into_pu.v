// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_pu_kernel_Pipeline_pu_save_stream_into_pu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_ref_0,
        p_ref_1,
        p_ref_2,
        p_ref_3,
        p_v_value_0,
        p_v_value_1,
        p_v_value_2,
        p_v_value_3,
        p_v_y_0,
        p_v_y_1,
        p_v_y_2,
        p_v_y_3,
        tile_ref_3_020_out,
        tile_ref_3_020_out_ap_vld,
        tile_ref_2_019_out,
        tile_ref_2_019_out_ap_vld,
        tile_ref_1_018_out,
        tile_ref_1_018_out_ap_vld,
        tile_ref_0_017_out,
        tile_ref_0_017_out_ap_vld,
        tile_y_3_016_out,
        tile_y_3_016_out_ap_vld,
        tile_y_2_015_out,
        tile_y_2_015_out_ap_vld,
        tile_y_1_014_out,
        tile_y_1_014_out_ap_vld,
        tile_y_0_013_out,
        tile_y_0_013_out_ap_vld,
        tile_value_3_0165_out,
        tile_value_3_0165_out_ap_vld,
        tile_value_2_0164_out,
        tile_value_2_0164_out_ap_vld,
        tile_value_1_0163_out,
        tile_value_1_0163_out_ap_vld,
        tile_value_0_0162_out,
        tile_value_0_0162_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] p_ref_0;
input  [0:0] p_ref_1;
input  [0:0] p_ref_2;
input  [0:0] p_ref_3;
input  [31:0] p_v_value_0;
input  [31:0] p_v_value_1;
input  [31:0] p_v_value_2;
input  [31:0] p_v_value_3;
input  [31:0] p_v_y_0;
input  [31:0] p_v_y_1;
input  [31:0] p_v_y_2;
input  [31:0] p_v_y_3;
output  [0:0] tile_ref_3_020_out;
output   tile_ref_3_020_out_ap_vld;
output  [0:0] tile_ref_2_019_out;
output   tile_ref_2_019_out_ap_vld;
output  [0:0] tile_ref_1_018_out;
output   tile_ref_1_018_out_ap_vld;
output  [0:0] tile_ref_0_017_out;
output   tile_ref_0_017_out_ap_vld;
output  [31:0] tile_y_3_016_out;
output   tile_y_3_016_out_ap_vld;
output  [31:0] tile_y_2_015_out;
output   tile_y_2_015_out_ap_vld;
output  [31:0] tile_y_1_014_out;
output   tile_y_1_014_out_ap_vld;
output  [31:0] tile_y_0_013_out;
output   tile_y_0_013_out_ap_vld;
output  [31:0] tile_value_3_0165_out;
output   tile_value_3_0165_out_ap_vld;
output  [31:0] tile_value_2_0164_out;
output   tile_value_2_0164_out_ap_vld;
output  [31:0] tile_value_1_0163_out;
output   tile_value_1_0163_out_ap_vld;
output  [31:0] tile_value_0_0162_out;
output   tile_value_0_0162_out_ap_vld;

reg ap_idle;
reg tile_ref_3_020_out_ap_vld;
reg tile_ref_2_019_out_ap_vld;
reg tile_ref_1_018_out_ap_vld;
reg tile_ref_0_017_out_ap_vld;
reg tile_y_3_016_out_ap_vld;
reg tile_y_2_015_out_ap_vld;
reg tile_y_1_014_out_ap_vld;
reg tile_y_0_013_out_ap_vld;
reg tile_value_3_0165_out_ap_vld;
reg tile_value_2_0164_out_ap_vld;
reg tile_value_1_0163_out_ap_vld;
reg tile_value_0_0162_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln241_fu_310_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] u_fu_94;
wire   [2:0] add_ln241_fu_316_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_u_1;
reg   [31:0] tile_value_1_fu_98;
wire   [31:0] tile_value_1_5_fu_326_p6;
wire   [1:0] trunc_ln243_fu_322_p1;
reg   [31:0] tile_value_1_1_fu_102;
reg   [31:0] tile_value_1_2_fu_106;
reg   [31:0] tile_value_1_3_fu_110;
reg   [31:0] tile_y_1_fu_114;
wire   [31:0] tile_y_1_5_fu_340_p6;
reg   [31:0] tile_y_1_1_fu_118;
reg   [31:0] tile_y_1_2_fu_122;
reg   [31:0] tile_y_1_3_fu_126;
reg   [0:0] tile_ref_1_fu_130;
wire   [0:0] tile_ref_1_5_fu_374_p6;
reg   [0:0] tile_ref_1_1_fu_134;
reg   [0:0] tile_ref_1_2_fu_138;
reg   [0:0] tile_ref_1_3_fu_142;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

spmm_hls_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U37(
    .din0(p_v_value_0),
    .din1(p_v_value_1),
    .din2(p_v_value_2),
    .din3(p_v_value_3),
    .din4(trunc_ln243_fu_322_p1),
    .dout(tile_value_1_5_fu_326_p6)
);

spmm_hls_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U38(
    .din0(p_v_y_0),
    .din1(p_v_y_1),
    .din2(p_v_y_2),
    .din3(p_v_y_3),
    .din4(trunc_ln243_fu_322_p1),
    .dout(tile_y_1_5_fu_340_p6)
);

spmm_hls_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U39(
    .din0(p_ref_0),
    .din1(p_ref_1),
    .din2(p_ref_2),
    .din3(p_ref_3),
    .din4(trunc_ln243_fu_322_p1),
    .dout(tile_ref_1_5_fu_374_p6)
);

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln241_fu_310_p2 == 1'd0)) begin
            u_fu_94 <= add_ln241_fu_316_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            u_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln243_fu_322_p1 == 2'd1) & (icmp_ln241_fu_310_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_1_1_fu_134 <= tile_ref_1_5_fu_374_p6;
        tile_value_1_1_fu_102 <= tile_value_1_5_fu_326_p6;
        tile_y_1_1_fu_118 <= tile_y_1_5_fu_340_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln243_fu_322_p1 == 2'd2) & (icmp_ln241_fu_310_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_1_2_fu_138 <= tile_ref_1_5_fu_374_p6;
        tile_value_1_2_fu_106 <= tile_value_1_5_fu_326_p6;
        tile_y_1_2_fu_122 <= tile_y_1_5_fu_340_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln243_fu_322_p1 == 2'd3) & (icmp_ln241_fu_310_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_1_3_fu_142 <= tile_ref_1_5_fu_374_p6;
        tile_value_1_3_fu_110 <= tile_value_1_5_fu_326_p6;
        tile_y_1_3_fu_126 <= tile_y_1_5_fu_340_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln243_fu_322_p1 == 2'd0) & (icmp_ln241_fu_310_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_1_fu_130 <= tile_ref_1_5_fu_374_p6;
        tile_value_1_fu_98 <= tile_value_1_5_fu_326_p6;
        tile_y_1_fu_114 <= tile_y_1_5_fu_340_p6;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_u_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_u_1 = u_fu_94;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_0_017_out_ap_vld = 1'b1;
    end else begin
        tile_ref_0_017_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_1_018_out_ap_vld = 1'b1;
    end else begin
        tile_ref_1_018_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_2_019_out_ap_vld = 1'b1;
    end else begin
        tile_ref_2_019_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_ref_3_020_out_ap_vld = 1'b1;
    end else begin
        tile_ref_3_020_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_value_0_0162_out_ap_vld = 1'b1;
    end else begin
        tile_value_0_0162_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_value_1_0163_out_ap_vld = 1'b1;
    end else begin
        tile_value_1_0163_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_value_2_0164_out_ap_vld = 1'b1;
    end else begin
        tile_value_2_0164_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_value_3_0165_out_ap_vld = 1'b1;
    end else begin
        tile_value_3_0165_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_y_0_013_out_ap_vld = 1'b1;
    end else begin
        tile_y_0_013_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_y_1_014_out_ap_vld = 1'b1;
    end else begin
        tile_y_1_014_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_y_2_015_out_ap_vld = 1'b1;
    end else begin
        tile_y_2_015_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_310_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_y_3_016_out_ap_vld = 1'b1;
    end else begin
        tile_y_3_016_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_fu_316_p2 = (ap_sig_allocacmp_u_1 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln241_fu_310_p2 = ((ap_sig_allocacmp_u_1 == 3'd4) ? 1'b1 : 1'b0);

assign tile_ref_0_017_out = tile_ref_1_fu_130;

assign tile_ref_1_018_out = tile_ref_1_1_fu_134;

assign tile_ref_2_019_out = tile_ref_1_2_fu_138;

assign tile_ref_3_020_out = tile_ref_1_3_fu_142;

assign tile_value_0_0162_out = tile_value_1_fu_98;

assign tile_value_1_0163_out = tile_value_1_1_fu_102;

assign tile_value_2_0164_out = tile_value_1_2_fu_106;

assign tile_value_3_0165_out = tile_value_1_3_fu_110;

assign tile_y_0_013_out = tile_y_1_fu_114;

assign tile_y_1_014_out = tile_y_1_1_fu_118;

assign tile_y_2_015_out = tile_y_1_2_fu_122;

assign tile_y_3_016_out = tile_y_1_3_fu_126;

assign trunc_ln243_fu_322_p1 = ap_sig_allocacmp_u_1[1:0];

endmodule //spmm_hls_pu_kernel_Pipeline_pu_save_stream_into_pu
