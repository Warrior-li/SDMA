// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_62_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        sext_ln62,
        K,
        dense_ptr_7_address0,
        dense_ptr_7_ce0,
        dense_ptr_7_we0,
        dense_ptr_7_d0,
        dense_ptr_6_address0,
        dense_ptr_6_ce0,
        dense_ptr_6_we0,
        dense_ptr_6_d0,
        dense_ptr_5_address0,
        dense_ptr_5_ce0,
        dense_ptr_5_we0,
        dense_ptr_5_d0,
        dense_ptr_4_address0,
        dense_ptr_4_ce0,
        dense_ptr_4_we0,
        dense_ptr_4_d0,
        dense_ptr_3_address0,
        dense_ptr_3_ce0,
        dense_ptr_3_we0,
        dense_ptr_3_d0,
        dense_ptr_2_address0,
        dense_ptr_2_ce0,
        dense_ptr_2_we0,
        dense_ptr_2_d0,
        dense_ptr_1_address0,
        dense_ptr_1_ce0,
        dense_ptr_1_we0,
        dense_ptr_1_d0,
        dense_ptr_0_address0,
        dense_ptr_0_ce0,
        dense_ptr_0_we0,
        dense_ptr_0_d0,
        trunc_ln62_1,
        trunc_ln8
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [61:0] sext_ln62;
input  [31:0] K;
output  [16:0] dense_ptr_7_address0;
output   dense_ptr_7_ce0;
output   dense_ptr_7_we0;
output  [31:0] dense_ptr_7_d0;
output  [16:0] dense_ptr_6_address0;
output   dense_ptr_6_ce0;
output   dense_ptr_6_we0;
output  [31:0] dense_ptr_6_d0;
output  [16:0] dense_ptr_5_address0;
output   dense_ptr_5_ce0;
output   dense_ptr_5_we0;
output  [31:0] dense_ptr_5_d0;
output  [16:0] dense_ptr_4_address0;
output   dense_ptr_4_ce0;
output   dense_ptr_4_we0;
output  [31:0] dense_ptr_4_d0;
output  [16:0] dense_ptr_3_address0;
output   dense_ptr_3_ce0;
output   dense_ptr_3_we0;
output  [31:0] dense_ptr_3_d0;
output  [16:0] dense_ptr_2_address0;
output   dense_ptr_2_ce0;
output   dense_ptr_2_we0;
output  [31:0] dense_ptr_2_d0;
output  [16:0] dense_ptr_1_address0;
output   dense_ptr_1_ce0;
output   dense_ptr_1_we0;
output  [31:0] dense_ptr_1_d0;
output  [16:0] dense_ptr_0_address0;
output   dense_ptr_0_ce0;
output   dense_ptr_0_we0;
output  [31:0] dense_ptr_0_d0;
input  [19:0] trunc_ln62_1;
input  [2:0] trunc_ln8;

reg ap_idle;
reg m_axi_gmem1_RREADY;
reg dense_ptr_7_ce0;
reg dense_ptr_7_we0;
reg dense_ptr_6_ce0;
reg dense_ptr_6_we0;
reg dense_ptr_5_ce0;
reg dense_ptr_5_we0;
reg dense_ptr_4_ce0;
reg dense_ptr_4_we0;
reg dense_ptr_3_ce0;
reg dense_ptr_3_we0;
reg dense_ptr_2_ce0;
reg dense_ptr_2_we0;
reg dense_ptr_1_ce0;
reg dense_ptr_1_we0;
reg dense_ptr_0_ce0;
reg dense_ptr_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln62_reg_318;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln62_fu_242_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [16:0] lshr_ln_reg_322;
reg   [16:0] lshr_ln_reg_322_pp0_iter1_reg;
reg   [16:0] lshr_ln_reg_322_pp0_iter2_reg;
reg   [16:0] lshr_ln_reg_322_pp0_iter3_reg;
reg   [16:0] lshr_ln_reg_322_pp0_iter4_reg;
reg   [16:0] lshr_ln_reg_322_pp0_iter5_reg;
wire   [2:0] add_ln64_1_fu_278_p2;
reg   [2:0] add_ln64_1_reg_327;
reg   [2:0] add_ln64_1_reg_327_pp0_iter1_reg;
reg   [2:0] add_ln64_1_reg_327_pp0_iter2_reg;
reg   [2:0] add_ln64_1_reg_327_pp0_iter3_reg;
reg   [2:0] add_ln64_1_reg_327_pp0_iter4_reg;
reg   [2:0] add_ln64_1_reg_327_pp0_iter5_reg;
reg   [31:0] gmem1_addr_read_reg_331;
wire   [31:0] grp_fu_223_p1;
reg   [31:0] conv_reg_336;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln64_fu_295_p1;
reg   [30:0] j_fu_86;
wire   [30:0] add_ln62_fu_248_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_j_1;
wire   [31:0] zext_ln62_fu_238_p1;
wire   [19:0] trunc_ln62_fu_254_p1;
wire   [19:0] add_ln64_fu_262_p2;
wire   [2:0] trunc_ln64_fu_258_p1;
reg    grp_fu_223_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spmm_hls_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(gmem1_addr_read_reg_331),
    .ce(grp_fu_223_ce),
    .dout(grp_fu_223_p1)
);

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln62_fu_242_p2 == 1'd1))) begin
            j_fu_86 <= add_ln62_fu_248_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_86 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_242_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln64_1_reg_327 <= add_ln64_1_fu_278_p2;
        lshr_ln_reg_322 <= {{add_ln64_fu_262_p2[19:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln64_1_reg_327_pp0_iter1_reg <= add_ln64_1_reg_327;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln62_reg_318 <= icmp_ln62_fu_242_p2;
        lshr_ln_reg_322_pp0_iter1_reg <= lshr_ln_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln64_1_reg_327_pp0_iter2_reg <= add_ln64_1_reg_327_pp0_iter1_reg;
        add_ln64_1_reg_327_pp0_iter3_reg <= add_ln64_1_reg_327_pp0_iter2_reg;
        add_ln64_1_reg_327_pp0_iter4_reg <= add_ln64_1_reg_327_pp0_iter3_reg;
        add_ln64_1_reg_327_pp0_iter5_reg <= add_ln64_1_reg_327_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        conv_reg_336 <= grp_fu_223_p1;
        lshr_ln_reg_322_pp0_iter2_reg <= lshr_ln_reg_322_pp0_iter1_reg;
        lshr_ln_reg_322_pp0_iter3_reg <= lshr_ln_reg_322_pp0_iter2_reg;
        lshr_ln_reg_322_pp0_iter4_reg <= lshr_ln_reg_322_pp0_iter3_reg;
        lshr_ln_reg_322_pp0_iter5_reg <= lshr_ln_reg_322_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_318 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem1_addr_read_reg_331 <= m_axi_gmem1_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_242_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_86;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_0_ce0 = 1'b1;
    end else begin
        dense_ptr_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd0 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_0_we0 = 1'b1;
    end else begin
        dense_ptr_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_1_ce0 = 1'b1;
    end else begin
        dense_ptr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd1 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_1_we0 = 1'b1;
    end else begin
        dense_ptr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_2_ce0 = 1'b1;
    end else begin
        dense_ptr_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd2 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_2_we0 = 1'b1;
    end else begin
        dense_ptr_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_3_ce0 = 1'b1;
    end else begin
        dense_ptr_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd3 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_3_we0 = 1'b1;
    end else begin
        dense_ptr_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_4_ce0 = 1'b1;
    end else begin
        dense_ptr_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd4 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_4_we0 = 1'b1;
    end else begin
        dense_ptr_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_5_ce0 = 1'b1;
    end else begin
        dense_ptr_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd5 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_5_we0 = 1'b1;
    end else begin
        dense_ptr_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_6_ce0 = 1'b1;
    end else begin
        dense_ptr_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd6 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_6_we0 = 1'b1;
    end else begin
        dense_ptr_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_7_ce0 = 1'b1;
    end else begin
        dense_ptr_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (3'd7 == add_ln64_1_reg_327_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_ptr_7_we0 = 1'b1;
    end else begin
        dense_ptr_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_318 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_223_ce = 1'b1;
    end else begin
        grp_fu_223_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_318 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_fu_248_p2 = (ap_sig_allocacmp_j_1 + 31'd1);

assign add_ln64_1_fu_278_p2 = (trunc_ln64_fu_258_p1 + trunc_ln8);

assign add_ln64_fu_262_p2 = (trunc_ln62_fu_254_p1 + trunc_ln62_1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln62_reg_318 == 1'd1) & (m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln62_reg_318 == 1'd1) & (m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln62_reg_318 == 1'd1) & (m_axi_gmem1_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dense_ptr_0_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_0_d0 = conv_reg_336;

assign dense_ptr_1_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_1_d0 = conv_reg_336;

assign dense_ptr_2_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_2_d0 = conv_reg_336;

assign dense_ptr_3_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_3_d0 = conv_reg_336;

assign dense_ptr_4_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_4_d0 = conv_reg_336;

assign dense_ptr_5_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_5_d0 = conv_reg_336;

assign dense_ptr_6_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_6_d0 = conv_reg_336;

assign dense_ptr_7_address0 = zext_ln64_fu_295_p1;

assign dense_ptr_7_d0 = conv_reg_336;

assign icmp_ln62_fu_242_p2 = (($signed(zext_ln62_fu_238_p1) < $signed(K)) ? 1'b1 : 1'b0);

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign trunc_ln62_fu_254_p1 = ap_sig_allocacmp_j_1[19:0];

assign trunc_ln64_fu_258_p1 = ap_sig_allocacmp_j_1[2:0];

assign zext_ln62_fu_238_p1 = ap_sig_allocacmp_j_1;

assign zext_ln64_fu_295_p1 = lshr_ln_reg_322_pp0_iter5_reg;

endmodule //spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_62_4
