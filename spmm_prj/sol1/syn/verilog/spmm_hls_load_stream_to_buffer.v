// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spmm_hls_load_stream_to_buffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_stream3_dout,
        A_stream3_empty_n,
        A_stream3_read,
        sparse_buf_eor_0,
        sparse_buf_eor_0_ap_vld,
        sparse_buf_eor_1,
        sparse_buf_eor_1_ap_vld,
        sparse_buf_eor_2,
        sparse_buf_eor_2_ap_vld,
        sparse_buf_eor_3,
        sparse_buf_eor_3_ap_vld,
        sparse_buf_eor_4,
        sparse_buf_eor_4_ap_vld,
        sparse_buf_eor_5,
        sparse_buf_eor_5_ap_vld,
        sparse_buf_eor_6,
        sparse_buf_eor_6_ap_vld,
        sparse_buf_eor_7,
        sparse_buf_eor_7_ap_vld,
        sparse_buf_eor_8,
        sparse_buf_eor_8_ap_vld,
        sparse_buf_eor_9,
        sparse_buf_eor_9_ap_vld,
        sparse_buf_eor_10,
        sparse_buf_eor_10_ap_vld,
        sparse_buf_eor_11,
        sparse_buf_eor_11_ap_vld,
        sparse_buf_eor_12,
        sparse_buf_eor_12_ap_vld,
        sparse_buf_eor_13,
        sparse_buf_eor_13_ap_vld,
        sparse_buf_eor_14,
        sparse_buf_eor_14_ap_vld,
        sparse_buf_eor_15,
        sparse_buf_eor_15_ap_vld,
        sparse_buf_col_0,
        sparse_buf_col_0_ap_vld,
        sparse_buf_col_1,
        sparse_buf_col_1_ap_vld,
        sparse_buf_col_2,
        sparse_buf_col_2_ap_vld,
        sparse_buf_col_3,
        sparse_buf_col_3_ap_vld,
        sparse_buf_col_4,
        sparse_buf_col_4_ap_vld,
        sparse_buf_col_5,
        sparse_buf_col_5_ap_vld,
        sparse_buf_col_6,
        sparse_buf_col_6_ap_vld,
        sparse_buf_col_7,
        sparse_buf_col_7_ap_vld,
        sparse_buf_col_8,
        sparse_buf_col_8_ap_vld,
        sparse_buf_col_9,
        sparse_buf_col_9_ap_vld,
        sparse_buf_col_10,
        sparse_buf_col_10_ap_vld,
        sparse_buf_col_11,
        sparse_buf_col_11_ap_vld,
        sparse_buf_col_12,
        sparse_buf_col_12_ap_vld,
        sparse_buf_col_13,
        sparse_buf_col_13_ap_vld,
        sparse_buf_col_14,
        sparse_buf_col_14_ap_vld,
        sparse_buf_col_15,
        sparse_buf_col_15_ap_vld,
        sparse_buf_value_0,
        sparse_buf_value_0_ap_vld,
        sparse_buf_value_1,
        sparse_buf_value_1_ap_vld,
        sparse_buf_value_2,
        sparse_buf_value_2_ap_vld,
        sparse_buf_value_3,
        sparse_buf_value_3_ap_vld,
        sparse_buf_value_4,
        sparse_buf_value_4_ap_vld,
        sparse_buf_value_5,
        sparse_buf_value_5_ap_vld,
        sparse_buf_value_6,
        sparse_buf_value_6_ap_vld,
        sparse_buf_value_7,
        sparse_buf_value_7_ap_vld,
        sparse_buf_value_8,
        sparse_buf_value_8_ap_vld,
        sparse_buf_value_9,
        sparse_buf_value_9_ap_vld,
        sparse_buf_value_10,
        sparse_buf_value_10_ap_vld,
        sparse_buf_value_11,
        sparse_buf_value_11_ap_vld,
        sparse_buf_value_12,
        sparse_buf_value_12_ap_vld,
        sparse_buf_value_13,
        sparse_buf_value_13_ap_vld,
        sparse_buf_value_14,
        sparse_buf_value_14_ap_vld,
        sparse_buf_value_15,
        sparse_buf_value_15_ap_vld,
        p_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] A_stream3_dout;
input   A_stream3_empty_n;
output   A_stream3_read;
output  [0:0] sparse_buf_eor_0;
output   sparse_buf_eor_0_ap_vld;
output  [0:0] sparse_buf_eor_1;
output   sparse_buf_eor_1_ap_vld;
output  [0:0] sparse_buf_eor_2;
output   sparse_buf_eor_2_ap_vld;
output  [0:0] sparse_buf_eor_3;
output   sparse_buf_eor_3_ap_vld;
output  [0:0] sparse_buf_eor_4;
output   sparse_buf_eor_4_ap_vld;
output  [0:0] sparse_buf_eor_5;
output   sparse_buf_eor_5_ap_vld;
output  [0:0] sparse_buf_eor_6;
output   sparse_buf_eor_6_ap_vld;
output  [0:0] sparse_buf_eor_7;
output   sparse_buf_eor_7_ap_vld;
output  [0:0] sparse_buf_eor_8;
output   sparse_buf_eor_8_ap_vld;
output  [0:0] sparse_buf_eor_9;
output   sparse_buf_eor_9_ap_vld;
output  [0:0] sparse_buf_eor_10;
output   sparse_buf_eor_10_ap_vld;
output  [0:0] sparse_buf_eor_11;
output   sparse_buf_eor_11_ap_vld;
output  [0:0] sparse_buf_eor_12;
output   sparse_buf_eor_12_ap_vld;
output  [0:0] sparse_buf_eor_13;
output   sparse_buf_eor_13_ap_vld;
output  [0:0] sparse_buf_eor_14;
output   sparse_buf_eor_14_ap_vld;
output  [0:0] sparse_buf_eor_15;
output   sparse_buf_eor_15_ap_vld;
output  [30:0] sparse_buf_col_0;
output   sparse_buf_col_0_ap_vld;
output  [30:0] sparse_buf_col_1;
output   sparse_buf_col_1_ap_vld;
output  [30:0] sparse_buf_col_2;
output   sparse_buf_col_2_ap_vld;
output  [30:0] sparse_buf_col_3;
output   sparse_buf_col_3_ap_vld;
output  [30:0] sparse_buf_col_4;
output   sparse_buf_col_4_ap_vld;
output  [30:0] sparse_buf_col_5;
output   sparse_buf_col_5_ap_vld;
output  [30:0] sparse_buf_col_6;
output   sparse_buf_col_6_ap_vld;
output  [30:0] sparse_buf_col_7;
output   sparse_buf_col_7_ap_vld;
output  [30:0] sparse_buf_col_8;
output   sparse_buf_col_8_ap_vld;
output  [30:0] sparse_buf_col_9;
output   sparse_buf_col_9_ap_vld;
output  [30:0] sparse_buf_col_10;
output   sparse_buf_col_10_ap_vld;
output  [30:0] sparse_buf_col_11;
output   sparse_buf_col_11_ap_vld;
output  [30:0] sparse_buf_col_12;
output   sparse_buf_col_12_ap_vld;
output  [30:0] sparse_buf_col_13;
output   sparse_buf_col_13_ap_vld;
output  [30:0] sparse_buf_col_14;
output   sparse_buf_col_14_ap_vld;
output  [30:0] sparse_buf_col_15;
output   sparse_buf_col_15_ap_vld;
output  [31:0] sparse_buf_value_0;
output   sparse_buf_value_0_ap_vld;
output  [31:0] sparse_buf_value_1;
output   sparse_buf_value_1_ap_vld;
output  [31:0] sparse_buf_value_2;
output   sparse_buf_value_2_ap_vld;
output  [31:0] sparse_buf_value_3;
output   sparse_buf_value_3_ap_vld;
output  [31:0] sparse_buf_value_4;
output   sparse_buf_value_4_ap_vld;
output  [31:0] sparse_buf_value_5;
output   sparse_buf_value_5_ap_vld;
output  [31:0] sparse_buf_value_6;
output   sparse_buf_value_6_ap_vld;
output  [31:0] sparse_buf_value_7;
output   sparse_buf_value_7_ap_vld;
output  [31:0] sparse_buf_value_8;
output   sparse_buf_value_8_ap_vld;
output  [31:0] sparse_buf_value_9;
output   sparse_buf_value_9_ap_vld;
output  [31:0] sparse_buf_value_10;
output   sparse_buf_value_10_ap_vld;
output  [31:0] sparse_buf_value_11;
output   sparse_buf_value_11_ap_vld;
output  [31:0] sparse_buf_value_12;
output   sparse_buf_value_12_ap_vld;
output  [31:0] sparse_buf_value_13;
output   sparse_buf_value_13_ap_vld;
output  [31:0] sparse_buf_value_14;
output   sparse_buf_value_14_ap_vld;
output  [31:0] sparse_buf_value_15;
output   sparse_buf_value_15_ap_vld;
input  [31:0] p_read;
output  [31:0] ap_return;

reg ap_idle;
reg A_stream3_read;
reg sparse_buf_eor_0_ap_vld;
reg sparse_buf_eor_1_ap_vld;
reg sparse_buf_eor_2_ap_vld;
reg sparse_buf_eor_3_ap_vld;
reg sparse_buf_eor_4_ap_vld;
reg sparse_buf_eor_5_ap_vld;
reg sparse_buf_eor_6_ap_vld;
reg sparse_buf_eor_7_ap_vld;
reg sparse_buf_eor_8_ap_vld;
reg sparse_buf_eor_9_ap_vld;
reg sparse_buf_eor_10_ap_vld;
reg sparse_buf_eor_11_ap_vld;
reg sparse_buf_eor_12_ap_vld;
reg sparse_buf_eor_13_ap_vld;
reg sparse_buf_eor_14_ap_vld;
reg sparse_buf_eor_15_ap_vld;
reg sparse_buf_col_0_ap_vld;
reg sparse_buf_col_1_ap_vld;
reg sparse_buf_col_2_ap_vld;
reg sparse_buf_col_3_ap_vld;
reg sparse_buf_col_4_ap_vld;
reg sparse_buf_col_5_ap_vld;
reg sparse_buf_col_6_ap_vld;
reg sparse_buf_col_7_ap_vld;
reg sparse_buf_col_8_ap_vld;
reg sparse_buf_col_9_ap_vld;
reg sparse_buf_col_10_ap_vld;
reg sparse_buf_col_11_ap_vld;
reg sparse_buf_col_12_ap_vld;
reg sparse_buf_col_13_ap_vld;
reg sparse_buf_col_14_ap_vld;
reg sparse_buf_col_15_ap_vld;
reg sparse_buf_value_0_ap_vld;
reg sparse_buf_value_1_ap_vld;
reg sparse_buf_value_2_ap_vld;
reg sparse_buf_value_3_ap_vld;
reg sparse_buf_value_4_ap_vld;
reg sparse_buf_value_5_ap_vld;
reg sparse_buf_value_6_ap_vld;
reg sparse_buf_value_7_ap_vld;
reg sparse_buf_value_8_ap_vld;
reg sparse_buf_value_9_ap_vld;
reg sparse_buf_value_10_ap_vld;
reg sparse_buf_value_11_ap_vld;
reg sparse_buf_value_12_ap_vld;
reg sparse_buf_value_13_ap_vld;
reg sparse_buf_value_14_ap_vld;
reg sparse_buf_value_15_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln33_fu_547_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_stream3_blk_n;
wire    ap_block_pp0_stage0;
wire   [3:0] trunc_ln36_fu_559_p1;
reg   [3:0] trunc_ln36_reg_681;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] i_fu_178;
wire   [4:0] add_ln33_fu_553_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
reg   [31:0] cur_row_0_fu_182;
wire   [31:0] select_ln37_fu_647_p3;
reg   [31:0] ap_sig_allocacmp_cur_row_0_load_1;
wire   [0:0] p_Result_s_fu_568_p3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] x_value_V_fu_618_p1;
wire   [31:0] add_ln840_fu_641_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spmm_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cur_row_0_fu_182 <= p_read;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cur_row_0_fu_182 <= select_ln37_fu_647_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln33_fu_547_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_178 <= add_ln33_fu_553_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_178 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_547_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln36_reg_681 <= trunc_ln36_fu_559_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_stream3_blk_n = A_stream3_empty_n;
    end else begin
        A_stream3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_stream3_read = 1'b1;
    end else begin
        A_stream3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_547_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_cur_row_0_load_1 = p_read;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_cur_row_0_load_1 = select_ln37_fu_647_p3;
        end else begin
            ap_sig_allocacmp_cur_row_0_load_1 = cur_row_0_fu_182;
        end
    end else begin
        ap_sig_allocacmp_cur_row_0_load_1 = cur_row_0_fu_182;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_178;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd0))) begin
        sparse_buf_col_0_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd10))) begin
        sparse_buf_col_10_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd11))) begin
        sparse_buf_col_11_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd12))) begin
        sparse_buf_col_12_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd13))) begin
        sparse_buf_col_13_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd14))) begin
        sparse_buf_col_14_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd15))) begin
        sparse_buf_col_15_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd1))) begin
        sparse_buf_col_1_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd2))) begin
        sparse_buf_col_2_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd3))) begin
        sparse_buf_col_3_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd4))) begin
        sparse_buf_col_4_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd5))) begin
        sparse_buf_col_5_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd6))) begin
        sparse_buf_col_6_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd7))) begin
        sparse_buf_col_7_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd8))) begin
        sparse_buf_col_8_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd9))) begin
        sparse_buf_col_9_ap_vld = 1'b1;
    end else begin
        sparse_buf_col_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd0))) begin
        sparse_buf_eor_0_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd10))) begin
        sparse_buf_eor_10_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd11))) begin
        sparse_buf_eor_11_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd12))) begin
        sparse_buf_eor_12_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd13))) begin
        sparse_buf_eor_13_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd14))) begin
        sparse_buf_eor_14_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd15))) begin
        sparse_buf_eor_15_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd1))) begin
        sparse_buf_eor_1_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd2))) begin
        sparse_buf_eor_2_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd3))) begin
        sparse_buf_eor_3_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd4))) begin
        sparse_buf_eor_4_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd5))) begin
        sparse_buf_eor_5_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd6))) begin
        sparse_buf_eor_6_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd7))) begin
        sparse_buf_eor_7_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd8))) begin
        sparse_buf_eor_8_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd9))) begin
        sparse_buf_eor_9_ap_vld = 1'b1;
    end else begin
        sparse_buf_eor_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd0))) begin
        sparse_buf_value_0_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd10))) begin
        sparse_buf_value_10_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd11))) begin
        sparse_buf_value_11_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd12))) begin
        sparse_buf_value_12_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd13))) begin
        sparse_buf_value_13_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd14))) begin
        sparse_buf_value_14_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd15))) begin
        sparse_buf_value_15_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd1))) begin
        sparse_buf_value_1_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd2))) begin
        sparse_buf_value_2_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd3))) begin
        sparse_buf_value_3_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd4))) begin
        sparse_buf_value_4_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd5))) begin
        sparse_buf_value_5_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd6))) begin
        sparse_buf_value_6_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd7))) begin
        sparse_buf_value_7_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd8))) begin
        sparse_buf_value_8_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln36_reg_681 == 4'd9))) begin
        sparse_buf_value_9_ap_vld = 1'b1;
    end else begin
        sparse_buf_value_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_553_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign add_ln840_fu_641_p2 = (cur_row_0_fu_182 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == A_stream3_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == A_stream3_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == A_stream3_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == A_stream3_empty_n);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = ap_sig_allocacmp_cur_row_0_load_1;

assign icmp_ln33_fu_547_p2 = ((ap_sig_allocacmp_i_2 == 5'd16) ? 1'b1 : 1'b0);

assign p_Result_s_fu_568_p3 = A_stream3_dout[32'd63];

assign select_ln37_fu_647_p3 = ((p_Result_s_fu_568_p3[0:0] == 1'b1) ? add_ln840_fu_641_p2 : cur_row_0_fu_182);

assign sparse_buf_col_0 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_1 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_10 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_11 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_12 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_13 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_14 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_15 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_2 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_3 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_4 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_5 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_6 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_7 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_8 = {{A_stream3_dout[62:32]}};

assign sparse_buf_col_9 = {{A_stream3_dout[62:32]}};

assign sparse_buf_eor_0 = A_stream3_dout[32'd63];

assign sparse_buf_eor_1 = A_stream3_dout[32'd63];

assign sparse_buf_eor_10 = A_stream3_dout[32'd63];

assign sparse_buf_eor_11 = A_stream3_dout[32'd63];

assign sparse_buf_eor_12 = A_stream3_dout[32'd63];

assign sparse_buf_eor_13 = A_stream3_dout[32'd63];

assign sparse_buf_eor_14 = A_stream3_dout[32'd63];

assign sparse_buf_eor_15 = A_stream3_dout[32'd63];

assign sparse_buf_eor_2 = A_stream3_dout[32'd63];

assign sparse_buf_eor_3 = A_stream3_dout[32'd63];

assign sparse_buf_eor_4 = A_stream3_dout[32'd63];

assign sparse_buf_eor_5 = A_stream3_dout[32'd63];

assign sparse_buf_eor_6 = A_stream3_dout[32'd63];

assign sparse_buf_eor_7 = A_stream3_dout[32'd63];

assign sparse_buf_eor_8 = A_stream3_dout[32'd63];

assign sparse_buf_eor_9 = A_stream3_dout[32'd63];

assign sparse_buf_value_0 = x_value_V_fu_618_p1;

assign sparse_buf_value_1 = x_value_V_fu_618_p1;

assign sparse_buf_value_10 = x_value_V_fu_618_p1;

assign sparse_buf_value_11 = x_value_V_fu_618_p1;

assign sparse_buf_value_12 = x_value_V_fu_618_p1;

assign sparse_buf_value_13 = x_value_V_fu_618_p1;

assign sparse_buf_value_14 = x_value_V_fu_618_p1;

assign sparse_buf_value_15 = x_value_V_fu_618_p1;

assign sparse_buf_value_2 = x_value_V_fu_618_p1;

assign sparse_buf_value_3 = x_value_V_fu_618_p1;

assign sparse_buf_value_4 = x_value_V_fu_618_p1;

assign sparse_buf_value_5 = x_value_V_fu_618_p1;

assign sparse_buf_value_6 = x_value_V_fu_618_p1;

assign sparse_buf_value_7 = x_value_V_fu_618_p1;

assign sparse_buf_value_8 = x_value_V_fu_618_p1;

assign sparse_buf_value_9 = x_value_V_fu_618_p1;

assign trunc_ln36_fu_559_p1 = ap_sig_allocacmp_i_2[3:0];

assign x_value_V_fu_618_p1 = A_stream3_dout[31:0];

endmodule //spmm_hls_load_stream_to_buffer
