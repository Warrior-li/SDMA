-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_pu_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_01_dout : IN STD_LOGIC_VECTOR (387 downto 0);
    s_01_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    s_01_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    s_01_empty_n : IN STD_LOGIC;
    s_01_read : OUT STD_LOGIC;
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    B1 : IN STD_LOGIC_VECTOR (63 downto 0);
    K : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of spmm_hls_pu_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_181 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000001";
    constant ap_const_lv32_182 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000010";
    constant ap_const_lv32_183 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_01_blk_n : STD_LOGIC;
    signal trunc_ln151_6_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln151_7_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln_reg_342 : STD_LOGIC_VECTOR (29 downto 0);
    signal tile_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tile_y_ce0 : STD_LOGIC;
    signal tile_y_we0 : STD_LOGIC;
    signal tile_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tile_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tile_ref_ce0 : STD_LOGIC;
    signal tile_ref_we0 : STD_LOGIC;
    signal tile_ref_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_y_ce0 : STD_LOGIC;
    signal p_v_y_we0 : STD_LOGIC;
    signal p_v_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_v_y_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_v_y_ce1 : STD_LOGIC;
    signal p_v_y_we1 : STD_LOGIC;
    signal p_v_y_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ref_ce0 : STD_LOGIC;
    signal p_ref_we0 : STD_LOGIC;
    signal p_ref_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ref_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_ref_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_ref_ce1 : STD_LOGIC;
    signal p_ref_we1 : STD_LOGIC;
    signal p_ref_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_done : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_idle : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_ready : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_ce0 : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_ce0 : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_we0 : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_ce0 : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_ce0 : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_we0 : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_ap_start : STD_LOGIC;
    signal grp_dfm_fu_218_ap_done : STD_LOGIC;
    signal grp_dfm_fu_218_ap_idle : STD_LOGIC;
    signal grp_dfm_fu_218_ap_ready : STD_LOGIC;
    signal grp_dfm_fu_218_tile_y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dfm_fu_218_tile_y_ce0 : STD_LOGIC;
    signal grp_dfm_fu_218_tile_ref_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dfm_fu_218_tile_ref_ce0 : STD_LOGIC;
    signal grp_dfm_fu_218_Dbuf_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dfm_fu_218_Dbuf_ce1 : STD_LOGIC;
    signal grp_dfm_fu_218_Dbuf_we1 : STD_LOGIC;
    signal grp_dfm_fu_218_Dbuf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWVALID : STD_LOGIC;
    signal grp_dfm_fu_218_m_axi_gmem6_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_WVALID : STD_LOGIC;
    signal grp_dfm_fu_218_m_axi_gmem6_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_WLAST : STD_LOGIC;
    signal grp_dfm_fu_218_m_axi_gmem6_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARVALID : STD_LOGIC;
    signal grp_dfm_fu_218_m_axi_gmem6_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dfm_fu_218_m_axi_gmem6_RREADY : STD_LOGIC;
    signal grp_dfm_fu_218_m_axi_gmem6_BREADY : STD_LOGIC;
    signal grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_dfm_fu_218_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_pu_kernel_Pipeline_pu_save_stream_into_pu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_v_y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_v_y_ce0 : OUT STD_LOGIC;
        p_v_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tile_y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tile_y_ce0 : OUT STD_LOGIC;
        tile_y_we0 : OUT STD_LOGIC;
        tile_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_ref_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_ref_ce0 : OUT STD_LOGIC;
        p_ref_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        tile_ref_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tile_ref_ce0 : OUT STD_LOGIC;
        tile_ref_we0 : OUT STD_LOGIC;
        tile_ref_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component spmm_hls_dfm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tile_y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tile_y_ce0 : OUT STD_LOGIC;
        tile_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tile_ref_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tile_ref_ce0 : OUT STD_LOGIC;
        tile_ref_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        Dbuf_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        Dbuf_ce1 : OUT STD_LOGIC;
        Dbuf_we1 : OUT STD_LOGIC;
        Dbuf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_AWVALID : OUT STD_LOGIC;
        m_axi_gmem6_AWREADY : IN STD_LOGIC;
        m_axi_gmem6_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem6_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_WVALID : OUT STD_LOGIC;
        m_axi_gmem6_WREADY : IN STD_LOGIC;
        m_axi_gmem6_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_WLAST : OUT STD_LOGIC;
        m_axi_gmem6_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_ARVALID : OUT STD_LOGIC;
        m_axi_gmem6_ARREADY : IN STD_LOGIC;
        m_axi_gmem6_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem6_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_RVALID : IN STD_LOGIC;
        m_axi_gmem6_RREADY : OUT STD_LOGIC;
        m_axi_gmem6_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_RLAST : IN STD_LOGIC;
        m_axi_gmem6_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem6_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_BVALID : IN STD_LOGIC;
        m_axi_gmem6_BREADY : OUT STD_LOGIC;
        m_axi_gmem6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        B : IN STD_LOGIC_VECTOR (63 downto 0);
        K : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component spmm_hls_pu_kernel_Dbuf_RAM_2P_BRAM_0R0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel_tile_y_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel_tile_ref_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component spmm_hls_pu_kernel_p_v_y_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_pu_kernel_p_ref_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Dbuf_U : component spmm_hls_pu_kernel_Dbuf_RAM_2P_BRAM_0R0W
    generic map (
        DataWidth => 32,
        AddressRange => 61278,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address1 => grp_dfm_fu_218_Dbuf_address1,
        ce1 => grp_dfm_fu_218_Dbuf_ce1,
        we1 => grp_dfm_fu_218_Dbuf_we1,
        d1 => grp_dfm_fu_218_Dbuf_d1);

    tile_y_U : component spmm_hls_pu_kernel_tile_y_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tile_y_address0,
        ce0 => tile_y_ce0,
        we0 => tile_y_we0,
        d0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_d0,
        q0 => tile_y_q0);

    tile_ref_U : component spmm_hls_pu_kernel_tile_ref_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tile_ref_address0,
        ce0 => tile_ref_ce0,
        we0 => tile_ref_we0,
        d0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_d0,
        q0 => tile_ref_q0);

    p_v_y_U : component spmm_hls_pu_kernel_p_v_y_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_v_y_address0,
        ce0 => p_v_y_ce0,
        we0 => p_v_y_we0,
        d0 => p_v_y_d0,
        q0 => p_v_y_q0,
        address1 => p_v_y_address1,
        ce1 => p_v_y_ce1,
        we1 => p_v_y_we1,
        d1 => p_v_y_d1);

    p_ref_U : component spmm_hls_pu_kernel_p_ref_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ref_address0,
        ce0 => p_ref_ce0,
        we0 => p_ref_we0,
        d0 => p_ref_d0,
        q0 => p_ref_q0,
        address1 => p_ref_address1,
        ce1 => p_ref_ce1,
        we1 => p_ref_we1,
        d1 => p_ref_d1);

    grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210 : component spmm_hls_pu_kernel_Pipeline_pu_save_stream_into_pu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start,
        ap_done => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_done,
        ap_idle => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_idle,
        ap_ready => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_ready,
        p_v_y_address0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_address0,
        p_v_y_ce0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_ce0,
        p_v_y_q0 => p_v_y_q0,
        tile_y_address0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_address0,
        tile_y_ce0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_ce0,
        tile_y_we0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_we0,
        tile_y_d0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_d0,
        p_ref_address0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_address0,
        p_ref_ce0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_ce0,
        p_ref_q0 => p_ref_q0,
        tile_ref_address0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_address0,
        tile_ref_ce0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_ce0,
        tile_ref_we0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_we0,
        tile_ref_d0 => grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_d0);

    grp_dfm_fu_218 : component spmm_hls_dfm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dfm_fu_218_ap_start,
        ap_done => grp_dfm_fu_218_ap_done,
        ap_idle => grp_dfm_fu_218_ap_idle,
        ap_ready => grp_dfm_fu_218_ap_ready,
        tile_y_address0 => grp_dfm_fu_218_tile_y_address0,
        tile_y_ce0 => grp_dfm_fu_218_tile_y_ce0,
        tile_y_q0 => tile_y_q0,
        tile_ref_address0 => grp_dfm_fu_218_tile_ref_address0,
        tile_ref_ce0 => grp_dfm_fu_218_tile_ref_ce0,
        tile_ref_q0 => tile_ref_q0,
        Dbuf_address1 => grp_dfm_fu_218_Dbuf_address1,
        Dbuf_ce1 => grp_dfm_fu_218_Dbuf_ce1,
        Dbuf_we1 => grp_dfm_fu_218_Dbuf_we1,
        Dbuf_d1 => grp_dfm_fu_218_Dbuf_d1,
        m_axi_gmem6_AWVALID => grp_dfm_fu_218_m_axi_gmem6_AWVALID,
        m_axi_gmem6_AWREADY => ap_const_logic_0,
        m_axi_gmem6_AWADDR => grp_dfm_fu_218_m_axi_gmem6_AWADDR,
        m_axi_gmem6_AWID => grp_dfm_fu_218_m_axi_gmem6_AWID,
        m_axi_gmem6_AWLEN => grp_dfm_fu_218_m_axi_gmem6_AWLEN,
        m_axi_gmem6_AWSIZE => grp_dfm_fu_218_m_axi_gmem6_AWSIZE,
        m_axi_gmem6_AWBURST => grp_dfm_fu_218_m_axi_gmem6_AWBURST,
        m_axi_gmem6_AWLOCK => grp_dfm_fu_218_m_axi_gmem6_AWLOCK,
        m_axi_gmem6_AWCACHE => grp_dfm_fu_218_m_axi_gmem6_AWCACHE,
        m_axi_gmem6_AWPROT => grp_dfm_fu_218_m_axi_gmem6_AWPROT,
        m_axi_gmem6_AWQOS => grp_dfm_fu_218_m_axi_gmem6_AWQOS,
        m_axi_gmem6_AWREGION => grp_dfm_fu_218_m_axi_gmem6_AWREGION,
        m_axi_gmem6_AWUSER => grp_dfm_fu_218_m_axi_gmem6_AWUSER,
        m_axi_gmem6_WVALID => grp_dfm_fu_218_m_axi_gmem6_WVALID,
        m_axi_gmem6_WREADY => ap_const_logic_0,
        m_axi_gmem6_WDATA => grp_dfm_fu_218_m_axi_gmem6_WDATA,
        m_axi_gmem6_WSTRB => grp_dfm_fu_218_m_axi_gmem6_WSTRB,
        m_axi_gmem6_WLAST => grp_dfm_fu_218_m_axi_gmem6_WLAST,
        m_axi_gmem6_WID => grp_dfm_fu_218_m_axi_gmem6_WID,
        m_axi_gmem6_WUSER => grp_dfm_fu_218_m_axi_gmem6_WUSER,
        m_axi_gmem6_ARVALID => grp_dfm_fu_218_m_axi_gmem6_ARVALID,
        m_axi_gmem6_ARREADY => m_axi_gmem3_ARREADY,
        m_axi_gmem6_ARADDR => grp_dfm_fu_218_m_axi_gmem6_ARADDR,
        m_axi_gmem6_ARID => grp_dfm_fu_218_m_axi_gmem6_ARID,
        m_axi_gmem6_ARLEN => grp_dfm_fu_218_m_axi_gmem6_ARLEN,
        m_axi_gmem6_ARSIZE => grp_dfm_fu_218_m_axi_gmem6_ARSIZE,
        m_axi_gmem6_ARBURST => grp_dfm_fu_218_m_axi_gmem6_ARBURST,
        m_axi_gmem6_ARLOCK => grp_dfm_fu_218_m_axi_gmem6_ARLOCK,
        m_axi_gmem6_ARCACHE => grp_dfm_fu_218_m_axi_gmem6_ARCACHE,
        m_axi_gmem6_ARPROT => grp_dfm_fu_218_m_axi_gmem6_ARPROT,
        m_axi_gmem6_ARQOS => grp_dfm_fu_218_m_axi_gmem6_ARQOS,
        m_axi_gmem6_ARREGION => grp_dfm_fu_218_m_axi_gmem6_ARREGION,
        m_axi_gmem6_ARUSER => grp_dfm_fu_218_m_axi_gmem6_ARUSER,
        m_axi_gmem6_RVALID => m_axi_gmem3_RVALID,
        m_axi_gmem6_RREADY => grp_dfm_fu_218_m_axi_gmem6_RREADY,
        m_axi_gmem6_RDATA => m_axi_gmem3_RDATA,
        m_axi_gmem6_RLAST => m_axi_gmem3_RLAST,
        m_axi_gmem6_RID => m_axi_gmem3_RID,
        m_axi_gmem6_RFIFONUM => m_axi_gmem3_RFIFONUM,
        m_axi_gmem6_RUSER => m_axi_gmem3_RUSER,
        m_axi_gmem6_RRESP => m_axi_gmem3_RRESP,
        m_axi_gmem6_BVALID => ap_const_logic_0,
        m_axi_gmem6_BREADY => grp_dfm_fu_218_m_axi_gmem6_BREADY,
        m_axi_gmem6_BRESP => ap_const_lv2_0,
        m_axi_gmem6_BID => ap_const_lv1_0,
        m_axi_gmem6_BUSER => ap_const_lv1_0,
        B => B1,
        K => trunc_ln_reg_342);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dfm_fu_218_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dfm_fu_218_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dfm_fu_218_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_dfm_fu_218_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dfm_fu_218_ap_ready = ap_const_logic_1)) then 
                    grp_dfm_fu_218_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_ready = ap_const_logic_1)) then 
                    grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_11_reg_327 <= s_01_dout(386 downto 386);
                tmp_12_reg_332 <= s_01_dout(387 downto 387);
                trunc_ln151_6_reg_317 <= s_01_dout(287 downto 256);
                trunc_ln151_7_reg_322 <= s_01_dout(383 downto 352);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln_reg_342 <= K(31 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, s_01_empty_n, grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_done, grp_dfm_fu_218_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dfm_fu_218_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, s_01_empty_n)
    begin
        if (((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_done)
    begin
        if ((grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_dfm_fu_218_ap_done)
    begin
        if ((grp_dfm_fu_218_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, s_01_empty_n)
    begin
                ap_block_state1 <= ((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_dfm_fu_218_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dfm_fu_218_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dfm_fu_218_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dfm_fu_218_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_dfm_fu_218_ap_start <= grp_dfm_fu_218_ap_start_reg;
    grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_ap_start_reg;
    m_axi_gmem3_ARADDR <= grp_dfm_fu_218_m_axi_gmem6_ARADDR;
    m_axi_gmem3_ARBURST <= grp_dfm_fu_218_m_axi_gmem6_ARBURST;
    m_axi_gmem3_ARCACHE <= grp_dfm_fu_218_m_axi_gmem6_ARCACHE;
    m_axi_gmem3_ARID <= grp_dfm_fu_218_m_axi_gmem6_ARID;
    m_axi_gmem3_ARLEN <= grp_dfm_fu_218_m_axi_gmem6_ARLEN;
    m_axi_gmem3_ARLOCK <= grp_dfm_fu_218_m_axi_gmem6_ARLOCK;
    m_axi_gmem3_ARPROT <= grp_dfm_fu_218_m_axi_gmem6_ARPROT;
    m_axi_gmem3_ARQOS <= grp_dfm_fu_218_m_axi_gmem6_ARQOS;
    m_axi_gmem3_ARREGION <= grp_dfm_fu_218_m_axi_gmem6_ARREGION;
    m_axi_gmem3_ARSIZE <= grp_dfm_fu_218_m_axi_gmem6_ARSIZE;
    m_axi_gmem3_ARUSER <= grp_dfm_fu_218_m_axi_gmem6_ARUSER;

    m_axi_gmem3_ARVALID_assign_proc : process(ap_CS_fsm_state5, grp_dfm_fu_218_m_axi_gmem6_ARVALID, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem3_ARVALID <= grp_dfm_fu_218_m_axi_gmem6_ARVALID;
        else 
            m_axi_gmem3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_AWID <= ap_const_lv1_0;
    m_axi_gmem3_AWLEN <= ap_const_lv32_0;
    m_axi_gmem3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem3_AWVALID <= ap_const_logic_0;
    m_axi_gmem3_BREADY <= ap_const_logic_0;

    m_axi_gmem3_RREADY_assign_proc : process(ap_CS_fsm_state5, grp_dfm_fu_218_m_axi_gmem6_RREADY, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem3_RREADY <= grp_dfm_fu_218_m_axi_gmem6_RREADY;
        else 
            m_axi_gmem3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_WDATA <= ap_const_lv32_0;
    m_axi_gmem3_WID <= ap_const_lv1_0;
    m_axi_gmem3_WLAST <= ap_const_logic_0;
    m_axi_gmem3_WSTRB <= ap_const_lv4_0;
    m_axi_gmem3_WUSER <= ap_const_lv1_0;
    m_axi_gmem3_WVALID <= ap_const_logic_0;

    p_ref_address0_assign_proc : process(ap_CS_fsm_state1, grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_ref_address0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_address0;
        else 
            p_ref_address0 <= "XX";
        end if; 
    end process;


    p_ref_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            p_ref_address1 <= "XX";
        end if; 
    end process;


    p_ref_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_ref_ce0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_ref_ce0;
        else 
            p_ref_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ref_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_ce1 <= ap_const_logic_1;
        else 
            p_ref_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ref_d0_assign_proc : process(ap_CS_fsm_state1, s_01_dout, tmp_12_reg_332, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_d0 <= tmp_12_reg_332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_d0 <= s_01_dout(385 downto 385);
        else 
            p_ref_d0 <= "X";
        end if; 
    end process;


    p_ref_d1_assign_proc : process(ap_CS_fsm_state1, s_01_dout, tmp_11_reg_327, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_ref_d1 <= tmp_11_reg_327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_ref_d1 <= s_01_dout(384 downto 384);
        else 
            p_ref_d1 <= "X";
        end if; 
    end process;


    p_ref_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_we0 <= ap_const_logic_1;
        else 
            p_ref_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ref_we1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_ref_we1 <= ap_const_logic_1;
        else 
            p_ref_we1 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_address0_assign_proc : process(ap_CS_fsm_state1, grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_v_y_address0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_address0;
        else 
            p_v_y_address0 <= "XX";
        end if; 
    end process;


    p_v_y_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            p_v_y_address1 <= "XX";
        end if; 
    end process;


    p_v_y_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_v_y_ce0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_p_v_y_ce0;
        else 
            p_v_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_ce1 <= ap_const_logic_1;
        else 
            p_v_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_d0_assign_proc : process(ap_CS_fsm_state1, s_01_dout, trunc_ln151_7_reg_322, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_d0 <= trunc_ln151_7_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_d0 <= s_01_dout(191 downto 160);
        else 
            p_v_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_v_y_d1_assign_proc : process(ap_CS_fsm_state1, s_01_dout, trunc_ln151_6_reg_317, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_v_y_d1 <= trunc_ln151_6_reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_v_y_d1 <= s_01_dout(95 downto 64);
        else 
            p_v_y_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_v_y_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_we0 <= ap_const_logic_1;
        else 
            p_v_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_v_y_we1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_v_y_we1 <= ap_const_logic_1;
        else 
            p_v_y_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_01_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_01_blk_n <= s_01_empty_n;
        else 
            s_01_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_01_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_01_empty_n)
    begin
        if ((not(((s_01_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_01_read <= ap_const_logic_1;
        else 
            s_01_read <= ap_const_logic_0;
        end if; 
    end process;


    tile_ref_address0_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_address0, grp_dfm_fu_218_tile_ref_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tile_ref_address0 <= grp_dfm_fu_218_tile_ref_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_ref_address0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_address0;
        else 
            tile_ref_address0 <= "XX";
        end if; 
    end process;


    tile_ref_ce0_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_ce0, grp_dfm_fu_218_tile_ref_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tile_ref_ce0 <= grp_dfm_fu_218_tile_ref_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_ref_ce0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_ce0;
        else 
            tile_ref_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tile_ref_we0_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_ref_we0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_ref_we0;
        else 
            tile_ref_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tile_y_address0_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_address0, grp_dfm_fu_218_tile_y_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tile_y_address0 <= grp_dfm_fu_218_tile_y_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_y_address0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_address0;
        else 
            tile_y_address0 <= "XX";
        end if; 
    end process;


    tile_y_ce0_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_ce0, grp_dfm_fu_218_tile_y_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tile_y_ce0 <= grp_dfm_fu_218_tile_y_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_y_ce0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_ce0;
        else 
            tile_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tile_y_we0_assign_proc : process(grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tile_y_we0 <= grp_pu_kernel_Pipeline_pu_save_stream_into_pu_fu_210_tile_y_we0;
        else 
            tile_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
