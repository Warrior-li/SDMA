-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_49_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    map_buf_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    map_buf_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    map_buf_0_ap_vld : OUT STD_LOGIC;
    map_buf_15 : OUT STD_LOGIC_VECTOR (3 downto 0);
    map_buf_15_ap_vld : OUT STD_LOGIC;
    map_buf_14 : OUT STD_LOGIC_VECTOR (1 downto 0);
    map_buf_14_ap_vld : OUT STD_LOGIC;
    map_buf_13 : OUT STD_LOGIC_VECTOR (2 downto 0);
    map_buf_13_ap_vld : OUT STD_LOGIC;
    map_buf_12 : OUT STD_LOGIC_VECTOR (2 downto 0);
    map_buf_12_ap_vld : OUT STD_LOGIC;
    map_buf_11 : OUT STD_LOGIC_VECTOR (3 downto 0);
    map_buf_11_ap_vld : OUT STD_LOGIC;
    map_buf_10 : OUT STD_LOGIC_VECTOR (3 downto 0);
    map_buf_10_ap_vld : OUT STD_LOGIC;
    map_buf_9 : OUT STD_LOGIC_VECTOR (3 downto 0);
    map_buf_9_ap_vld : OUT STD_LOGIC;
    map_buf_8 : OUT STD_LOGIC_VECTOR (3 downto 0);
    map_buf_8_ap_vld : OUT STD_LOGIC;
    map_buf_7 : OUT STD_LOGIC_VECTOR (0 downto 0);
    map_buf_7_ap_vld : OUT STD_LOGIC;
    map_buf_6 : OUT STD_LOGIC_VECTOR (1 downto 0);
    map_buf_6_ap_vld : OUT STD_LOGIC;
    map_buf_5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    map_buf_5_ap_vld : OUT STD_LOGIC;
    map_buf_4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    map_buf_4_ap_vld : OUT STD_LOGIC;
    map_buf_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    map_buf_3_ap_vld : OUT STD_LOGIC;
    map_buf_2 : OUT STD_LOGIC_VECTOR (1 downto 0);
    map_buf_2_ap_vld : OUT STD_LOGIC;
    map_buf_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    map_buf_1_ap_vld : OUT STD_LOGIC;
    map_buf_0_loc_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    map_buf_0_loc_0_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of spmm_hls_load_dense_accoding_A_Pipeline_VITIS_LOOP_49_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln49_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln51_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal trunc_ln51_fu_270_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_108 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln49_fu_264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component spmm_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln49_fu_258_p2 = ap_const_lv1_0)) then 
                    i_fu_108 <= add_ln49_fu_264_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_108 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln49_fu_264_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, ap_start_int)
    begin
        if (((icmp_ln49_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_108)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_108;
        end if; 
    end process;

    icmp_ln49_fu_258_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv5_10) else "0";
    map_buf_0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln51_fu_270_p1),32));

    map_buf_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_0) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_0_ap_vld <= ap_const_logic_1;
        else 
            map_buf_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    map_buf_0_loc_0_out_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, map_buf_0_load, zext_ln51_fu_275_p1, ap_loop_init, trunc_ln51_fu_270_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((trunc_ln51_fu_270_p1 = ap_const_lv4_0) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0))) then 
                map_buf_0_loc_0_out <= zext_ln51_fu_275_p1;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                map_buf_0_loc_0_out <= map_buf_0_load;
            else 
                map_buf_0_loc_0_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            map_buf_0_loc_0_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    map_buf_0_loc_0_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, ap_loop_init, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if ((((trunc_ln51_fu_270_p1 = ap_const_lv4_0) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)) or ((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            map_buf_0_loc_0_out_ap_vld <= ap_const_logic_1;
        else 
            map_buf_0_loc_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_1 <= ap_const_lv1_1;
    map_buf_10 <= ap_const_lv4_A;

    map_buf_10_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_A) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_10_ap_vld <= ap_const_logic_1;
        else 
            map_buf_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_11 <= ap_const_lv4_B;

    map_buf_11_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_B) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_11_ap_vld <= ap_const_logic_1;
        else 
            map_buf_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_12 <= ap_const_lv3_4;

    map_buf_12_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_C) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_12_ap_vld <= ap_const_logic_1;
        else 
            map_buf_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_13 <= ap_const_lv3_5;

    map_buf_13_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_D) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_13_ap_vld <= ap_const_logic_1;
        else 
            map_buf_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_14 <= ap_const_lv2_2;

    map_buf_14_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_E) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_14_ap_vld <= ap_const_logic_1;
        else 
            map_buf_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_15 <= trunc_ln51_fu_270_p1;

    map_buf_15_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_F) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_15_ap_vld <= ap_const_logic_1;
        else 
            map_buf_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    map_buf_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_1) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_1_ap_vld <= ap_const_logic_1;
        else 
            map_buf_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_2 <= ap_const_lv2_2;

    map_buf_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_2) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_2_ap_vld <= ap_const_logic_1;
        else 
            map_buf_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_3 <= ap_const_lv1_1;

    map_buf_3_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_3) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_3_ap_vld <= ap_const_logic_1;
        else 
            map_buf_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_4 <= ap_const_lv3_4;

    map_buf_4_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_4) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_4_ap_vld <= ap_const_logic_1;
        else 
            map_buf_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_5 <= ap_const_lv3_5;

    map_buf_5_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_5) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_5_ap_vld <= ap_const_logic_1;
        else 
            map_buf_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_6 <= ap_const_lv2_2;

    map_buf_6_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_6) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_6_ap_vld <= ap_const_logic_1;
        else 
            map_buf_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_7 <= ap_const_lv1_1;

    map_buf_7_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_7) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_7_ap_vld <= ap_const_logic_1;
        else 
            map_buf_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_8 <= ap_const_lv4_8;

    map_buf_8_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_8) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_8_ap_vld <= ap_const_logic_1;
        else 
            map_buf_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    map_buf_9 <= ap_const_lv4_9;

    map_buf_9_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln49_fu_258_p2, trunc_ln51_fu_270_p1, ap_start_int)
    begin
        if (((trunc_ln51_fu_270_p1 = ap_const_lv4_9) and (icmp_ln49_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            map_buf_9_ap_vld <= ap_const_logic_1;
        else 
            map_buf_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln51_fu_270_p1 <= ap_sig_allocacmp_i_3(4 - 1 downto 0);
    zext_ln51_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln51_fu_270_p1),32));
end behav;
