-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmm_hls_pu_comp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    res_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_value : IN STD_LOGIC_VECTOR (31 downto 0);
    a_y : IN STD_LOGIC_VECTOR (15 downto 0);
    Dbuf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Dbuf_ce0 : OUT STD_LOGIC;
    Dbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    K : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of spmm_hls_pu_comp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_60_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_reg_87 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_idle : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_ready : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_Dbuf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_Dbuf_ce0 : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_ce0 : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_we0 : STD_LOGIC;
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_60_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmm_hls_pu_comp_Pipeline_VITIS_LOOP_129_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        K : IN STD_LOGIC_VECTOR (29 downto 0);
        mul : IN STD_LOGIC_VECTOR (15 downto 0);
        Dbuf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        Dbuf_ce0 : OUT STD_LOGIC;
        Dbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_value : IN STD_LOGIC_VECTOR (31 downto 0);
        res_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component spmm_hls_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44 : component spmm_hls_pu_comp_Pipeline_VITIS_LOOP_129_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start,
        ap_done => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done,
        ap_idle => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_idle,
        ap_ready => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_ready,
        K => K,
        mul => mul_reg_87,
        Dbuf_address0 => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_Dbuf_address0,
        Dbuf_ce0 => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_Dbuf_ce0,
        Dbuf_q0 => Dbuf_q0,
        a_value => a_value,
        res_address0 => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_address0,
        res_ce0 => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_ce0,
        res_we0 => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_we0,
        res_d0 => grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_d0);

    mul_mul_16s_16s_16_4_1_U57 : component spmm_hls_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_60_p0,
        din1 => a_y,
        ce => ap_const_logic_1,
        dout => grp_fu_60_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_reg_87 <= grp_fu_60_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Dbuf_address0 <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_Dbuf_address0;
    Dbuf_ce0 <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_Dbuf_ce0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done)
    begin
        if ((grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done, ap_CS_fsm_state5)
    begin
        if ((((grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done, ap_CS_fsm_state5)
    begin
        if (((grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_60_p0 <= K(16 - 1 downto 0);
    grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_ap_start_reg;
    res_address0 <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_address0;
    res_ce0 <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_ce0;
    res_d0 <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_d0;
    res_we0 <= grp_pu_comp_Pipeline_VITIS_LOOP_129_1_fu_44_res_we0;
end behav;
